6 0 0 0 0 0 0 0 1 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 1 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 1 1 1 1 1 1 1 1 6 !5 2 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 10

# Original program

#program let a = 255;
#program while (a > 0) {
#program     a = a - 1;
#program     let b = 0;
#program     while (b > 0) {
#program         b = b - 1;
#program     };
#program };

START 5 5 S 0END

#
#asm L1:
#

LABEL_L1 5 5 S 0END

#
#asm LOAD S1 A
#


0END 5 5 S 1START

# Start of loading
1START 5 5 R 1TO_A_END_R
# To end of number A
1TO_A_END_R 0 0 R 1TO_A_END_R
1TO_A_END_R 1 1 R 1TO_A_END_R
1TO_A_END_R 2 2 R 1TO_A_END_R
1TO_A_END_R 3 3 L 1SET_TO_7

# Move to the start of number A, and set all values to 7
1SET_TO_7 0 7 L 1SET_TO_7
1SET_TO_7 1 7 L 1SET_TO_7
1SET_TO_7 2 2 L 1TO_MIDDLE_L
# Find the middle
1TO_MIDDLE_L 1 1 L 1TO_MIDDLE_L
1TO_MIDDLE_L 0 0 L 1TO_MIDDLE_L
1TO_MIDDLE_L 7 7 L 1TO_MIDDLE_L
1TO_MIDDLE_L 2 2 L 1TO_MIDDLE_L
1TO_MIDDLE_L 3 3 L 1TO_MIDDLE_L
1TO_MIDDLE_L 4 4 L 1TO_MIDDLE_L
1TO_MIDDLE_L 5 5 L 1TO_S1_END
# To end of S1
1TO_S1_END 6 6 L 1COPY_VALUE
# Move Left until start of S1
# Copy the first non-7/8 value
1COPY_VALUE 0 7 R 1MOVE_ZERO
1COPY_VALUE 1 8 R 1MOVE_ONE
1COPY_VALUE 7 7 L 1COPY_VALUE
1COPY_VALUE 8 8 L 1COPY_VALUE
1COPY_VALUE 6 6 R 1RESTORE_VALUE

# Move a 0 to number A
1MOVE_ZERO 0 0 R 1MOVE_ZERO
1MOVE_ZERO 1 1 R 1MOVE_ZERO
1MOVE_ZERO 2 2 R 1MOVE_ZERO
1MOVE_ZERO 3 3 L 1MOVE_ZERO_2
1MOVE_ZERO 4 4 R 1MOVE_ZERO
1MOVE_ZERO 5 5 R 1MOVE_ZERO
1MOVE_ZERO 6 6 R 1MOVE_ZERO
1MOVE_ZERO 7 7 R 1MOVE_ZERO
1MOVE_ZERO 8 8 R 1MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
1MOVE_ZERO_2 0 0 L 1MOVE_ZERO_2
1MOVE_ZERO_2 1 1 L 1MOVE_ZERO_2
1MOVE_ZERO_2 7 0 S 1TO_MIDDLE_L
# Move a 1 to number A
1MOVE_ONE 0 0 R 1MOVE_ONE
1MOVE_ONE 1 1 R 1MOVE_ONE
1MOVE_ONE 2 2 R 1MOVE_ONE
1MOVE_ONE 3 3 L 1MOVE_ONE_2
1MOVE_ONE 4 4 R 1MOVE_ONE
1MOVE_ONE 5 5 R 1MOVE_ONE
1MOVE_ONE 6 6 R 1MOVE_ONE
1MOVE_ONE 7 7 R 1MOVE_ONE
1MOVE_ONE 8 8 R 1MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
1MOVE_ONE_2 0 0 L 1MOVE_ONE_2
1MOVE_ONE_2 1 1 L 1MOVE_ONE_2
1MOVE_ONE_2 7 1 S 1TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
1RESTORE_VALUE 7 0 R 1RESTORE_VALUE
1RESTORE_VALUE 8 1 R 1RESTORE_VALUE
1RESTORE_VALUE 6 6 S 1TO_START
# Go back to the start
1TO_START 0 0 R 1TO_START
1TO_START 1 1 R 1TO_START
1TO_START 6 6 R 1TO_START
1TO_START 5 5 S 1END



#
#asm LOAD S2 B
#


1END 5 5 S 2START

# Start of loading
2START 5 5 R 2TO_B_END_R
# To end of number B
2TO_B_END_R 0 0 R 2TO_B_END_R
2TO_B_END_R 1 1 R 2TO_B_END_R
2TO_B_END_R 2 2 R 2TO_B_END_R
2TO_B_END_R 3 3 R 2TO_B_END_R
2TO_B_END_R 4 4 L 2SET_TO_7

# Move to the start of number B, and set all values to 7
2SET_TO_7 0 7 L 2SET_TO_7
2SET_TO_7 1 7 L 2SET_TO_7
2SET_TO_7 3 3 L 2TO_MIDDLE_L
# Find the middle
2TO_MIDDLE_L 1 1 L 2TO_MIDDLE_L
2TO_MIDDLE_L 0 0 L 2TO_MIDDLE_L
2TO_MIDDLE_L 7 7 L 2TO_MIDDLE_L
2TO_MIDDLE_L 2 2 L 2TO_MIDDLE_L
2TO_MIDDLE_L 3 3 L 2TO_MIDDLE_L
2TO_MIDDLE_L 4 4 L 2TO_MIDDLE_L
2TO_MIDDLE_L 5 5 L 2TO_S1_END
# To end of S1
2TO_S1_END 6 6 L 2TO_S2_END
# To end of S2
2TO_S2_END 0 0 L 2TO_S2_END
2TO_S2_END 1 1 L 2TO_S2_END
2TO_S2_END 6 6 L 2COPY_VALUE
# Move Left until start of S2
# Copy the first non-7/8 value
2COPY_VALUE 0 7 R 2MOVE_ZERO
2COPY_VALUE 1 8 R 2MOVE_ONE
2COPY_VALUE 7 7 L 2COPY_VALUE
2COPY_VALUE 8 8 L 2COPY_VALUE
2COPY_VALUE 6 6 R 2RESTORE_VALUE

# Move a 0 to number B
2MOVE_ZERO 0 0 R 2MOVE_ZERO
2MOVE_ZERO 1 1 R 2MOVE_ZERO
2MOVE_ZERO 2 2 R 2MOVE_ZERO
2MOVE_ZERO 3 3 R 2MOVE_ZERO
2MOVE_ZERO 4 4 L 2MOVE_ZERO_2
2MOVE_ZERO 5 5 R 2MOVE_ZERO
2MOVE_ZERO 6 6 R 2MOVE_ZERO
2MOVE_ZERO 7 7 R 2MOVE_ZERO
2MOVE_ZERO 8 8 R 2MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
2MOVE_ZERO_2 0 0 L 2MOVE_ZERO_2
2MOVE_ZERO_2 1 1 L 2MOVE_ZERO_2
2MOVE_ZERO_2 7 0 S 2TO_MIDDLE_L
# Move a 1 to number B
2MOVE_ONE 0 0 R 2MOVE_ONE
2MOVE_ONE 1 1 R 2MOVE_ONE
2MOVE_ONE 2 2 R 2MOVE_ONE
2MOVE_ONE 3 3 R 2MOVE_ONE
2MOVE_ONE 4 4 L 2MOVE_ONE_2
2MOVE_ONE 5 5 R 2MOVE_ONE
2MOVE_ONE 6 6 R 2MOVE_ONE
2MOVE_ONE 7 7 R 2MOVE_ONE
2MOVE_ONE 8 8 R 2MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
2MOVE_ONE_2 0 0 L 2MOVE_ONE_2
2MOVE_ONE_2 1 1 L 2MOVE_ONE_2
2MOVE_ONE_2 7 1 S 2TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
2RESTORE_VALUE 7 0 R 2RESTORE_VALUE
2RESTORE_VALUE 8 1 R 2RESTORE_VALUE
2RESTORE_VALUE 6 6 S 2TO_START
# Go back to the start
2TO_START 0 0 R 2TO_START
2TO_START 1 1 R 2TO_START
2TO_START 6 6 R 2TO_START
2TO_START 5 5 S 2END



#
#asm SUB_SAFE
#


2END 5 5 S 3START

# Start of the subtraction program
3START 5 5 R 3FIND_B_END

# Find the end of the second number
3FIND_B_END 0 0 R 3FIND_B_END
3FIND_B_END 1 1 R 3FIND_B_END
3FIND_B_END 2 2 R 3FIND_B_END
3FIND_B_END 3 3 R 3FIND_B_END
3FIND_B_END 7 7 R 3FIND_B_END
3FIND_B_END 8 8 R 3FIND_B_END
3FIND_B_END 4 4 L 3SUB_DIGIT

# Find first non-subtracted digit
3SUB_DIGIT 7 7 L 3SUB_DIGIT
3SUB_DIGIT 8 8 L 3SUB_DIGIT
3SUB_DIGIT 0 7 L 3SUB_DIGIT_ZERO
3SUB_DIGIT 1 7 L 3SUB_DIGIT_ONE
3SUB_DIGIT 3 3 R 3RESTORE_1

# Subtract a zero
3SUB_DIGIT_ZERO 0 0 L 3SUB_DIGIT_ZERO
3SUB_DIGIT_ZERO 1 1 L 3SUB_DIGIT_ZERO
3SUB_DIGIT_ZERO 3 3 L 3SUB_DIGIT_ZERO_1

3SUB_DIGIT_ZERO_1 7 7 L 3SUB_DIGIT_ZERO_1
3SUB_DIGIT_ZERO_1 8 8 L 3SUB_DIGIT_ZERO_1
3SUB_DIGIT_ZERO_1 0 7 L 3FIND_B_END
3SUB_DIGIT_ZERO_1 1 8 R 3FIND_B_END

# Subtract a one
3SUB_DIGIT_ONE 0 0 L 3SUB_DIGIT_ONE
3SUB_DIGIT_ONE 1 1 L 3SUB_DIGIT_ONE
3SUB_DIGIT_ONE 3 3 L 3SUB_DIGIT_ONE_1

3SUB_DIGIT_ONE_1 7 7 L 3SUB_DIGIT_ONE_1
3SUB_DIGIT_ONE_1 8 8 L 3SUB_DIGIT_ONE_1
3SUB_DIGIT_ONE_1 0 8 L 3SUB_DIGIT_ONE_2
3SUB_DIGIT_ONE_1 1 7 R 3FIND_B_END

3SUB_DIGIT_ONE_2 1 0 R 3FIND_B_END
3SUB_DIGIT_ONE_2 2 2 R 3RESTORE
3SUB_DIGIT_ONE_2 0 1 L 3SUB_DIGIT_ONE_2

# Return to the middle of the tape
3RESTORE 0 0 R 3RESTORE
3RESTORE 1 0 R 3RESTORE
3RESTORE 7 0 R 3RESTORE
3RESTORE 8 0 R 3RESTORE
3RESTORE 3 3 R 3RESTORE_1

3RESTORE_1 0 0 R 3RESTORE_1
3RESTORE_1 1 1 R 3RESTORE_1
3RESTORE_1 7 7 R 3RESTORE_1
3RESTORE_1 8 8 R 3RESTORE_1
3RESTORE_1 4 4 L 3RESTORE_2

3RESTORE_2 0 0 L 3RESTORE_2
3RESTORE_2 1 1 L 3RESTORE_2
3RESTORE_2 2 2 L 3RESTORE_2
3RESTORE_2 3 3 L 3RESTORE_2
3RESTORE_2 7 0 L 3RESTORE_2
3RESTORE_2 8 1 L 3RESTORE_2
3RESTORE_2 5 5 S 3END


#
#asm ISZERO
#


3END 5 5 S 4START

# Start of the ISZERO program
4START 5 5 R 4START
4START 2 2 R 4CHECK_A

# Check for ones in A
4CHECK_A 0 0 R 4CHECK_A
4CHECK_A 1 0 R 4FOUND_ONE
4CHECK_A 3 3 L 4CHECK_A_1

# no ones found in A, set last digit of A to 1
4CHECK_A_1 0 1 L 4RETURN

# Found a 1 in A
4FOUND_ONE 0 0 R 4FOUND_ONE
4FOUND_ONE 1 0 R 4FOUND_ONE
4FOUND_ONE 3 3 L 4FOUND_ONE_1

# Found a 1 in A, return
4FOUND_ONE_1 0 0 L 4RETURN

# Return to middle
4RETURN 0 0 L 4RETURN
4RETURN 1 1 L 4RETURN
4RETURN 2 2 L 4RETURN
4RETURN 5 5 S 4END


#
#asm NOT
#


4END 5 5 S 5START

# Start of NOT program
5START 5 5 R 5FIND_A_END

# Find end of A
5FIND_A_END 0 0 R 5FIND_A_END
5FIND_A_END 1 1 R 5FIND_A_END
5FIND_A_END 2 2 R 5FIND_A_END
5FIND_A_END 3 3 L 5FLIP_DIGIT

# Flip the last digit of A
5FLIP_DIGIT 0 1 L 5RETURN
5FLIP_DIGIT 1 0 L 5RETURN

# Return to the middle of the tape
5RETURN 0 0 L 5RETURN
5RETURN 1 1 L 5RETURN
5RETURN 2 2 L 5RETURN
5RETURN 5 5 S 5END



#
#asm STORE S3 A
#


5END 5 5 S 6START

6START 5 5 L 6TO_S1_END
# To end of S1
6TO_S1_END 6 6 L 6TO_S2_END
# To end of S2
6TO_S2_END 0 0 L 6TO_S2_END
6TO_S2_END 1 1 L 6TO_S2_END
6TO_S2_END 6 6 L 6TO_S3_END
# To end of S3
6TO_S3_END 0 0 L 6TO_S3_END
6TO_S3_END 1 1 L 6TO_S3_END
6TO_S3_END 6 6 L 6SET_TO_7

# Set all the values to 7 untill the start of S1
6SET_TO_7 0 7 L 6SET_TO_7
6SET_TO_7 1 7 L 6SET_TO_7
6SET_TO_7 6 9 R 6TO_MIDDLE_R
# Find the middle
6TO_MIDDLE_R 1 1 R 6TO_MIDDLE_R
6TO_MIDDLE_R 0 0 R 6TO_MIDDLE_R
6TO_MIDDLE_R 7 7 R 6TO_MIDDLE_R
6TO_MIDDLE_R 2 2 R 6TO_MIDDLE_R
6TO_MIDDLE_R 6 6 R 6TO_MIDDLE_R
6TO_MIDDLE_R 5 5 R 6COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
6COPY_VALUE 0 7 L 6MOVE_ZERO
6COPY_VALUE 1 8 L 6MOVE_ONE
6COPY_VALUE 2 2 R 6COPY_VALUE
6COPY_VALUE 7 7 R 6COPY_VALUE
6COPY_VALUE 8 8 R 6COPY_VALUE
6COPY_VALUE 3 3 L 6RESTORE_VALUE

# Move a 0 to number 9
6MOVE_ZERO 0 0 L 6MOVE_ZERO
6MOVE_ZERO 1 1 L 6MOVE_ZERO
6MOVE_ZERO 2 2 L 6MOVE_ZERO
6MOVE_ZERO 3 3 L 6MOVE_ZERO
6MOVE_ZERO 4 4 L 6MOVE_ZERO
6MOVE_ZERO 9 9 R 6MOVE_ZERO_2
6MOVE_ZERO 5 5 L 6MOVE_ZERO
6MOVE_ZERO 6 6 L 6MOVE_ZERO
6MOVE_ZERO 7 7 L 6MOVE_ZERO
6MOVE_ZERO 8 8 L 6MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
6MOVE_ZERO_2 0 0 R 6MOVE_ZERO_2
6MOVE_ZERO_2 1 1 R 6MOVE_ZERO_2
6MOVE_ZERO_2 7 0 S 6TO_MIDDLE_R
# Move a 1 to number 9
6MOVE_ONE 0 0 L 6MOVE_ONE
6MOVE_ONE 1 1 L 6MOVE_ONE
6MOVE_ONE 2 2 L 6MOVE_ONE
6MOVE_ONE 3 3 L 6MOVE_ONE
6MOVE_ONE 4 4 L 6MOVE_ONE
6MOVE_ONE 9 9 R 6MOVE_ONE_2
6MOVE_ONE 5 5 L 6MOVE_ONE
6MOVE_ONE 6 6 L 6MOVE_ONE
6MOVE_ONE 7 7 L 6MOVE_ONE
6MOVE_ONE 8 8 L 6MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
6MOVE_ONE_2 0 0 R 6MOVE_ONE_2
6MOVE_ONE_2 1 1 R 6MOVE_ONE_2
6MOVE_ONE_2 7 1 S 6TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
6RESTORE_VALUE 7 0 L 6RESTORE_VALUE
6RESTORE_VALUE 8 1 L 6RESTORE_VALUE
6RESTORE_VALUE 2 2 L 6RESET_STORAGE_MARKER
# Reset 9 to 6
6RESET_STORAGE_MARKER 0 0 L 6RESET_STORAGE_MARKER
6RESET_STORAGE_MARKER 1 1 L 6RESET_STORAGE_MARKER
6RESET_STORAGE_MARKER 5 5 L 6RESET_STORAGE_MARKER
6RESET_STORAGE_MARKER 6 6 L 6RESET_STORAGE_MARKER
6RESET_STORAGE_MARKER 9 6 R 6RETURN_TO_MIDDLE
# Return to middle
6RETURN_TO_MIDDLE 0 0 R 6RETURN_TO_MIDDLE
6RETURN_TO_MIDDLE 1 1 R 6RETURN_TO_MIDDLE
6RETURN_TO_MIDDLE 6 6 R 6RETURN_TO_MIDDLE
6RETURN_TO_MIDDLE 5 5 S 6END


#
#asm LOAD S3 A
#


6END 5 5 S 7START

# Start of loading
7START 5 5 R 7TO_A_END_R
# To end of number A
7TO_A_END_R 0 0 R 7TO_A_END_R
7TO_A_END_R 1 1 R 7TO_A_END_R
7TO_A_END_R 2 2 R 7TO_A_END_R
7TO_A_END_R 3 3 L 7SET_TO_7

# Move to the start of number A, and set all values to 7
7SET_TO_7 0 7 L 7SET_TO_7
7SET_TO_7 1 7 L 7SET_TO_7
7SET_TO_7 2 2 L 7TO_MIDDLE_L
# Find the middle
7TO_MIDDLE_L 1 1 L 7TO_MIDDLE_L
7TO_MIDDLE_L 0 0 L 7TO_MIDDLE_L
7TO_MIDDLE_L 7 7 L 7TO_MIDDLE_L
7TO_MIDDLE_L 2 2 L 7TO_MIDDLE_L
7TO_MIDDLE_L 3 3 L 7TO_MIDDLE_L
7TO_MIDDLE_L 4 4 L 7TO_MIDDLE_L
7TO_MIDDLE_L 5 5 L 7TO_S1_END
# To end of S1
7TO_S1_END 6 6 L 7TO_S2_END
# To end of S2
7TO_S2_END 0 0 L 7TO_S2_END
7TO_S2_END 1 1 L 7TO_S2_END
7TO_S2_END 6 6 L 7TO_S3_END
# To end of S3
7TO_S3_END 0 0 L 7TO_S3_END
7TO_S3_END 1 1 L 7TO_S3_END
7TO_S3_END 6 6 L 7COPY_VALUE
# Move Left until start of S3
# Copy the first non-7/8 value
7COPY_VALUE 0 7 R 7MOVE_ZERO
7COPY_VALUE 1 8 R 7MOVE_ONE
7COPY_VALUE 7 7 L 7COPY_VALUE
7COPY_VALUE 8 8 L 7COPY_VALUE
7COPY_VALUE 6 6 R 7RESTORE_VALUE

# Move a 0 to number A
7MOVE_ZERO 0 0 R 7MOVE_ZERO
7MOVE_ZERO 1 1 R 7MOVE_ZERO
7MOVE_ZERO 2 2 R 7MOVE_ZERO
7MOVE_ZERO 3 3 L 7MOVE_ZERO_2
7MOVE_ZERO 4 4 R 7MOVE_ZERO
7MOVE_ZERO 5 5 R 7MOVE_ZERO
7MOVE_ZERO 6 6 R 7MOVE_ZERO
7MOVE_ZERO 7 7 R 7MOVE_ZERO
7MOVE_ZERO 8 8 R 7MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
7MOVE_ZERO_2 0 0 L 7MOVE_ZERO_2
7MOVE_ZERO_2 1 1 L 7MOVE_ZERO_2
7MOVE_ZERO_2 7 0 S 7TO_MIDDLE_L
# Move a 1 to number A
7MOVE_ONE 0 0 R 7MOVE_ONE
7MOVE_ONE 1 1 R 7MOVE_ONE
7MOVE_ONE 2 2 R 7MOVE_ONE
7MOVE_ONE 3 3 L 7MOVE_ONE_2
7MOVE_ONE 4 4 R 7MOVE_ONE
7MOVE_ONE 5 5 R 7MOVE_ONE
7MOVE_ONE 6 6 R 7MOVE_ONE
7MOVE_ONE 7 7 R 7MOVE_ONE
7MOVE_ONE 8 8 R 7MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
7MOVE_ONE_2 0 0 L 7MOVE_ONE_2
7MOVE_ONE_2 1 1 L 7MOVE_ONE_2
7MOVE_ONE_2 7 1 S 7TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
7RESTORE_VALUE 7 0 R 7RESTORE_VALUE
7RESTORE_VALUE 8 1 R 7RESTORE_VALUE
7RESTORE_VALUE 6 6 S 7TO_START
# Go back to the start
7TO_START 0 0 R 7TO_START
7TO_START 1 1 R 7TO_START
7TO_START 6 6 R 7TO_START
7TO_START 5 5 S 7END



#
#asm ISZERO
#


7END 5 5 S 8START

# Start of the ISZERO program
8START 5 5 R 8START
8START 2 2 R 8CHECK_A

# Check for ones in A
8CHECK_A 0 0 R 8CHECK_A
8CHECK_A 1 0 R 8FOUND_ONE
8CHECK_A 3 3 L 8CHECK_A_1

# no ones found in A, set last digit of A to 1
8CHECK_A_1 0 1 L 8RETURN

# Found a 1 in A
8FOUND_ONE 0 0 R 8FOUND_ONE
8FOUND_ONE 1 0 R 8FOUND_ONE
8FOUND_ONE 3 3 L 8FOUND_ONE_1

# Found a 1 in A, return
8FOUND_ONE_1 0 0 L 8RETURN

# Return to middle
8RETURN 0 0 L 8RETURN
8RETURN 1 1 L 8RETURN
8RETURN 2 2 L 8RETURN
8RETURN 5 5 S 8END


#
#asm JNZ L2
#


8END 5 5 S 9START
# Start of the JUMP if NOT ZERO program
9START 5 5 R 9START
9START 2 2 R 9A_END

# Go to end of A
9A_END 0 0 R 9A_END
9A_END 1 1 R 9A_END
9A_END 3 3 L 9CHECK_A

# no ones found in A, set last digit of A to 1
9CHECK_A 0 1 S 9RETURN_ZERO
9CHECK_A 1 1 S 9RETURN_ONE

# Return to 5
9RETURN_ZERO 0 0 L 9RETURN_ZERO
9RETURN_ZERO 1 1 L 9RETURN_ZERO
9RETURN_ZERO 2 2 L 9RETURN_ZERO
9RETURN_ZERO 5 5 S 9END

9RETURN_ONE 0 0 L 9RETURN_ONE
9RETURN_ONE 1 1 L 9RETURN_ONE
9RETURN_ONE 2 2 L 9RETURN_ONE
9RETURN_ONE 5 5 S LABEL_L2


#
#asm LOAD S1 A
#


9END 5 5 S 10START

# Start of loading
10START 5 5 R 10TO_A_END_R
# To end of number A
10TO_A_END_R 0 0 R 10TO_A_END_R
10TO_A_END_R 1 1 R 10TO_A_END_R
10TO_A_END_R 2 2 R 10TO_A_END_R
10TO_A_END_R 3 3 L 10SET_TO_7

# Move to the start of number A, and set all values to 7
10SET_TO_7 0 7 L 10SET_TO_7
10SET_TO_7 1 7 L 10SET_TO_7
10SET_TO_7 2 2 L 10TO_MIDDLE_L
# Find the middle
10TO_MIDDLE_L 1 1 L 10TO_MIDDLE_L
10TO_MIDDLE_L 0 0 L 10TO_MIDDLE_L
10TO_MIDDLE_L 7 7 L 10TO_MIDDLE_L
10TO_MIDDLE_L 2 2 L 10TO_MIDDLE_L
10TO_MIDDLE_L 3 3 L 10TO_MIDDLE_L
10TO_MIDDLE_L 4 4 L 10TO_MIDDLE_L
10TO_MIDDLE_L 5 5 L 10TO_S1_END
# To end of S1
10TO_S1_END 6 6 L 10COPY_VALUE
# Move Left until start of S1
# Copy the first non-7/8 value
10COPY_VALUE 0 7 R 10MOVE_ZERO
10COPY_VALUE 1 8 R 10MOVE_ONE
10COPY_VALUE 7 7 L 10COPY_VALUE
10COPY_VALUE 8 8 L 10COPY_VALUE
10COPY_VALUE 6 6 R 10RESTORE_VALUE

# Move a 0 to number A
10MOVE_ZERO 0 0 R 10MOVE_ZERO
10MOVE_ZERO 1 1 R 10MOVE_ZERO
10MOVE_ZERO 2 2 R 10MOVE_ZERO
10MOVE_ZERO 3 3 L 10MOVE_ZERO_2
10MOVE_ZERO 4 4 R 10MOVE_ZERO
10MOVE_ZERO 5 5 R 10MOVE_ZERO
10MOVE_ZERO 6 6 R 10MOVE_ZERO
10MOVE_ZERO 7 7 R 10MOVE_ZERO
10MOVE_ZERO 8 8 R 10MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
10MOVE_ZERO_2 0 0 L 10MOVE_ZERO_2
10MOVE_ZERO_2 1 1 L 10MOVE_ZERO_2
10MOVE_ZERO_2 7 0 S 10TO_MIDDLE_L
# Move a 1 to number A
10MOVE_ONE 0 0 R 10MOVE_ONE
10MOVE_ONE 1 1 R 10MOVE_ONE
10MOVE_ONE 2 2 R 10MOVE_ONE
10MOVE_ONE 3 3 L 10MOVE_ONE_2
10MOVE_ONE 4 4 R 10MOVE_ONE
10MOVE_ONE 5 5 R 10MOVE_ONE
10MOVE_ONE 6 6 R 10MOVE_ONE
10MOVE_ONE 7 7 R 10MOVE_ONE
10MOVE_ONE 8 8 R 10MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
10MOVE_ONE_2 0 0 L 10MOVE_ONE_2
10MOVE_ONE_2 1 1 L 10MOVE_ONE_2
10MOVE_ONE_2 7 1 S 10TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
10RESTORE_VALUE 7 0 R 10RESTORE_VALUE
10RESTORE_VALUE 8 1 R 10RESTORE_VALUE
10RESTORE_VALUE 6 6 S 10TO_START
# Go back to the start
10TO_START 0 0 R 10TO_START
10TO_START 1 1 R 10TO_START
10TO_START 6 6 R 10TO_START
10TO_START 5 5 S 10END



#
#asm LOAD S4 B
#


10END 5 5 S 11START

# Start of loading
11START 5 5 R 11TO_B_END_R
# To end of number B
11TO_B_END_R 0 0 R 11TO_B_END_R
11TO_B_END_R 1 1 R 11TO_B_END_R
11TO_B_END_R 2 2 R 11TO_B_END_R
11TO_B_END_R 3 3 R 11TO_B_END_R
11TO_B_END_R 4 4 L 11SET_TO_7

# Move to the start of number B, and set all values to 7
11SET_TO_7 0 7 L 11SET_TO_7
11SET_TO_7 1 7 L 11SET_TO_7
11SET_TO_7 3 3 L 11TO_MIDDLE_L
# Find the middle
11TO_MIDDLE_L 1 1 L 11TO_MIDDLE_L
11TO_MIDDLE_L 0 0 L 11TO_MIDDLE_L
11TO_MIDDLE_L 7 7 L 11TO_MIDDLE_L
11TO_MIDDLE_L 2 2 L 11TO_MIDDLE_L
11TO_MIDDLE_L 3 3 L 11TO_MIDDLE_L
11TO_MIDDLE_L 4 4 L 11TO_MIDDLE_L
11TO_MIDDLE_L 5 5 L 11TO_S1_END
# To end of S1
11TO_S1_END 6 6 L 11TO_S2_END
# To end of S2
11TO_S2_END 0 0 L 11TO_S2_END
11TO_S2_END 1 1 L 11TO_S2_END
11TO_S2_END 6 6 L 11TO_S3_END
# To end of S3
11TO_S3_END 0 0 L 11TO_S3_END
11TO_S3_END 1 1 L 11TO_S3_END
11TO_S3_END 6 6 L 11TO_S4_END
# To end of S4
11TO_S4_END 0 0 L 11TO_S4_END
11TO_S4_END 1 1 L 11TO_S4_END
11TO_S4_END 6 6 L 11COPY_VALUE
# Move Left until start of S4
# Copy the first non-7/8 value
11COPY_VALUE 0 7 R 11MOVE_ZERO
11COPY_VALUE 1 8 R 11MOVE_ONE
11COPY_VALUE 7 7 L 11COPY_VALUE
11COPY_VALUE 8 8 L 11COPY_VALUE
11COPY_VALUE 6 6 R 11RESTORE_VALUE

# Move a 0 to number B
11MOVE_ZERO 0 0 R 11MOVE_ZERO
11MOVE_ZERO 1 1 R 11MOVE_ZERO
11MOVE_ZERO 2 2 R 11MOVE_ZERO
11MOVE_ZERO 3 3 R 11MOVE_ZERO
11MOVE_ZERO 4 4 L 11MOVE_ZERO_2
11MOVE_ZERO 5 5 R 11MOVE_ZERO
11MOVE_ZERO 6 6 R 11MOVE_ZERO
11MOVE_ZERO 7 7 R 11MOVE_ZERO
11MOVE_ZERO 8 8 R 11MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
11MOVE_ZERO_2 0 0 L 11MOVE_ZERO_2
11MOVE_ZERO_2 1 1 L 11MOVE_ZERO_2
11MOVE_ZERO_2 7 0 S 11TO_MIDDLE_L
# Move a 1 to number B
11MOVE_ONE 0 0 R 11MOVE_ONE
11MOVE_ONE 1 1 R 11MOVE_ONE
11MOVE_ONE 2 2 R 11MOVE_ONE
11MOVE_ONE 3 3 R 11MOVE_ONE
11MOVE_ONE 4 4 L 11MOVE_ONE_2
11MOVE_ONE 5 5 R 11MOVE_ONE
11MOVE_ONE 6 6 R 11MOVE_ONE
11MOVE_ONE 7 7 R 11MOVE_ONE
11MOVE_ONE 8 8 R 11MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
11MOVE_ONE_2 0 0 L 11MOVE_ONE_2
11MOVE_ONE_2 1 1 L 11MOVE_ONE_2
11MOVE_ONE_2 7 1 S 11TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
11RESTORE_VALUE 7 0 R 11RESTORE_VALUE
11RESTORE_VALUE 8 1 R 11RESTORE_VALUE
11RESTORE_VALUE 6 6 S 11TO_START
# Go back to the start
11TO_START 0 0 R 11TO_START
11TO_START 1 1 R 11TO_START
11TO_START 6 6 R 11TO_START
11TO_START 5 5 S 11END



#
#asm SUB
#


11END 5 5 S 12START

# Start of the subtraction program
12START 5 5 R 12FIND_B_END

# Find the end of the second number
12FIND_B_END 0 0 R 12FIND_B_END
12FIND_B_END 1 1 R 12FIND_B_END
12FIND_B_END 2 2 R 12FIND_B_END
12FIND_B_END 3 3 R 12FIND_B_END
12FIND_B_END 7 7 R 12FIND_B_END
12FIND_B_END 8 8 R 12FIND_B_END
12FIND_B_END 4 4 L 12SUB_DIGIT

# Find first non-subtracted digit
12SUB_DIGIT 7 7 L 12SUB_DIGIT
12SUB_DIGIT 8 8 L 12SUB_DIGIT
12SUB_DIGIT 0 7 L 12SUB_DIGIT_ZERO
12SUB_DIGIT 1 7 L 12SUB_DIGIT_ONE
12SUB_DIGIT 3 3 R 12RESTORE

# Subtract a zero
12SUB_DIGIT_ZERO 0 0 L 12SUB_DIGIT_ZERO
12SUB_DIGIT_ZERO 1 1 L 12SUB_DIGIT_ZERO
12SUB_DIGIT_ZERO 3 3 L 12SUB_DIGIT_ZERO_1

12SUB_DIGIT_ZERO_1 7 7 L 12SUB_DIGIT_ZERO_1
12SUB_DIGIT_ZERO_1 8 8 L 12SUB_DIGIT_ZERO_1
12SUB_DIGIT_ZERO_1 0 7 L 12FIND_B_END
12SUB_DIGIT_ZERO_1 1 8 R 12FIND_B_END

# Subtract a one
12SUB_DIGIT_ONE 0 0 L 12SUB_DIGIT_ONE
12SUB_DIGIT_ONE 1 1 L 12SUB_DIGIT_ONE
12SUB_DIGIT_ONE 3 3 L 12SUB_DIGIT_ONE_1

12SUB_DIGIT_ONE_1 7 7 L 12SUB_DIGIT_ONE_1
12SUB_DIGIT_ONE_1 8 8 L 12SUB_DIGIT_ONE_1
12SUB_DIGIT_ONE_1 0 8 L 12SUB_DIGIT_ONE_2
12SUB_DIGIT_ONE_1 1 7 R 12FIND_B_END

12SUB_DIGIT_ONE_2 1 0 R 12FIND_B_END
12SUB_DIGIT_ONE_2 2 2 R 12OVERFLOW
12SUB_DIGIT_ONE_2 0 1 L 12SUB_DIGIT_ONE_2

# Unsigned overflow
12OVERFLOW 0 1 R 12OVERFLOW
12OVERFLOW 1 1 R 12OVERFLOW
12OVERFLOW 7 7 R 12FIND_B_END
12OVERFLOW 8 8 R 12FIND_B_END
12OVERFLOW 3 3 R 12FIND_B_END

# Return to the middle of the tape
12RESTORE 7 0 R 12RESTORE
12RESTORE 8 1 R 12RESTORE
12RESTORE 4 4 L 12RESTORE_1

12RESTORE_1 0 0 L 12RESTORE_1
12RESTORE_1 1 1 L 12RESTORE_1
12RESTORE_1 2 2 L 12RESTORE_1
12RESTORE_1 3 3 L 12RESTORE_1
12RESTORE_1 7 0 L 12RESTORE_1
12RESTORE_1 8 1 L 12RESTORE_1
12RESTORE_1 5 5 S 12END


#
#asm STORE S1 A
#


12END 5 5 S 13START

13START 5 5 L 13TO_S1_END
# To end of S1
13TO_S1_END 6 6 L 13SET_TO_7

# Set all the values to 7 untill the start of S1
13SET_TO_7 0 7 L 13SET_TO_7
13SET_TO_7 1 7 L 13SET_TO_7
13SET_TO_7 6 9 R 13TO_MIDDLE_R
# Find the middle
13TO_MIDDLE_R 1 1 R 13TO_MIDDLE_R
13TO_MIDDLE_R 0 0 R 13TO_MIDDLE_R
13TO_MIDDLE_R 7 7 R 13TO_MIDDLE_R
13TO_MIDDLE_R 2 2 R 13TO_MIDDLE_R
13TO_MIDDLE_R 6 6 R 13TO_MIDDLE_R
13TO_MIDDLE_R 5 5 R 13COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
13COPY_VALUE 0 7 L 13MOVE_ZERO
13COPY_VALUE 1 8 L 13MOVE_ONE
13COPY_VALUE 2 2 R 13COPY_VALUE
13COPY_VALUE 7 7 R 13COPY_VALUE
13COPY_VALUE 8 8 R 13COPY_VALUE
13COPY_VALUE 3 3 L 13RESTORE_VALUE

# Move a 0 to number 9
13MOVE_ZERO 0 0 L 13MOVE_ZERO
13MOVE_ZERO 1 1 L 13MOVE_ZERO
13MOVE_ZERO 2 2 L 13MOVE_ZERO
13MOVE_ZERO 3 3 L 13MOVE_ZERO
13MOVE_ZERO 4 4 L 13MOVE_ZERO
13MOVE_ZERO 9 9 R 13MOVE_ZERO_2
13MOVE_ZERO 5 5 L 13MOVE_ZERO
13MOVE_ZERO 6 6 L 13MOVE_ZERO
13MOVE_ZERO 7 7 L 13MOVE_ZERO
13MOVE_ZERO 8 8 L 13MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
13MOVE_ZERO_2 0 0 R 13MOVE_ZERO_2
13MOVE_ZERO_2 1 1 R 13MOVE_ZERO_2
13MOVE_ZERO_2 7 0 S 13TO_MIDDLE_R
# Move a 1 to number 9
13MOVE_ONE 0 0 L 13MOVE_ONE
13MOVE_ONE 1 1 L 13MOVE_ONE
13MOVE_ONE 2 2 L 13MOVE_ONE
13MOVE_ONE 3 3 L 13MOVE_ONE
13MOVE_ONE 4 4 L 13MOVE_ONE
13MOVE_ONE 9 9 R 13MOVE_ONE_2
13MOVE_ONE 5 5 L 13MOVE_ONE
13MOVE_ONE 6 6 L 13MOVE_ONE
13MOVE_ONE 7 7 L 13MOVE_ONE
13MOVE_ONE 8 8 L 13MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
13MOVE_ONE_2 0 0 R 13MOVE_ONE_2
13MOVE_ONE_2 1 1 R 13MOVE_ONE_2
13MOVE_ONE_2 7 1 S 13TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
13RESTORE_VALUE 7 0 L 13RESTORE_VALUE
13RESTORE_VALUE 8 1 L 13RESTORE_VALUE
13RESTORE_VALUE 2 2 L 13RESET_STORAGE_MARKER
# Reset 9 to 6
13RESET_STORAGE_MARKER 0 0 L 13RESET_STORAGE_MARKER
13RESET_STORAGE_MARKER 1 1 L 13RESET_STORAGE_MARKER
13RESET_STORAGE_MARKER 5 5 L 13RESET_STORAGE_MARKER
13RESET_STORAGE_MARKER 6 6 L 13RESET_STORAGE_MARKER
13RESET_STORAGE_MARKER 9 6 R 13RETURN_TO_MIDDLE
# Return to middle
13RETURN_TO_MIDDLE 0 0 R 13RETURN_TO_MIDDLE
13RETURN_TO_MIDDLE 1 1 R 13RETURN_TO_MIDDLE
13RETURN_TO_MIDDLE 6 6 R 13RETURN_TO_MIDDLE
13RETURN_TO_MIDDLE 5 5 S 13END


#
#asm L3:
#

LABEL_L3 5 5 S 13END

#
#asm LOAD S5 A
#


13END 5 5 S 14START

# Start of loading
14START 5 5 R 14TO_A_END_R
# To end of number A
14TO_A_END_R 0 0 R 14TO_A_END_R
14TO_A_END_R 1 1 R 14TO_A_END_R
14TO_A_END_R 2 2 R 14TO_A_END_R
14TO_A_END_R 3 3 L 14SET_TO_7

# Move to the start of number A, and set all values to 7
14SET_TO_7 0 7 L 14SET_TO_7
14SET_TO_7 1 7 L 14SET_TO_7
14SET_TO_7 2 2 L 14TO_MIDDLE_L
# Find the middle
14TO_MIDDLE_L 1 1 L 14TO_MIDDLE_L
14TO_MIDDLE_L 0 0 L 14TO_MIDDLE_L
14TO_MIDDLE_L 7 7 L 14TO_MIDDLE_L
14TO_MIDDLE_L 2 2 L 14TO_MIDDLE_L
14TO_MIDDLE_L 3 3 L 14TO_MIDDLE_L
14TO_MIDDLE_L 4 4 L 14TO_MIDDLE_L
14TO_MIDDLE_L 5 5 L 14TO_S1_END
# To end of S1
14TO_S1_END 6 6 L 14TO_S2_END
# To end of S2
14TO_S2_END 0 0 L 14TO_S2_END
14TO_S2_END 1 1 L 14TO_S2_END
14TO_S2_END 6 6 L 14TO_S3_END
# To end of S3
14TO_S3_END 0 0 L 14TO_S3_END
14TO_S3_END 1 1 L 14TO_S3_END
14TO_S3_END 6 6 L 14TO_S4_END
# To end of S4
14TO_S4_END 0 0 L 14TO_S4_END
14TO_S4_END 1 1 L 14TO_S4_END
14TO_S4_END 6 6 L 14TO_S5_END
# To end of S5
14TO_S5_END 0 0 L 14TO_S5_END
14TO_S5_END 1 1 L 14TO_S5_END
14TO_S5_END 6 6 L 14COPY_VALUE
# Move Left until start of S5
# Copy the first non-7/8 value
14COPY_VALUE 0 7 R 14MOVE_ZERO
14COPY_VALUE 1 8 R 14MOVE_ONE
14COPY_VALUE 7 7 L 14COPY_VALUE
14COPY_VALUE 8 8 L 14COPY_VALUE
14COPY_VALUE 6 6 R 14RESTORE_VALUE

# Move a 0 to number A
14MOVE_ZERO 0 0 R 14MOVE_ZERO
14MOVE_ZERO 1 1 R 14MOVE_ZERO
14MOVE_ZERO 2 2 R 14MOVE_ZERO
14MOVE_ZERO 3 3 L 14MOVE_ZERO_2
14MOVE_ZERO 4 4 R 14MOVE_ZERO
14MOVE_ZERO 5 5 R 14MOVE_ZERO
14MOVE_ZERO 6 6 R 14MOVE_ZERO
14MOVE_ZERO 7 7 R 14MOVE_ZERO
14MOVE_ZERO 8 8 R 14MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
14MOVE_ZERO_2 0 0 L 14MOVE_ZERO_2
14MOVE_ZERO_2 1 1 L 14MOVE_ZERO_2
14MOVE_ZERO_2 7 0 S 14TO_MIDDLE_L
# Move a 1 to number A
14MOVE_ONE 0 0 R 14MOVE_ONE
14MOVE_ONE 1 1 R 14MOVE_ONE
14MOVE_ONE 2 2 R 14MOVE_ONE
14MOVE_ONE 3 3 L 14MOVE_ONE_2
14MOVE_ONE 4 4 R 14MOVE_ONE
14MOVE_ONE 5 5 R 14MOVE_ONE
14MOVE_ONE 6 6 R 14MOVE_ONE
14MOVE_ONE 7 7 R 14MOVE_ONE
14MOVE_ONE 8 8 R 14MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
14MOVE_ONE_2 0 0 L 14MOVE_ONE_2
14MOVE_ONE_2 1 1 L 14MOVE_ONE_2
14MOVE_ONE_2 7 1 S 14TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
14RESTORE_VALUE 7 0 R 14RESTORE_VALUE
14RESTORE_VALUE 8 1 R 14RESTORE_VALUE
14RESTORE_VALUE 6 6 S 14TO_START
# Go back to the start
14TO_START 0 0 R 14TO_START
14TO_START 1 1 R 14TO_START
14TO_START 6 6 R 14TO_START
14TO_START 5 5 S 14END



#
#asm LOAD S6 B
#


14END 5 5 S 15START

# Start of loading
15START 5 5 R 15TO_B_END_R
# To end of number B
15TO_B_END_R 0 0 R 15TO_B_END_R
15TO_B_END_R 1 1 R 15TO_B_END_R
15TO_B_END_R 2 2 R 15TO_B_END_R
15TO_B_END_R 3 3 R 15TO_B_END_R
15TO_B_END_R 4 4 L 15SET_TO_7

# Move to the start of number B, and set all values to 7
15SET_TO_7 0 7 L 15SET_TO_7
15SET_TO_7 1 7 L 15SET_TO_7
15SET_TO_7 3 3 L 15TO_MIDDLE_L
# Find the middle
15TO_MIDDLE_L 1 1 L 15TO_MIDDLE_L
15TO_MIDDLE_L 0 0 L 15TO_MIDDLE_L
15TO_MIDDLE_L 7 7 L 15TO_MIDDLE_L
15TO_MIDDLE_L 2 2 L 15TO_MIDDLE_L
15TO_MIDDLE_L 3 3 L 15TO_MIDDLE_L
15TO_MIDDLE_L 4 4 L 15TO_MIDDLE_L
15TO_MIDDLE_L 5 5 L 15TO_S1_END
# To end of S1
15TO_S1_END 6 6 L 15TO_S2_END
# To end of S2
15TO_S2_END 0 0 L 15TO_S2_END
15TO_S2_END 1 1 L 15TO_S2_END
15TO_S2_END 6 6 L 15TO_S3_END
# To end of S3
15TO_S3_END 0 0 L 15TO_S3_END
15TO_S3_END 1 1 L 15TO_S3_END
15TO_S3_END 6 6 L 15TO_S4_END
# To end of S4
15TO_S4_END 0 0 L 15TO_S4_END
15TO_S4_END 1 1 L 15TO_S4_END
15TO_S4_END 6 6 L 15TO_S5_END
# To end of S5
15TO_S5_END 0 0 L 15TO_S5_END
15TO_S5_END 1 1 L 15TO_S5_END
15TO_S5_END 6 6 L 15TO_S6_END
# To end of S6
15TO_S6_END 0 0 L 15TO_S6_END
15TO_S6_END 1 1 L 15TO_S6_END
15TO_S6_END 6 6 L 15COPY_VALUE
# Move Left until start of S6
# Copy the first non-7/8 value
15COPY_VALUE 0 7 R 15MOVE_ZERO
15COPY_VALUE 1 8 R 15MOVE_ONE
15COPY_VALUE 7 7 L 15COPY_VALUE
15COPY_VALUE 8 8 L 15COPY_VALUE
15COPY_VALUE 6 6 R 15RESTORE_VALUE

# Move a 0 to number B
15MOVE_ZERO 0 0 R 15MOVE_ZERO
15MOVE_ZERO 1 1 R 15MOVE_ZERO
15MOVE_ZERO 2 2 R 15MOVE_ZERO
15MOVE_ZERO 3 3 R 15MOVE_ZERO
15MOVE_ZERO 4 4 L 15MOVE_ZERO_2
15MOVE_ZERO 5 5 R 15MOVE_ZERO
15MOVE_ZERO 6 6 R 15MOVE_ZERO
15MOVE_ZERO 7 7 R 15MOVE_ZERO
15MOVE_ZERO 8 8 R 15MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
15MOVE_ZERO_2 0 0 L 15MOVE_ZERO_2
15MOVE_ZERO_2 1 1 L 15MOVE_ZERO_2
15MOVE_ZERO_2 7 0 S 15TO_MIDDLE_L
# Move a 1 to number B
15MOVE_ONE 0 0 R 15MOVE_ONE
15MOVE_ONE 1 1 R 15MOVE_ONE
15MOVE_ONE 2 2 R 15MOVE_ONE
15MOVE_ONE 3 3 R 15MOVE_ONE
15MOVE_ONE 4 4 L 15MOVE_ONE_2
15MOVE_ONE 5 5 R 15MOVE_ONE
15MOVE_ONE 6 6 R 15MOVE_ONE
15MOVE_ONE 7 7 R 15MOVE_ONE
15MOVE_ONE 8 8 R 15MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
15MOVE_ONE_2 0 0 L 15MOVE_ONE_2
15MOVE_ONE_2 1 1 L 15MOVE_ONE_2
15MOVE_ONE_2 7 1 S 15TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
15RESTORE_VALUE 7 0 R 15RESTORE_VALUE
15RESTORE_VALUE 8 1 R 15RESTORE_VALUE
15RESTORE_VALUE 6 6 S 15TO_START
# Go back to the start
15TO_START 0 0 R 15TO_START
15TO_START 1 1 R 15TO_START
15TO_START 6 6 R 15TO_START
15TO_START 5 5 S 15END



#
#asm SUB_SAFE
#


15END 5 5 S 16START

# Start of the subtraction program
16START 5 5 R 16FIND_B_END

# Find the end of the second number
16FIND_B_END 0 0 R 16FIND_B_END
16FIND_B_END 1 1 R 16FIND_B_END
16FIND_B_END 2 2 R 16FIND_B_END
16FIND_B_END 3 3 R 16FIND_B_END
16FIND_B_END 7 7 R 16FIND_B_END
16FIND_B_END 8 8 R 16FIND_B_END
16FIND_B_END 4 4 L 16SUB_DIGIT

# Find first non-subtracted digit
16SUB_DIGIT 7 7 L 16SUB_DIGIT
16SUB_DIGIT 8 8 L 16SUB_DIGIT
16SUB_DIGIT 0 7 L 16SUB_DIGIT_ZERO
16SUB_DIGIT 1 7 L 16SUB_DIGIT_ONE
16SUB_DIGIT 3 3 R 16RESTORE_1

# Subtract a zero
16SUB_DIGIT_ZERO 0 0 L 16SUB_DIGIT_ZERO
16SUB_DIGIT_ZERO 1 1 L 16SUB_DIGIT_ZERO
16SUB_DIGIT_ZERO 3 3 L 16SUB_DIGIT_ZERO_1

16SUB_DIGIT_ZERO_1 7 7 L 16SUB_DIGIT_ZERO_1
16SUB_DIGIT_ZERO_1 8 8 L 16SUB_DIGIT_ZERO_1
16SUB_DIGIT_ZERO_1 0 7 L 16FIND_B_END
16SUB_DIGIT_ZERO_1 1 8 R 16FIND_B_END

# Subtract a one
16SUB_DIGIT_ONE 0 0 L 16SUB_DIGIT_ONE
16SUB_DIGIT_ONE 1 1 L 16SUB_DIGIT_ONE
16SUB_DIGIT_ONE 3 3 L 16SUB_DIGIT_ONE_1

16SUB_DIGIT_ONE_1 7 7 L 16SUB_DIGIT_ONE_1
16SUB_DIGIT_ONE_1 8 8 L 16SUB_DIGIT_ONE_1
16SUB_DIGIT_ONE_1 0 8 L 16SUB_DIGIT_ONE_2
16SUB_DIGIT_ONE_1 1 7 R 16FIND_B_END

16SUB_DIGIT_ONE_2 1 0 R 16FIND_B_END
16SUB_DIGIT_ONE_2 2 2 R 16RESTORE
16SUB_DIGIT_ONE_2 0 1 L 16SUB_DIGIT_ONE_2

# Return to the middle of the tape
16RESTORE 0 0 R 16RESTORE
16RESTORE 1 0 R 16RESTORE
16RESTORE 7 0 R 16RESTORE
16RESTORE 8 0 R 16RESTORE
16RESTORE 3 3 R 16RESTORE_1

16RESTORE_1 0 0 R 16RESTORE_1
16RESTORE_1 1 1 R 16RESTORE_1
16RESTORE_1 7 7 R 16RESTORE_1
16RESTORE_1 8 8 R 16RESTORE_1
16RESTORE_1 4 4 L 16RESTORE_2

16RESTORE_2 0 0 L 16RESTORE_2
16RESTORE_2 1 1 L 16RESTORE_2
16RESTORE_2 2 2 L 16RESTORE_2
16RESTORE_2 3 3 L 16RESTORE_2
16RESTORE_2 7 0 L 16RESTORE_2
16RESTORE_2 8 1 L 16RESTORE_2
16RESTORE_2 5 5 S 16END


#
#asm ISZERO
#


16END 5 5 S 17START

# Start of the ISZERO program
17START 5 5 R 17START
17START 2 2 R 17CHECK_A

# Check for ones in A
17CHECK_A 0 0 R 17CHECK_A
17CHECK_A 1 0 R 17FOUND_ONE
17CHECK_A 3 3 L 17CHECK_A_1

# no ones found in A, set last digit of A to 1
17CHECK_A_1 0 1 L 17RETURN

# Found a 1 in A
17FOUND_ONE 0 0 R 17FOUND_ONE
17FOUND_ONE 1 0 R 17FOUND_ONE
17FOUND_ONE 3 3 L 17FOUND_ONE_1

# Found a 1 in A, return
17FOUND_ONE_1 0 0 L 17RETURN

# Return to middle
17RETURN 0 0 L 17RETURN
17RETURN 1 1 L 17RETURN
17RETURN 2 2 L 17RETURN
17RETURN 5 5 S 17END


#
#asm NOT
#


17END 5 5 S 18START

# Start of NOT program
18START 5 5 R 18FIND_A_END

# Find end of A
18FIND_A_END 0 0 R 18FIND_A_END
18FIND_A_END 1 1 R 18FIND_A_END
18FIND_A_END 2 2 R 18FIND_A_END
18FIND_A_END 3 3 L 18FLIP_DIGIT

# Flip the last digit of A
18FLIP_DIGIT 0 1 L 18RETURN
18FLIP_DIGIT 1 0 L 18RETURN

# Return to the middle of the tape
18RETURN 0 0 L 18RETURN
18RETURN 1 1 L 18RETURN
18RETURN 2 2 L 18RETURN
18RETURN 5 5 S 18END



#
#asm STORE S7 A
#


18END 5 5 S 19START

19START 5 5 L 19TO_S1_END
# To end of S1
19TO_S1_END 6 6 L 19TO_S2_END
# To end of S2
19TO_S2_END 0 0 L 19TO_S2_END
19TO_S2_END 1 1 L 19TO_S2_END
19TO_S2_END 6 6 L 19TO_S3_END
# To end of S3
19TO_S3_END 0 0 L 19TO_S3_END
19TO_S3_END 1 1 L 19TO_S3_END
19TO_S3_END 6 6 L 19TO_S4_END
# To end of S4
19TO_S4_END 0 0 L 19TO_S4_END
19TO_S4_END 1 1 L 19TO_S4_END
19TO_S4_END 6 6 L 19TO_S5_END
# To end of S5
19TO_S5_END 0 0 L 19TO_S5_END
19TO_S5_END 1 1 L 19TO_S5_END
19TO_S5_END 6 6 L 19TO_S6_END
# To end of S6
19TO_S6_END 0 0 L 19TO_S6_END
19TO_S6_END 1 1 L 19TO_S6_END
19TO_S6_END 6 6 L 19TO_S7_END
# To end of S7
19TO_S7_END 0 0 L 19TO_S7_END
19TO_S7_END 1 1 L 19TO_S7_END
19TO_S7_END 6 6 L 19SET_TO_7

# Set all the values to 7 untill the start of S1
19SET_TO_7 0 7 L 19SET_TO_7
19SET_TO_7 1 7 L 19SET_TO_7
19SET_TO_7 6 9 R 19TO_MIDDLE_R
# Find the middle
19TO_MIDDLE_R 1 1 R 19TO_MIDDLE_R
19TO_MIDDLE_R 0 0 R 19TO_MIDDLE_R
19TO_MIDDLE_R 7 7 R 19TO_MIDDLE_R
19TO_MIDDLE_R 2 2 R 19TO_MIDDLE_R
19TO_MIDDLE_R 6 6 R 19TO_MIDDLE_R
19TO_MIDDLE_R 5 5 R 19COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
19COPY_VALUE 0 7 L 19MOVE_ZERO
19COPY_VALUE 1 8 L 19MOVE_ONE
19COPY_VALUE 2 2 R 19COPY_VALUE
19COPY_VALUE 7 7 R 19COPY_VALUE
19COPY_VALUE 8 8 R 19COPY_VALUE
19COPY_VALUE 3 3 L 19RESTORE_VALUE

# Move a 0 to number 9
19MOVE_ZERO 0 0 L 19MOVE_ZERO
19MOVE_ZERO 1 1 L 19MOVE_ZERO
19MOVE_ZERO 2 2 L 19MOVE_ZERO
19MOVE_ZERO 3 3 L 19MOVE_ZERO
19MOVE_ZERO 4 4 L 19MOVE_ZERO
19MOVE_ZERO 9 9 R 19MOVE_ZERO_2
19MOVE_ZERO 5 5 L 19MOVE_ZERO
19MOVE_ZERO 6 6 L 19MOVE_ZERO
19MOVE_ZERO 7 7 L 19MOVE_ZERO
19MOVE_ZERO 8 8 L 19MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
19MOVE_ZERO_2 0 0 R 19MOVE_ZERO_2
19MOVE_ZERO_2 1 1 R 19MOVE_ZERO_2
19MOVE_ZERO_2 7 0 S 19TO_MIDDLE_R
# Move a 1 to number 9
19MOVE_ONE 0 0 L 19MOVE_ONE
19MOVE_ONE 1 1 L 19MOVE_ONE
19MOVE_ONE 2 2 L 19MOVE_ONE
19MOVE_ONE 3 3 L 19MOVE_ONE
19MOVE_ONE 4 4 L 19MOVE_ONE
19MOVE_ONE 9 9 R 19MOVE_ONE_2
19MOVE_ONE 5 5 L 19MOVE_ONE
19MOVE_ONE 6 6 L 19MOVE_ONE
19MOVE_ONE 7 7 L 19MOVE_ONE
19MOVE_ONE 8 8 L 19MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
19MOVE_ONE_2 0 0 R 19MOVE_ONE_2
19MOVE_ONE_2 1 1 R 19MOVE_ONE_2
19MOVE_ONE_2 7 1 S 19TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
19RESTORE_VALUE 7 0 L 19RESTORE_VALUE
19RESTORE_VALUE 8 1 L 19RESTORE_VALUE
19RESTORE_VALUE 2 2 L 19RESET_STORAGE_MARKER
# Reset 9 to 6
19RESET_STORAGE_MARKER 0 0 L 19RESET_STORAGE_MARKER
19RESET_STORAGE_MARKER 1 1 L 19RESET_STORAGE_MARKER
19RESET_STORAGE_MARKER 5 5 L 19RESET_STORAGE_MARKER
19RESET_STORAGE_MARKER 6 6 L 19RESET_STORAGE_MARKER
19RESET_STORAGE_MARKER 9 6 R 19RETURN_TO_MIDDLE
# Return to middle
19RETURN_TO_MIDDLE 0 0 R 19RETURN_TO_MIDDLE
19RETURN_TO_MIDDLE 1 1 R 19RETURN_TO_MIDDLE
19RETURN_TO_MIDDLE 6 6 R 19RETURN_TO_MIDDLE
19RETURN_TO_MIDDLE 5 5 S 19END


#
#asm LOAD S7 A
#


19END 5 5 S 20START

# Start of loading
20START 5 5 R 20TO_A_END_R
# To end of number A
20TO_A_END_R 0 0 R 20TO_A_END_R
20TO_A_END_R 1 1 R 20TO_A_END_R
20TO_A_END_R 2 2 R 20TO_A_END_R
20TO_A_END_R 3 3 L 20SET_TO_7

# Move to the start of number A, and set all values to 7
20SET_TO_7 0 7 L 20SET_TO_7
20SET_TO_7 1 7 L 20SET_TO_7
20SET_TO_7 2 2 L 20TO_MIDDLE_L
# Find the middle
20TO_MIDDLE_L 1 1 L 20TO_MIDDLE_L
20TO_MIDDLE_L 0 0 L 20TO_MIDDLE_L
20TO_MIDDLE_L 7 7 L 20TO_MIDDLE_L
20TO_MIDDLE_L 2 2 L 20TO_MIDDLE_L
20TO_MIDDLE_L 3 3 L 20TO_MIDDLE_L
20TO_MIDDLE_L 4 4 L 20TO_MIDDLE_L
20TO_MIDDLE_L 5 5 L 20TO_S1_END
# To end of S1
20TO_S1_END 6 6 L 20TO_S2_END
# To end of S2
20TO_S2_END 0 0 L 20TO_S2_END
20TO_S2_END 1 1 L 20TO_S2_END
20TO_S2_END 6 6 L 20TO_S3_END
# To end of S3
20TO_S3_END 0 0 L 20TO_S3_END
20TO_S3_END 1 1 L 20TO_S3_END
20TO_S3_END 6 6 L 20TO_S4_END
# To end of S4
20TO_S4_END 0 0 L 20TO_S4_END
20TO_S4_END 1 1 L 20TO_S4_END
20TO_S4_END 6 6 L 20TO_S5_END
# To end of S5
20TO_S5_END 0 0 L 20TO_S5_END
20TO_S5_END 1 1 L 20TO_S5_END
20TO_S5_END 6 6 L 20TO_S6_END
# To end of S6
20TO_S6_END 0 0 L 20TO_S6_END
20TO_S6_END 1 1 L 20TO_S6_END
20TO_S6_END 6 6 L 20TO_S7_END
# To end of S7
20TO_S7_END 0 0 L 20TO_S7_END
20TO_S7_END 1 1 L 20TO_S7_END
20TO_S7_END 6 6 L 20COPY_VALUE
# Move Left until start of S7
# Copy the first non-7/8 value
20COPY_VALUE 0 7 R 20MOVE_ZERO
20COPY_VALUE 1 8 R 20MOVE_ONE
20COPY_VALUE 7 7 L 20COPY_VALUE
20COPY_VALUE 8 8 L 20COPY_VALUE
20COPY_VALUE 6 6 R 20RESTORE_VALUE

# Move a 0 to number A
20MOVE_ZERO 0 0 R 20MOVE_ZERO
20MOVE_ZERO 1 1 R 20MOVE_ZERO
20MOVE_ZERO 2 2 R 20MOVE_ZERO
20MOVE_ZERO 3 3 L 20MOVE_ZERO_2
20MOVE_ZERO 4 4 R 20MOVE_ZERO
20MOVE_ZERO 5 5 R 20MOVE_ZERO
20MOVE_ZERO 6 6 R 20MOVE_ZERO
20MOVE_ZERO 7 7 R 20MOVE_ZERO
20MOVE_ZERO 8 8 R 20MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
20MOVE_ZERO_2 0 0 L 20MOVE_ZERO_2
20MOVE_ZERO_2 1 1 L 20MOVE_ZERO_2
20MOVE_ZERO_2 7 0 S 20TO_MIDDLE_L
# Move a 1 to number A
20MOVE_ONE 0 0 R 20MOVE_ONE
20MOVE_ONE 1 1 R 20MOVE_ONE
20MOVE_ONE 2 2 R 20MOVE_ONE
20MOVE_ONE 3 3 L 20MOVE_ONE_2
20MOVE_ONE 4 4 R 20MOVE_ONE
20MOVE_ONE 5 5 R 20MOVE_ONE
20MOVE_ONE 6 6 R 20MOVE_ONE
20MOVE_ONE 7 7 R 20MOVE_ONE
20MOVE_ONE 8 8 R 20MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
20MOVE_ONE_2 0 0 L 20MOVE_ONE_2
20MOVE_ONE_2 1 1 L 20MOVE_ONE_2
20MOVE_ONE_2 7 1 S 20TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
20RESTORE_VALUE 7 0 R 20RESTORE_VALUE
20RESTORE_VALUE 8 1 R 20RESTORE_VALUE
20RESTORE_VALUE 6 6 S 20TO_START
# Go back to the start
20TO_START 0 0 R 20TO_START
20TO_START 1 1 R 20TO_START
20TO_START 6 6 R 20TO_START
20TO_START 5 5 S 20END



#
#asm ISZERO
#


20END 5 5 S 21START

# Start of the ISZERO program
21START 5 5 R 21START
21START 2 2 R 21CHECK_A

# Check for ones in A
21CHECK_A 0 0 R 21CHECK_A
21CHECK_A 1 0 R 21FOUND_ONE
21CHECK_A 3 3 L 21CHECK_A_1

# no ones found in A, set last digit of A to 1
21CHECK_A_1 0 1 L 21RETURN

# Found a 1 in A
21FOUND_ONE 0 0 R 21FOUND_ONE
21FOUND_ONE 1 0 R 21FOUND_ONE
21FOUND_ONE 3 3 L 21FOUND_ONE_1

# Found a 1 in A, return
21FOUND_ONE_1 0 0 L 21RETURN

# Return to middle
21RETURN 0 0 L 21RETURN
21RETURN 1 1 L 21RETURN
21RETURN 2 2 L 21RETURN
21RETURN 5 5 S 21END


#
#asm JNZ L4
#


21END 5 5 S 22START
# Start of the JUMP if NOT ZERO program
22START 5 5 R 22START
22START 2 2 R 22A_END

# Go to end of A
22A_END 0 0 R 22A_END
22A_END 1 1 R 22A_END
22A_END 3 3 L 22CHECK_A

# no ones found in A, set last digit of A to 1
22CHECK_A 0 1 S 22RETURN_ZERO
22CHECK_A 1 1 S 22RETURN_ONE

# Return to 5
22RETURN_ZERO 0 0 L 22RETURN_ZERO
22RETURN_ZERO 1 1 L 22RETURN_ZERO
22RETURN_ZERO 2 2 L 22RETURN_ZERO
22RETURN_ZERO 5 5 S 22END

22RETURN_ONE 0 0 L 22RETURN_ONE
22RETURN_ONE 1 1 L 22RETURN_ONE
22RETURN_ONE 2 2 L 22RETURN_ONE
22RETURN_ONE 5 5 S LABEL_L4


#
#asm LOAD S5 A
#


22END 5 5 S 23START

# Start of loading
23START 5 5 R 23TO_A_END_R
# To end of number A
23TO_A_END_R 0 0 R 23TO_A_END_R
23TO_A_END_R 1 1 R 23TO_A_END_R
23TO_A_END_R 2 2 R 23TO_A_END_R
23TO_A_END_R 3 3 L 23SET_TO_7

# Move to the start of number A, and set all values to 7
23SET_TO_7 0 7 L 23SET_TO_7
23SET_TO_7 1 7 L 23SET_TO_7
23SET_TO_7 2 2 L 23TO_MIDDLE_L
# Find the middle
23TO_MIDDLE_L 1 1 L 23TO_MIDDLE_L
23TO_MIDDLE_L 0 0 L 23TO_MIDDLE_L
23TO_MIDDLE_L 7 7 L 23TO_MIDDLE_L
23TO_MIDDLE_L 2 2 L 23TO_MIDDLE_L
23TO_MIDDLE_L 3 3 L 23TO_MIDDLE_L
23TO_MIDDLE_L 4 4 L 23TO_MIDDLE_L
23TO_MIDDLE_L 5 5 L 23TO_S1_END
# To end of S1
23TO_S1_END 6 6 L 23TO_S2_END
# To end of S2
23TO_S2_END 0 0 L 23TO_S2_END
23TO_S2_END 1 1 L 23TO_S2_END
23TO_S2_END 6 6 L 23TO_S3_END
# To end of S3
23TO_S3_END 0 0 L 23TO_S3_END
23TO_S3_END 1 1 L 23TO_S3_END
23TO_S3_END 6 6 L 23TO_S4_END
# To end of S4
23TO_S4_END 0 0 L 23TO_S4_END
23TO_S4_END 1 1 L 23TO_S4_END
23TO_S4_END 6 6 L 23TO_S5_END
# To end of S5
23TO_S5_END 0 0 L 23TO_S5_END
23TO_S5_END 1 1 L 23TO_S5_END
23TO_S5_END 6 6 L 23COPY_VALUE
# Move Left until start of S5
# Copy the first non-7/8 value
23COPY_VALUE 0 7 R 23MOVE_ZERO
23COPY_VALUE 1 8 R 23MOVE_ONE
23COPY_VALUE 7 7 L 23COPY_VALUE
23COPY_VALUE 8 8 L 23COPY_VALUE
23COPY_VALUE 6 6 R 23RESTORE_VALUE

# Move a 0 to number A
23MOVE_ZERO 0 0 R 23MOVE_ZERO
23MOVE_ZERO 1 1 R 23MOVE_ZERO
23MOVE_ZERO 2 2 R 23MOVE_ZERO
23MOVE_ZERO 3 3 L 23MOVE_ZERO_2
23MOVE_ZERO 4 4 R 23MOVE_ZERO
23MOVE_ZERO 5 5 R 23MOVE_ZERO
23MOVE_ZERO 6 6 R 23MOVE_ZERO
23MOVE_ZERO 7 7 R 23MOVE_ZERO
23MOVE_ZERO 8 8 R 23MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
23MOVE_ZERO_2 0 0 L 23MOVE_ZERO_2
23MOVE_ZERO_2 1 1 L 23MOVE_ZERO_2
23MOVE_ZERO_2 7 0 S 23TO_MIDDLE_L
# Move a 1 to number A
23MOVE_ONE 0 0 R 23MOVE_ONE
23MOVE_ONE 1 1 R 23MOVE_ONE
23MOVE_ONE 2 2 R 23MOVE_ONE
23MOVE_ONE 3 3 L 23MOVE_ONE_2
23MOVE_ONE 4 4 R 23MOVE_ONE
23MOVE_ONE 5 5 R 23MOVE_ONE
23MOVE_ONE 6 6 R 23MOVE_ONE
23MOVE_ONE 7 7 R 23MOVE_ONE
23MOVE_ONE 8 8 R 23MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
23MOVE_ONE_2 0 0 L 23MOVE_ONE_2
23MOVE_ONE_2 1 1 L 23MOVE_ONE_2
23MOVE_ONE_2 7 1 S 23TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
23RESTORE_VALUE 7 0 R 23RESTORE_VALUE
23RESTORE_VALUE 8 1 R 23RESTORE_VALUE
23RESTORE_VALUE 6 6 S 23TO_START
# Go back to the start
23TO_START 0 0 R 23TO_START
23TO_START 1 1 R 23TO_START
23TO_START 6 6 R 23TO_START
23TO_START 5 5 S 23END



#
#asm LOAD S8 B
#


23END 5 5 S 24START

# Start of loading
24START 5 5 R 24TO_B_END_R
# To end of number B
24TO_B_END_R 0 0 R 24TO_B_END_R
24TO_B_END_R 1 1 R 24TO_B_END_R
24TO_B_END_R 2 2 R 24TO_B_END_R
24TO_B_END_R 3 3 R 24TO_B_END_R
24TO_B_END_R 4 4 L 24SET_TO_7

# Move to the start of number B, and set all values to 7
24SET_TO_7 0 7 L 24SET_TO_7
24SET_TO_7 1 7 L 24SET_TO_7
24SET_TO_7 3 3 L 24TO_MIDDLE_L
# Find the middle
24TO_MIDDLE_L 1 1 L 24TO_MIDDLE_L
24TO_MIDDLE_L 0 0 L 24TO_MIDDLE_L
24TO_MIDDLE_L 7 7 L 24TO_MIDDLE_L
24TO_MIDDLE_L 2 2 L 24TO_MIDDLE_L
24TO_MIDDLE_L 3 3 L 24TO_MIDDLE_L
24TO_MIDDLE_L 4 4 L 24TO_MIDDLE_L
24TO_MIDDLE_L 5 5 L 24TO_S1_END
# To end of S1
24TO_S1_END 6 6 L 24TO_S2_END
# To end of S2
24TO_S2_END 0 0 L 24TO_S2_END
24TO_S2_END 1 1 L 24TO_S2_END
24TO_S2_END 6 6 L 24TO_S3_END
# To end of S3
24TO_S3_END 0 0 L 24TO_S3_END
24TO_S3_END 1 1 L 24TO_S3_END
24TO_S3_END 6 6 L 24TO_S4_END
# To end of S4
24TO_S4_END 0 0 L 24TO_S4_END
24TO_S4_END 1 1 L 24TO_S4_END
24TO_S4_END 6 6 L 24TO_S5_END
# To end of S5
24TO_S5_END 0 0 L 24TO_S5_END
24TO_S5_END 1 1 L 24TO_S5_END
24TO_S5_END 6 6 L 24TO_S6_END
# To end of S6
24TO_S6_END 0 0 L 24TO_S6_END
24TO_S6_END 1 1 L 24TO_S6_END
24TO_S6_END 6 6 L 24TO_S7_END
# To end of S7
24TO_S7_END 0 0 L 24TO_S7_END
24TO_S7_END 1 1 L 24TO_S7_END
24TO_S7_END 6 6 L 24TO_S8_END
# To end of S8
24TO_S8_END 0 0 L 24TO_S8_END
24TO_S8_END 1 1 L 24TO_S8_END
24TO_S8_END 6 6 L 24COPY_VALUE
# Move Left until start of S8
# Copy the first non-7/8 value
24COPY_VALUE 0 7 R 24MOVE_ZERO
24COPY_VALUE 1 8 R 24MOVE_ONE
24COPY_VALUE 7 7 L 24COPY_VALUE
24COPY_VALUE 8 8 L 24COPY_VALUE
24COPY_VALUE 6 6 R 24RESTORE_VALUE

# Move a 0 to number B
24MOVE_ZERO 0 0 R 24MOVE_ZERO
24MOVE_ZERO 1 1 R 24MOVE_ZERO
24MOVE_ZERO 2 2 R 24MOVE_ZERO
24MOVE_ZERO 3 3 R 24MOVE_ZERO
24MOVE_ZERO 4 4 L 24MOVE_ZERO_2
24MOVE_ZERO 5 5 R 24MOVE_ZERO
24MOVE_ZERO 6 6 R 24MOVE_ZERO
24MOVE_ZERO 7 7 R 24MOVE_ZERO
24MOVE_ZERO 8 8 R 24MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
24MOVE_ZERO_2 0 0 L 24MOVE_ZERO_2
24MOVE_ZERO_2 1 1 L 24MOVE_ZERO_2
24MOVE_ZERO_2 7 0 S 24TO_MIDDLE_L
# Move a 1 to number B
24MOVE_ONE 0 0 R 24MOVE_ONE
24MOVE_ONE 1 1 R 24MOVE_ONE
24MOVE_ONE 2 2 R 24MOVE_ONE
24MOVE_ONE 3 3 R 24MOVE_ONE
24MOVE_ONE 4 4 L 24MOVE_ONE_2
24MOVE_ONE 5 5 R 24MOVE_ONE
24MOVE_ONE 6 6 R 24MOVE_ONE
24MOVE_ONE 7 7 R 24MOVE_ONE
24MOVE_ONE 8 8 R 24MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
24MOVE_ONE_2 0 0 L 24MOVE_ONE_2
24MOVE_ONE_2 1 1 L 24MOVE_ONE_2
24MOVE_ONE_2 7 1 S 24TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
24RESTORE_VALUE 7 0 R 24RESTORE_VALUE
24RESTORE_VALUE 8 1 R 24RESTORE_VALUE
24RESTORE_VALUE 6 6 S 24TO_START
# Go back to the start
24TO_START 0 0 R 24TO_START
24TO_START 1 1 R 24TO_START
24TO_START 6 6 R 24TO_START
24TO_START 5 5 S 24END



#
#asm SUB
#


24END 5 5 S 25START

# Start of the subtraction program
25START 5 5 R 25FIND_B_END

# Find the end of the second number
25FIND_B_END 0 0 R 25FIND_B_END
25FIND_B_END 1 1 R 25FIND_B_END
25FIND_B_END 2 2 R 25FIND_B_END
25FIND_B_END 3 3 R 25FIND_B_END
25FIND_B_END 7 7 R 25FIND_B_END
25FIND_B_END 8 8 R 25FIND_B_END
25FIND_B_END 4 4 L 25SUB_DIGIT

# Find first non-subtracted digit
25SUB_DIGIT 7 7 L 25SUB_DIGIT
25SUB_DIGIT 8 8 L 25SUB_DIGIT
25SUB_DIGIT 0 7 L 25SUB_DIGIT_ZERO
25SUB_DIGIT 1 7 L 25SUB_DIGIT_ONE
25SUB_DIGIT 3 3 R 25RESTORE

# Subtract a zero
25SUB_DIGIT_ZERO 0 0 L 25SUB_DIGIT_ZERO
25SUB_DIGIT_ZERO 1 1 L 25SUB_DIGIT_ZERO
25SUB_DIGIT_ZERO 3 3 L 25SUB_DIGIT_ZERO_1

25SUB_DIGIT_ZERO_1 7 7 L 25SUB_DIGIT_ZERO_1
25SUB_DIGIT_ZERO_1 8 8 L 25SUB_DIGIT_ZERO_1
25SUB_DIGIT_ZERO_1 0 7 L 25FIND_B_END
25SUB_DIGIT_ZERO_1 1 8 R 25FIND_B_END

# Subtract a one
25SUB_DIGIT_ONE 0 0 L 25SUB_DIGIT_ONE
25SUB_DIGIT_ONE 1 1 L 25SUB_DIGIT_ONE
25SUB_DIGIT_ONE 3 3 L 25SUB_DIGIT_ONE_1

25SUB_DIGIT_ONE_1 7 7 L 25SUB_DIGIT_ONE_1
25SUB_DIGIT_ONE_1 8 8 L 25SUB_DIGIT_ONE_1
25SUB_DIGIT_ONE_1 0 8 L 25SUB_DIGIT_ONE_2
25SUB_DIGIT_ONE_1 1 7 R 25FIND_B_END

25SUB_DIGIT_ONE_2 1 0 R 25FIND_B_END
25SUB_DIGIT_ONE_2 2 2 R 25OVERFLOW
25SUB_DIGIT_ONE_2 0 1 L 25SUB_DIGIT_ONE_2

# Unsigned overflow
25OVERFLOW 0 1 R 25OVERFLOW
25OVERFLOW 1 1 R 25OVERFLOW
25OVERFLOW 7 7 R 25FIND_B_END
25OVERFLOW 8 8 R 25FIND_B_END
25OVERFLOW 3 3 R 25FIND_B_END

# Return to the middle of the tape
25RESTORE 7 0 R 25RESTORE
25RESTORE 8 1 R 25RESTORE
25RESTORE 4 4 L 25RESTORE_1

25RESTORE_1 0 0 L 25RESTORE_1
25RESTORE_1 1 1 L 25RESTORE_1
25RESTORE_1 2 2 L 25RESTORE_1
25RESTORE_1 3 3 L 25RESTORE_1
25RESTORE_1 7 0 L 25RESTORE_1
25RESTORE_1 8 1 L 25RESTORE_1
25RESTORE_1 5 5 S 25END


#
#asm STORE S5 A
#


25END 5 5 S 26START

26START 5 5 L 26TO_S1_END
# To end of S1
26TO_S1_END 6 6 L 26TO_S2_END
# To end of S2
26TO_S2_END 0 0 L 26TO_S2_END
26TO_S2_END 1 1 L 26TO_S2_END
26TO_S2_END 6 6 L 26TO_S3_END
# To end of S3
26TO_S3_END 0 0 L 26TO_S3_END
26TO_S3_END 1 1 L 26TO_S3_END
26TO_S3_END 6 6 L 26TO_S4_END
# To end of S4
26TO_S4_END 0 0 L 26TO_S4_END
26TO_S4_END 1 1 L 26TO_S4_END
26TO_S4_END 6 6 L 26TO_S5_END
# To end of S5
26TO_S5_END 0 0 L 26TO_S5_END
26TO_S5_END 1 1 L 26TO_S5_END
26TO_S5_END 6 6 L 26SET_TO_7

# Set all the values to 7 untill the start of S1
26SET_TO_7 0 7 L 26SET_TO_7
26SET_TO_7 1 7 L 26SET_TO_7
26SET_TO_7 6 9 R 26TO_MIDDLE_R
# Find the middle
26TO_MIDDLE_R 1 1 R 26TO_MIDDLE_R
26TO_MIDDLE_R 0 0 R 26TO_MIDDLE_R
26TO_MIDDLE_R 7 7 R 26TO_MIDDLE_R
26TO_MIDDLE_R 2 2 R 26TO_MIDDLE_R
26TO_MIDDLE_R 6 6 R 26TO_MIDDLE_R
26TO_MIDDLE_R 5 5 R 26COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
26COPY_VALUE 0 7 L 26MOVE_ZERO
26COPY_VALUE 1 8 L 26MOVE_ONE
26COPY_VALUE 2 2 R 26COPY_VALUE
26COPY_VALUE 7 7 R 26COPY_VALUE
26COPY_VALUE 8 8 R 26COPY_VALUE
26COPY_VALUE 3 3 L 26RESTORE_VALUE

# Move a 0 to number 9
26MOVE_ZERO 0 0 L 26MOVE_ZERO
26MOVE_ZERO 1 1 L 26MOVE_ZERO
26MOVE_ZERO 2 2 L 26MOVE_ZERO
26MOVE_ZERO 3 3 L 26MOVE_ZERO
26MOVE_ZERO 4 4 L 26MOVE_ZERO
26MOVE_ZERO 9 9 R 26MOVE_ZERO_2
26MOVE_ZERO 5 5 L 26MOVE_ZERO
26MOVE_ZERO 6 6 L 26MOVE_ZERO
26MOVE_ZERO 7 7 L 26MOVE_ZERO
26MOVE_ZERO 8 8 L 26MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
26MOVE_ZERO_2 0 0 R 26MOVE_ZERO_2
26MOVE_ZERO_2 1 1 R 26MOVE_ZERO_2
26MOVE_ZERO_2 7 0 S 26TO_MIDDLE_R
# Move a 1 to number 9
26MOVE_ONE 0 0 L 26MOVE_ONE
26MOVE_ONE 1 1 L 26MOVE_ONE
26MOVE_ONE 2 2 L 26MOVE_ONE
26MOVE_ONE 3 3 L 26MOVE_ONE
26MOVE_ONE 4 4 L 26MOVE_ONE
26MOVE_ONE 9 9 R 26MOVE_ONE_2
26MOVE_ONE 5 5 L 26MOVE_ONE
26MOVE_ONE 6 6 L 26MOVE_ONE
26MOVE_ONE 7 7 L 26MOVE_ONE
26MOVE_ONE 8 8 L 26MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
26MOVE_ONE_2 0 0 R 26MOVE_ONE_2
26MOVE_ONE_2 1 1 R 26MOVE_ONE_2
26MOVE_ONE_2 7 1 S 26TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
26RESTORE_VALUE 7 0 L 26RESTORE_VALUE
26RESTORE_VALUE 8 1 L 26RESTORE_VALUE
26RESTORE_VALUE 2 2 L 26RESET_STORAGE_MARKER
# Reset 9 to 6
26RESET_STORAGE_MARKER 0 0 L 26RESET_STORAGE_MARKER
26RESET_STORAGE_MARKER 1 1 L 26RESET_STORAGE_MARKER
26RESET_STORAGE_MARKER 5 5 L 26RESET_STORAGE_MARKER
26RESET_STORAGE_MARKER 6 6 L 26RESET_STORAGE_MARKER
26RESET_STORAGE_MARKER 9 6 R 26RETURN_TO_MIDDLE
# Return to middle
26RETURN_TO_MIDDLE 0 0 R 26RETURN_TO_MIDDLE
26RETURN_TO_MIDDLE 1 1 R 26RETURN_TO_MIDDLE
26RETURN_TO_MIDDLE 6 6 R 26RETURN_TO_MIDDLE
26RETURN_TO_MIDDLE 5 5 S 26END


#
#asm JMP L3
#


26END 5 5 S 27START
27START 5 5 S LABEL_L3

#
#asm L4:
#

LABEL_L4 5 5 S 27END

#
#asm JMP L1
#


27END 5 5 S 28START
28START 5 5 S LABEL_L1

#
#asm L2:
#

LABEL_L2 5 5 S 28END
28END 5 5 S END