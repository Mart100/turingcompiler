6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 1 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 1 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 1 0 6 0 0 0 0 1 1 1 1 6 !5 2 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 10

# Original program

#p (15 - 2) * 4 + 2;

START 5 5 S 0END

#
### LOAD S1, A
#


0END 5 5 S 1START

# Start of loading
1START 5 5 R 1TO_A_END_R
# To end of number A
1TO_A_END_R 0 0 R 1TO_A_END_R
1TO_A_END_R 1 1 R 1TO_A_END_R
1TO_A_END_R 2 2 R 1TO_A_END_R
1TO_A_END_R 3 3 L 1SET_TO_7

# Move to the start of number A, and set all values to 7
1SET_TO_7 0 7 L 1SET_TO_7
1SET_TO_7 1 7 L 1SET_TO_7
1SET_TO_7 2 2 L 1TO_MIDDLE_L
# Find the middle
1TO_MIDDLE_L 1 1 L 1TO_MIDDLE_L
1TO_MIDDLE_L 0 0 L 1TO_MIDDLE_L
1TO_MIDDLE_L 7 7 L 1TO_MIDDLE_L
1TO_MIDDLE_L 2 2 L 1TO_MIDDLE_L
1TO_MIDDLE_L 3 3 L 1TO_MIDDLE_L
1TO_MIDDLE_L 4 4 L 1TO_MIDDLE_L
1TO_MIDDLE_L 5 5 L 1TO_S1_END
# To end of S1
1TO_S1_END 6 6 L 1COPY_VALUE
# Move Left until start of S1
# Copy the first non-7/8 value
1COPY_VALUE 0 7 R 1MOVE_ZERO
1COPY_VALUE 1 8 R 1MOVE_ONE
1COPY_VALUE 7 7 L 1COPY_VALUE
1COPY_VALUE 8 8 L 1COPY_VALUE
1COPY_VALUE 6 6 R 1RESTORE_VALUE

# Move a 0 to number A
1MOVE_ZERO 0 0 R 1MOVE_ZERO
1MOVE_ZERO 1 1 R 1MOVE_ZERO
1MOVE_ZERO 2 2 R 1MOVE_ZERO
1MOVE_ZERO 3 3 L 1MOVE_ZERO_2
1MOVE_ZERO 4 4 R 1MOVE_ZERO
1MOVE_ZERO 5 5 R 1MOVE_ZERO
1MOVE_ZERO 6 6 R 1MOVE_ZERO
1MOVE_ZERO 7 7 R 1MOVE_ZERO
1MOVE_ZERO 8 8 R 1MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
1MOVE_ZERO_2 0 0 L 1MOVE_ZERO_2
1MOVE_ZERO_2 1 1 L 1MOVE_ZERO_2
1MOVE_ZERO_2 7 0 S 1TO_MIDDLE_L
# Move a 1 to number A
1MOVE_ONE 0 0 R 1MOVE_ONE
1MOVE_ONE 1 1 R 1MOVE_ONE
1MOVE_ONE 2 2 R 1MOVE_ONE
1MOVE_ONE 3 3 L 1MOVE_ONE_2
1MOVE_ONE 4 4 R 1MOVE_ONE
1MOVE_ONE 5 5 R 1MOVE_ONE
1MOVE_ONE 6 6 R 1MOVE_ONE
1MOVE_ONE 7 7 R 1MOVE_ONE
1MOVE_ONE 8 8 R 1MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
1MOVE_ONE_2 0 0 L 1MOVE_ONE_2
1MOVE_ONE_2 1 1 L 1MOVE_ONE_2
1MOVE_ONE_2 7 1 S 1TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
1RESTORE_VALUE 7 0 R 1RESTORE_VALUE
1RESTORE_VALUE 8 1 R 1RESTORE_VALUE
1RESTORE_VALUE 6 6 S 1TO_START
# Go back to the start
1TO_START 0 0 R 1TO_START
1TO_START 1 1 R 1TO_START
1TO_START 6 6 R 1TO_START
1TO_START 5 5 S 1END



#
### LOAD S2, B
#


1END 5 5 S 2START

# Start of loading
2START 5 5 R 2TO_B_END_R
# To end of number B
2TO_B_END_R 0 0 R 2TO_B_END_R
2TO_B_END_R 1 1 R 2TO_B_END_R
2TO_B_END_R 2 2 R 2TO_B_END_R
2TO_B_END_R 3 3 R 2TO_B_END_R
2TO_B_END_R 4 4 L 2SET_TO_7

# Move to the start of number B, and set all values to 7
2SET_TO_7 0 7 L 2SET_TO_7
2SET_TO_7 1 7 L 2SET_TO_7
2SET_TO_7 3 3 L 2TO_MIDDLE_L
# Find the middle
2TO_MIDDLE_L 1 1 L 2TO_MIDDLE_L
2TO_MIDDLE_L 0 0 L 2TO_MIDDLE_L
2TO_MIDDLE_L 7 7 L 2TO_MIDDLE_L
2TO_MIDDLE_L 2 2 L 2TO_MIDDLE_L
2TO_MIDDLE_L 3 3 L 2TO_MIDDLE_L
2TO_MIDDLE_L 4 4 L 2TO_MIDDLE_L
2TO_MIDDLE_L 5 5 L 2TO_S1_END
# To end of S1
2TO_S1_END 6 6 L 2TO_S2_END
# To end of S2
2TO_S2_END 0 0 L 2TO_S2_END
2TO_S2_END 1 1 L 2TO_S2_END
2TO_S2_END 6 6 L 2COPY_VALUE
# Move Left until start of S2
# Copy the first non-7/8 value
2COPY_VALUE 0 7 R 2MOVE_ZERO
2COPY_VALUE 1 8 R 2MOVE_ONE
2COPY_VALUE 7 7 L 2COPY_VALUE
2COPY_VALUE 8 8 L 2COPY_VALUE
2COPY_VALUE 6 6 R 2RESTORE_VALUE

# Move a 0 to number B
2MOVE_ZERO 0 0 R 2MOVE_ZERO
2MOVE_ZERO 1 1 R 2MOVE_ZERO
2MOVE_ZERO 2 2 R 2MOVE_ZERO
2MOVE_ZERO 3 3 R 2MOVE_ZERO
2MOVE_ZERO 4 4 L 2MOVE_ZERO_2
2MOVE_ZERO 5 5 R 2MOVE_ZERO
2MOVE_ZERO 6 6 R 2MOVE_ZERO
2MOVE_ZERO 7 7 R 2MOVE_ZERO
2MOVE_ZERO 8 8 R 2MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
2MOVE_ZERO_2 0 0 L 2MOVE_ZERO_2
2MOVE_ZERO_2 1 1 L 2MOVE_ZERO_2
2MOVE_ZERO_2 7 0 S 2TO_MIDDLE_L
# Move a 1 to number B
2MOVE_ONE 0 0 R 2MOVE_ONE
2MOVE_ONE 1 1 R 2MOVE_ONE
2MOVE_ONE 2 2 R 2MOVE_ONE
2MOVE_ONE 3 3 R 2MOVE_ONE
2MOVE_ONE 4 4 L 2MOVE_ONE_2
2MOVE_ONE 5 5 R 2MOVE_ONE
2MOVE_ONE 6 6 R 2MOVE_ONE
2MOVE_ONE 7 7 R 2MOVE_ONE
2MOVE_ONE 8 8 R 2MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
2MOVE_ONE_2 0 0 L 2MOVE_ONE_2
2MOVE_ONE_2 1 1 L 2MOVE_ONE_2
2MOVE_ONE_2 7 1 S 2TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
2RESTORE_VALUE 7 0 R 2RESTORE_VALUE
2RESTORE_VALUE 8 1 R 2RESTORE_VALUE
2RESTORE_VALUE 6 6 S 2TO_START
# Go back to the start
2TO_START 0 0 R 2TO_START
2TO_START 1 1 R 2TO_START
2TO_START 6 6 R 2TO_START
2TO_START 5 5 S 2END



#
### SUB
#


2END 5 5 S 3START

 5 2 1 0 1 0 0 1 1 0 3 0 0 0 0 1 1 1 0 4

# Start of the subtraction program
3START 5 5 R 3FIND_B_END

# Find the end of the second number
3FIND_B_END 0 0 R 3FIND_B_END
3FIND_B_END 1 1 R 3FIND_B_END
3FIND_B_END 2 2 R 3FIND_B_END
3FIND_B_END 3 3 R 3FIND_B_END
3FIND_B_END 7 7 R 3FIND_B_END
3FIND_B_END 8 8 R 3FIND_B_END
3FIND_B_END 4 4 L 3SUB_DIGIT

# Find first non-subtracted digit
3SUB_DIGIT 7 7 L 3SUB_DIGIT
3SUB_DIGIT 8 8 L 3SUB_DIGIT
3SUB_DIGIT 0 7 L 3SUB_DIGIT_ZERO
3SUB_DIGIT 1 7 L 3SUB_DIGIT_ONE
3SUB_DIGIT 3 3 R 3RESTORE

# Subtract a zero
3SUB_DIGIT_ZERO 0 0 L 3SUB_DIGIT_ZERO
3SUB_DIGIT_ZERO 1 1 L 3SUB_DIGIT_ZERO
3SUB_DIGIT_ZERO 3 3 L 3SUB_DIGIT_ZERO_1

3SUB_DIGIT_ZERO_1 7 7 L 3SUB_DIGIT_ZERO_1
3SUB_DIGIT_ZERO_1 8 8 L 3SUB_DIGIT_ZERO_1
3SUB_DIGIT_ZERO_1 0 7 L 3FIND_B_END
3SUB_DIGIT_ZERO_1 1 8 R 3FIND_B_END

# Subtract a one
3SUB_DIGIT_ONE 0 0 L 3SUB_DIGIT_ONE
3SUB_DIGIT_ONE 1 1 L 3SUB_DIGIT_ONE
3SUB_DIGIT_ONE 3 3 L 3SUB_DIGIT_ONE_1

3SUB_DIGIT_ONE_1 7 7 L 3SUB_DIGIT_ONE_1
3SUB_DIGIT_ONE_1 8 8 L 3SUB_DIGIT_ONE_1
3SUB_DIGIT_ONE_1 0 8 L 3SUB_DIGIT_ONE_2
3SUB_DIGIT_ONE_1 1 7 R 3FIND_B_END

3SUB_DIGIT_ONE_2 1 0 R 3FIND_B_END
3SUB_DIGIT_ONE_2 0 1 L 3SUB_DIGIT_ONE_2

# Return to the middle of the tape
3RESTORE 7 0 R 3RESTORE
3RESTORE 8 1 R 3RESTORE
3RESTORE 4 4 L 3RESTORE_1

3RESTORE_1 0 0 L 3RESTORE_1
3RESTORE_1 1 1 L 3RESTORE_1
3RESTORE_1 3 3 L 3RESTORE_1
3RESTORE_1 2 2 L 3RESTORE_1
3RESTORE_1 7 0 L 3RESTORE_1
3RESTORE_1 8 1 L 3RESTORE_1
3RESTORE_1 5 5 S 3END


#
### STORE A, S3
#


3END 5 5 S 4START

4START 5 5 L 4TO_S1_END
# To end of S1
4TO_S1_END 6 6 L 4TO_S2_END
# To end of S2
4TO_S2_END 0 0 L 4TO_S2_END
4TO_S2_END 1 1 L 4TO_S2_END
4TO_S2_END 6 6 L 4TO_S3_END
# To end of S3
4TO_S3_END 0 0 L 4TO_S3_END
4TO_S3_END 1 1 L 4TO_S3_END
4TO_S3_END 6 6 L 4SET_TO_7

# Set all the values to 7 untill the start of S1
4SET_TO_7 0 7 L 4SET_TO_7
4SET_TO_7 1 7 L 4SET_TO_7
4SET_TO_7 6 9 R 4TO_MIDDLE_R
# Find the middle
4TO_MIDDLE_R 1 1 R 4TO_MIDDLE_R
4TO_MIDDLE_R 0 0 R 4TO_MIDDLE_R
4TO_MIDDLE_R 7 7 R 4TO_MIDDLE_R
4TO_MIDDLE_R 2 2 R 4TO_MIDDLE_R
4TO_MIDDLE_R 6 6 R 4TO_MIDDLE_R
4TO_MIDDLE_R 5 5 R 4COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
4COPY_VALUE 0 7 L 4MOVE_ZERO
4COPY_VALUE 1 8 L 4MOVE_ONE
4COPY_VALUE 2 2 R 4COPY_VALUE
4COPY_VALUE 7 7 R 4COPY_VALUE
4COPY_VALUE 8 8 R 4COPY_VALUE
4COPY_VALUE 3 3 L 4RESTORE_VALUE

# Move a 0 to number 9
4MOVE_ZERO 0 0 L 4MOVE_ZERO
4MOVE_ZERO 1 1 L 4MOVE_ZERO
4MOVE_ZERO 2 2 L 4MOVE_ZERO
4MOVE_ZERO 3 3 L 4MOVE_ZERO
4MOVE_ZERO 4 4 L 4MOVE_ZERO
4MOVE_ZERO 9 9 R 4MOVE_ZERO_2
4MOVE_ZERO 5 5 L 4MOVE_ZERO
4MOVE_ZERO 6 6 L 4MOVE_ZERO
4MOVE_ZERO 7 7 L 4MOVE_ZERO
4MOVE_ZERO 8 8 L 4MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
4MOVE_ZERO_2 0 0 R 4MOVE_ZERO_2
4MOVE_ZERO_2 1 1 R 4MOVE_ZERO_2
4MOVE_ZERO_2 7 0 S 4TO_MIDDLE_R
# Move a 1 to number 9
4MOVE_ONE 0 0 L 4MOVE_ONE
4MOVE_ONE 1 1 L 4MOVE_ONE
4MOVE_ONE 2 2 L 4MOVE_ONE
4MOVE_ONE 3 3 L 4MOVE_ONE
4MOVE_ONE 4 4 L 4MOVE_ONE
4MOVE_ONE 9 9 R 4MOVE_ONE_2
4MOVE_ONE 5 5 L 4MOVE_ONE
4MOVE_ONE 6 6 L 4MOVE_ONE
4MOVE_ONE 7 7 L 4MOVE_ONE
4MOVE_ONE 8 8 L 4MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
4MOVE_ONE_2 0 0 R 4MOVE_ONE_2
4MOVE_ONE_2 1 1 R 4MOVE_ONE_2
4MOVE_ONE_2 7 1 S 4TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
4RESTORE_VALUE 7 0 L 4RESTORE_VALUE
4RESTORE_VALUE 8 1 L 4RESTORE_VALUE
4RESTORE_VALUE 2 2 L 4RESET_STORAGE_MARKER
# Reset 9 to 6
4RESET_STORAGE_MARKER 0 0 L 4RESET_STORAGE_MARKER
4RESET_STORAGE_MARKER 1 1 L 4RESET_STORAGE_MARKER
4RESET_STORAGE_MARKER 5 5 L 4RESET_STORAGE_MARKER
4RESET_STORAGE_MARKER 6 6 L 4RESET_STORAGE_MARKER
4RESET_STORAGE_MARKER 9 6 R 4RETURN_TO_MIDDLE
# Return to middle
4RETURN_TO_MIDDLE 0 0 R 4RETURN_TO_MIDDLE
4RETURN_TO_MIDDLE 1 1 R 4RETURN_TO_MIDDLE
4RETURN_TO_MIDDLE 6 6 R 4RETURN_TO_MIDDLE
4RETURN_TO_MIDDLE 5 5 S 4END


#
### LOAD S3, B
#


4END 5 5 S 5START

# Start of loading
5START 5 5 R 5TO_B_END_R
# To end of number B
5TO_B_END_R 0 0 R 5TO_B_END_R
5TO_B_END_R 1 1 R 5TO_B_END_R
5TO_B_END_R 2 2 R 5TO_B_END_R
5TO_B_END_R 3 3 R 5TO_B_END_R
5TO_B_END_R 4 4 L 5SET_TO_7

# Move to the start of number B, and set all values to 7
5SET_TO_7 0 7 L 5SET_TO_7
5SET_TO_7 1 7 L 5SET_TO_7
5SET_TO_7 3 3 L 5TO_MIDDLE_L
# Find the middle
5TO_MIDDLE_L 1 1 L 5TO_MIDDLE_L
5TO_MIDDLE_L 0 0 L 5TO_MIDDLE_L
5TO_MIDDLE_L 7 7 L 5TO_MIDDLE_L
5TO_MIDDLE_L 2 2 L 5TO_MIDDLE_L
5TO_MIDDLE_L 3 3 L 5TO_MIDDLE_L
5TO_MIDDLE_L 4 4 L 5TO_MIDDLE_L
5TO_MIDDLE_L 5 5 L 5TO_S1_END
# To end of S1
5TO_S1_END 6 6 L 5TO_S2_END
# To end of S2
5TO_S2_END 0 0 L 5TO_S2_END
5TO_S2_END 1 1 L 5TO_S2_END
5TO_S2_END 6 6 L 5TO_S3_END
# To end of S3
5TO_S3_END 0 0 L 5TO_S3_END
5TO_S3_END 1 1 L 5TO_S3_END
5TO_S3_END 6 6 L 5COPY_VALUE
# Move Left until start of S3
# Copy the first non-7/8 value
5COPY_VALUE 0 7 R 5MOVE_ZERO
5COPY_VALUE 1 8 R 5MOVE_ONE
5COPY_VALUE 7 7 L 5COPY_VALUE
5COPY_VALUE 8 8 L 5COPY_VALUE
5COPY_VALUE 6 6 R 5RESTORE_VALUE

# Move a 0 to number B
5MOVE_ZERO 0 0 R 5MOVE_ZERO
5MOVE_ZERO 1 1 R 5MOVE_ZERO
5MOVE_ZERO 2 2 R 5MOVE_ZERO
5MOVE_ZERO 3 3 R 5MOVE_ZERO
5MOVE_ZERO 4 4 L 5MOVE_ZERO_2
5MOVE_ZERO 5 5 R 5MOVE_ZERO
5MOVE_ZERO 6 6 R 5MOVE_ZERO
5MOVE_ZERO 7 7 R 5MOVE_ZERO
5MOVE_ZERO 8 8 R 5MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
5MOVE_ZERO_2 0 0 L 5MOVE_ZERO_2
5MOVE_ZERO_2 1 1 L 5MOVE_ZERO_2
5MOVE_ZERO_2 7 0 S 5TO_MIDDLE_L
# Move a 1 to number B
5MOVE_ONE 0 0 R 5MOVE_ONE
5MOVE_ONE 1 1 R 5MOVE_ONE
5MOVE_ONE 2 2 R 5MOVE_ONE
5MOVE_ONE 3 3 R 5MOVE_ONE
5MOVE_ONE 4 4 L 5MOVE_ONE_2
5MOVE_ONE 5 5 R 5MOVE_ONE
5MOVE_ONE 6 6 R 5MOVE_ONE
5MOVE_ONE 7 7 R 5MOVE_ONE
5MOVE_ONE 8 8 R 5MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
5MOVE_ONE_2 0 0 L 5MOVE_ONE_2
5MOVE_ONE_2 1 1 L 5MOVE_ONE_2
5MOVE_ONE_2 7 1 S 5TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
5RESTORE_VALUE 7 0 R 5RESTORE_VALUE
5RESTORE_VALUE 8 1 R 5RESTORE_VALUE
5RESTORE_VALUE 6 6 S 5TO_START
# Go back to the start
5TO_START 0 0 R 5TO_START
5TO_START 1 1 R 5TO_START
5TO_START 6 6 R 5TO_START
5TO_START 5 5 S 5END



#
### LOAD S4, C
#


5END 5 5 S 6START

# Start of loading
6START 5 5 R 6TO_C_END_R
# To end of number C
6TO_C_END_R 0 0 R 6TO_C_END_R
6TO_C_END_R 1 1 R 6TO_C_END_R
6TO_C_END_R 2 2 R 6TO_C_END_R
6TO_C_END_R 3 3 R 6TO_C_END_R
6TO_C_END_R 4 4 R 6TO_C_END_R
6TO_C_END_R 10 10 L 6SET_TO_7

# Move to the start of number C, and set all values to 7
6SET_TO_7 0 7 L 6SET_TO_7
6SET_TO_7 1 7 L 6SET_TO_7
6SET_TO_7 4 4 L 6TO_MIDDLE_L
# Find the middle
6TO_MIDDLE_L 1 1 L 6TO_MIDDLE_L
6TO_MIDDLE_L 0 0 L 6TO_MIDDLE_L
6TO_MIDDLE_L 7 7 L 6TO_MIDDLE_L
6TO_MIDDLE_L 2 2 L 6TO_MIDDLE_L
6TO_MIDDLE_L 3 3 L 6TO_MIDDLE_L
6TO_MIDDLE_L 4 4 L 6TO_MIDDLE_L
6TO_MIDDLE_L 5 5 L 6TO_S1_END
# To end of S1
6TO_S1_END 6 6 L 6TO_S2_END
# To end of S2
6TO_S2_END 0 0 L 6TO_S2_END
6TO_S2_END 1 1 L 6TO_S2_END
6TO_S2_END 6 6 L 6TO_S3_END
# To end of S3
6TO_S3_END 0 0 L 6TO_S3_END
6TO_S3_END 1 1 L 6TO_S3_END
6TO_S3_END 6 6 L 6TO_S4_END
# To end of S4
6TO_S4_END 0 0 L 6TO_S4_END
6TO_S4_END 1 1 L 6TO_S4_END
6TO_S4_END 6 6 L 6COPY_VALUE
# Move Left until start of S4
# Copy the first non-7/8 value
6COPY_VALUE 0 7 R 6MOVE_ZERO
6COPY_VALUE 1 8 R 6MOVE_ONE
6COPY_VALUE 7 7 L 6COPY_VALUE
6COPY_VALUE 8 8 L 6COPY_VALUE
6COPY_VALUE 6 6 R 6RESTORE_VALUE

# Move a 0 to number C
6MOVE_ZERO 0 0 R 6MOVE_ZERO
6MOVE_ZERO 1 1 R 6MOVE_ZERO
6MOVE_ZERO 2 2 R 6MOVE_ZERO
6MOVE_ZERO 3 3 R 6MOVE_ZERO
6MOVE_ZERO 4 4 R 6MOVE_ZERO
6MOVE_ZERO 10 10 L 6MOVE_ZERO_2
6MOVE_ZERO 5 5 R 6MOVE_ZERO
6MOVE_ZERO 6 6 R 6MOVE_ZERO
6MOVE_ZERO 7 7 R 6MOVE_ZERO
6MOVE_ZERO 8 8 R 6MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
6MOVE_ZERO_2 0 0 L 6MOVE_ZERO_2
6MOVE_ZERO_2 1 1 L 6MOVE_ZERO_2
6MOVE_ZERO_2 7 0 S 6TO_MIDDLE_L
# Move a 1 to number C
6MOVE_ONE 0 0 R 6MOVE_ONE
6MOVE_ONE 1 1 R 6MOVE_ONE
6MOVE_ONE 2 2 R 6MOVE_ONE
6MOVE_ONE 3 3 R 6MOVE_ONE
6MOVE_ONE 4 4 R 6MOVE_ONE
6MOVE_ONE 10 10 L 6MOVE_ONE_2
6MOVE_ONE 5 5 R 6MOVE_ONE
6MOVE_ONE 6 6 R 6MOVE_ONE
6MOVE_ONE 7 7 R 6MOVE_ONE
6MOVE_ONE 8 8 R 6MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
6MOVE_ONE_2 0 0 L 6MOVE_ONE_2
6MOVE_ONE_2 1 1 L 6MOVE_ONE_2
6MOVE_ONE_2 7 1 S 6TO_MIDDLE_L
# Restore number C, translate 7 to 0 and 8 to 1
6RESTORE_VALUE 7 0 R 6RESTORE_VALUE
6RESTORE_VALUE 8 1 R 6RESTORE_VALUE
6RESTORE_VALUE 6 6 S 6TO_START
# Go back to the start
6TO_START 0 0 R 6TO_START
6TO_START 1 1 R 6TO_START
6TO_START 6 6 R 6TO_START
6TO_START 5 5 S 6END



#
### MUL
#


6END 5 5 S 7START

# Start of the binary multiplication
7START 5 5 R 7CLEAR_A

# Clear A
7CLEAR_A 1 0 R 7CLEAR_A
7CLEAR_A 0 0 R 7CLEAR_A
7CLEAR_A 2 2 R 7CLEAR_A
7CLEAR_A 3 3 R 7FIND_B_END

# Find the end of the B
7FIND_B_END 0 0 R 7FIND_B_END
7FIND_B_END 1 1 R 7FIND_B_END
7FIND_B_END 2 2 R 7FIND_B_END
7FIND_B_END 3 3 R 7FIND_B_END
7FIND_B_END 7 7 R 7FIND_B_END
7FIND_B_END 8 8 R 7FIND_B_END
7FIND_B_END 4 4 L 7CHECK_B

# Check last digit of B
# If last digit is 0, multiply C by 2
# If last digit is 1, Add C to A and then multiply C by 2
7CHECK_B 11 11 L 7CHECK_B
7CHECK_B 0 11 R 7SHIFT_C
7CHECK_B 1 11 R 7ADD_C_TO_A_0
7CHECK_B 3 3 R 7CLEAR_B

## Multiply C by shifting each bit to the left

# First go to end of C
7SHIFT_C 0 0 R 7SHIFT_C
7SHIFT_C 1 1 R 7SHIFT_C
7SHIFT_C 11 11 R 7SHIFT_C
7SHIFT_C 4 4 R 7SHIFT_C
7SHIFT_C 10 10 L 7SHIFT_C_ZERO

# Place a 0 and shift left
7SHIFT_C_ZERO 0 0 L 7SHIFT_C_ZERO
7SHIFT_C_ZERO 1 0 L 7SHIFT_C_ONE
7SHIFT_C_ZERO 4 4 L 7CHECK_B

# Place a 1 and shift left
7SHIFT_C_ONE 0 1 L 7SHIFT_C_ZERO
7SHIFT_C_ONE 1 1 L 7SHIFT_C_ONE
7SHIFT_C_ONE 4 4 L 7CHECK_B

## Add C to A

# First go to end of C
7ADD_C_TO_A_0 0 0 R 7ADD_C_TO_A_0
7ADD_C_TO_A_0 1 1 R 7ADD_C_TO_A_0
7ADD_C_TO_A_0 3 3 R 7ADD_C_TO_A_0
7ADD_C_TO_A_0 4 4 R 7ADD_C_TO_A_0
7ADD_C_TO_A_0 7 7 R 7ADD_C_TO_A_0
7ADD_C_TO_A_0 8 8 R 7ADD_C_TO_A_0
7ADD_C_TO_A_0 11 11 R 7ADD_C_TO_A_0
7ADD_C_TO_A_0 10 10 L 7ADD_C_TO_A_1

# Find first non-moved digit of C, and replace 0 with 7 and 1 with 8
7ADD_C_TO_A_1 0 7 L 7ADD_C_TO_A_ZERO
7ADD_C_TO_A_1 1 8 L 7ADD_C_TO_A_ONE
7ADD_C_TO_A_1 7 7 L 7ADD_C_TO_A_1
7ADD_C_TO_A_1 8 8 L 7ADD_C_TO_A_1
7ADD_C_TO_A_1 4 4 R 7ADD_C_TO_A_RESTORE_0

# Move a 0 from C to end of A
7ADD_C_TO_A_ZERO 0 0 L 7ADD_C_TO_A_ZERO
7ADD_C_TO_A_ZERO 1 1 L 7ADD_C_TO_A_ZERO
7ADD_C_TO_A_ZERO 4 4 L 7ADD_C_TO_A_ZERO
7ADD_C_TO_A_ZERO 7 7 L 7ADD_C_TO_A_ZERO
7ADD_C_TO_A_ZERO 8 8 L 7ADD_C_TO_A_ZERO
7ADD_C_TO_A_ZERO 11 11 L 7ADD_C_TO_A_ZERO
7ADD_C_TO_A_ZERO 3 3 L 7ADD_C_TO_A_ZERO_1

# Set the 0 in A to 7, except if its a 1
7ADD_C_TO_A_ZERO_1 7 7 L 7ADD_C_TO_A_ZERO_1
7ADD_C_TO_A_ZERO_1 8 8 L 7ADD_C_TO_A_ZERO_1
7ADD_C_TO_A_ZERO_1 0 7 R 7ADD_C_TO_A_0
7ADD_C_TO_A_ZERO_1 1 8 R 7ADD_C_TO_A_0

# Move a 1 from C to end of A
7ADD_C_TO_A_ONE 0 0 L 7ADD_C_TO_A_ONE
7ADD_C_TO_A_ONE 1 1 L 7ADD_C_TO_A_ONE
7ADD_C_TO_A_ONE 4 4 L 7ADD_C_TO_A_ONE
7ADD_C_TO_A_ONE 7 7 L 7ADD_C_TO_A_ONE
7ADD_C_TO_A_ONE 8 8 L 7ADD_C_TO_A_ONE
7ADD_C_TO_A_ONE 11 11 L 7ADD_C_TO_A_ONE
7ADD_C_TO_A_ONE 3 3 L 7ADD_C_TO_A_ONE_1

# Set the 1 in A to 8, unless if its already a 1
7ADD_C_TO_A_ONE_1 7 7 L 7ADD_C_TO_A_ONE_1
7ADD_C_TO_A_ONE_1 8 8 L 7ADD_C_TO_A_ONE_1
7ADD_C_TO_A_ONE_1 0 8 R 7ADD_C_TO_A_0
7ADD_C_TO_A_ONE_1 1 7 L 7ADD_C_TO_A_ONE_1_MOVE

# Move the 1 to the next digit, if its a 1, make it 0 and move to the next digit
7ADD_C_TO_A_ONE_1_MOVE 0 1 R 7ADD_C_TO_A_0
7ADD_C_TO_A_ONE_1_MOVE 1 0 L 7ADD_C_TO_A_ONE_1_MOVE

# Restore the number in C
7ADD_C_TO_A_RESTORE_0 7 0 R 7ADD_C_TO_A_RESTORE_0
7ADD_C_TO_A_RESTORE_0 8 1 R 7ADD_C_TO_A_RESTORE_0
7ADD_C_TO_A_RESTORE_0 10 10 L 7ADD_C_TO_A_RESTORE_1

# Move to the start of A
7ADD_C_TO_A_RESTORE_1 0 0 L 7ADD_C_TO_A_RESTORE_1
7ADD_C_TO_A_RESTORE_1 1 1 L 7ADD_C_TO_A_RESTORE_1
7ADD_C_TO_A_RESTORE_1 3 3 L 7ADD_C_TO_A_RESTORE_1
7ADD_C_TO_A_RESTORE_1 4 4 L 7ADD_C_TO_A_RESTORE_1
7ADD_C_TO_A_RESTORE_1 7 7 L 7ADD_C_TO_A_RESTORE_1
7ADD_C_TO_A_RESTORE_1 8 8 L 7ADD_C_TO_A_RESTORE_1
7ADD_C_TO_A_RESTORE_1 11 11 L 7ADD_C_TO_A_RESTORE_1
7ADD_C_TO_A_RESTORE_1 2 2 R 7ADD_C_TO_A_RESTORE_2

# Restore the number in A, and move to the end of B
7ADD_C_TO_A_RESTORE_2 0 0 R 7ADD_C_TO_A_RESTORE_2
7ADD_C_TO_A_RESTORE_2 1 1 R 7ADD_C_TO_A_RESTORE_2
7ADD_C_TO_A_RESTORE_2 11 11 R 7ADD_C_TO_A_RESTORE_2
7ADD_C_TO_A_RESTORE_2 3 3 R 7ADD_C_TO_A_RESTORE_2
7ADD_C_TO_A_RESTORE_2 7 0 R 7ADD_C_TO_A_RESTORE_2
7ADD_C_TO_A_RESTORE_2 8 1 R 7ADD_C_TO_A_RESTORE_2
7ADD_C_TO_A_RESTORE_2 4 4 L 7SHIFT_C

# Clear B, set all to 0
7CLEAR_B 11 0 R 7CLEAR_B
7CLEAR_B 4 4 L 7RETURN

# Return to the start of the program
7RETURN 0 0 L 7RETURN
7RETURN 1 1 L 7RETURN
7RETURN 2 2 L 7RETURN
7RETURN 3 3 L 7RETURN
7RETURN 5 5 S 7END


#
### STORE A, S5
#


7END 5 5 S 8START

8START 5 5 L 8TO_S1_END
# To end of S1
8TO_S1_END 6 6 L 8TO_S2_END
# To end of S2
8TO_S2_END 0 0 L 8TO_S2_END
8TO_S2_END 1 1 L 8TO_S2_END
8TO_S2_END 6 6 L 8TO_S3_END
# To end of S3
8TO_S3_END 0 0 L 8TO_S3_END
8TO_S3_END 1 1 L 8TO_S3_END
8TO_S3_END 6 6 L 8TO_S4_END
# To end of S4
8TO_S4_END 0 0 L 8TO_S4_END
8TO_S4_END 1 1 L 8TO_S4_END
8TO_S4_END 6 6 L 8TO_S5_END
# To end of S5
8TO_S5_END 0 0 L 8TO_S5_END
8TO_S5_END 1 1 L 8TO_S5_END
8TO_S5_END 6 6 L 8SET_TO_7

# Set all the values to 7 untill the start of S1
8SET_TO_7 0 7 L 8SET_TO_7
8SET_TO_7 1 7 L 8SET_TO_7
8SET_TO_7 6 9 R 8TO_MIDDLE_R
# Find the middle
8TO_MIDDLE_R 1 1 R 8TO_MIDDLE_R
8TO_MIDDLE_R 0 0 R 8TO_MIDDLE_R
8TO_MIDDLE_R 7 7 R 8TO_MIDDLE_R
8TO_MIDDLE_R 2 2 R 8TO_MIDDLE_R
8TO_MIDDLE_R 6 6 R 8TO_MIDDLE_R
8TO_MIDDLE_R 5 5 R 8COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
8COPY_VALUE 0 7 L 8MOVE_ZERO
8COPY_VALUE 1 8 L 8MOVE_ONE
8COPY_VALUE 2 2 R 8COPY_VALUE
8COPY_VALUE 7 7 R 8COPY_VALUE
8COPY_VALUE 8 8 R 8COPY_VALUE
8COPY_VALUE 3 3 L 8RESTORE_VALUE

# Move a 0 to number 9
8MOVE_ZERO 0 0 L 8MOVE_ZERO
8MOVE_ZERO 1 1 L 8MOVE_ZERO
8MOVE_ZERO 2 2 L 8MOVE_ZERO
8MOVE_ZERO 3 3 L 8MOVE_ZERO
8MOVE_ZERO 4 4 L 8MOVE_ZERO
8MOVE_ZERO 9 9 R 8MOVE_ZERO_2
8MOVE_ZERO 5 5 L 8MOVE_ZERO
8MOVE_ZERO 6 6 L 8MOVE_ZERO
8MOVE_ZERO 7 7 L 8MOVE_ZERO
8MOVE_ZERO 8 8 L 8MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
8MOVE_ZERO_2 0 0 R 8MOVE_ZERO_2
8MOVE_ZERO_2 1 1 R 8MOVE_ZERO_2
8MOVE_ZERO_2 7 0 S 8TO_MIDDLE_R
# Move a 1 to number 9
8MOVE_ONE 0 0 L 8MOVE_ONE
8MOVE_ONE 1 1 L 8MOVE_ONE
8MOVE_ONE 2 2 L 8MOVE_ONE
8MOVE_ONE 3 3 L 8MOVE_ONE
8MOVE_ONE 4 4 L 8MOVE_ONE
8MOVE_ONE 9 9 R 8MOVE_ONE_2
8MOVE_ONE 5 5 L 8MOVE_ONE
8MOVE_ONE 6 6 L 8MOVE_ONE
8MOVE_ONE 7 7 L 8MOVE_ONE
8MOVE_ONE 8 8 L 8MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
8MOVE_ONE_2 0 0 R 8MOVE_ONE_2
8MOVE_ONE_2 1 1 R 8MOVE_ONE_2
8MOVE_ONE_2 7 1 S 8TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
8RESTORE_VALUE 7 0 L 8RESTORE_VALUE
8RESTORE_VALUE 8 1 L 8RESTORE_VALUE
8RESTORE_VALUE 2 2 L 8RESET_STORAGE_MARKER
# Reset 9 to 6
8RESET_STORAGE_MARKER 0 0 L 8RESET_STORAGE_MARKER
8RESET_STORAGE_MARKER 1 1 L 8RESET_STORAGE_MARKER
8RESET_STORAGE_MARKER 5 5 L 8RESET_STORAGE_MARKER
8RESET_STORAGE_MARKER 6 6 L 8RESET_STORAGE_MARKER
8RESET_STORAGE_MARKER 9 6 R 8RETURN_TO_MIDDLE
# Return to middle
8RETURN_TO_MIDDLE 0 0 R 8RETURN_TO_MIDDLE
8RETURN_TO_MIDDLE 1 1 R 8RETURN_TO_MIDDLE
8RETURN_TO_MIDDLE 6 6 R 8RETURN_TO_MIDDLE
8RETURN_TO_MIDDLE 5 5 S 8END


#
### LOAD S5, A
#


8END 5 5 S 9START

# Start of loading
9START 5 5 R 9TO_A_END_R
# To end of number A
9TO_A_END_R 0 0 R 9TO_A_END_R
9TO_A_END_R 1 1 R 9TO_A_END_R
9TO_A_END_R 2 2 R 9TO_A_END_R
9TO_A_END_R 3 3 L 9SET_TO_7

# Move to the start of number A, and set all values to 7
9SET_TO_7 0 7 L 9SET_TO_7
9SET_TO_7 1 7 L 9SET_TO_7
9SET_TO_7 2 2 L 9TO_MIDDLE_L
# Find the middle
9TO_MIDDLE_L 1 1 L 9TO_MIDDLE_L
9TO_MIDDLE_L 0 0 L 9TO_MIDDLE_L
9TO_MIDDLE_L 7 7 L 9TO_MIDDLE_L
9TO_MIDDLE_L 2 2 L 9TO_MIDDLE_L
9TO_MIDDLE_L 3 3 L 9TO_MIDDLE_L
9TO_MIDDLE_L 4 4 L 9TO_MIDDLE_L
9TO_MIDDLE_L 5 5 L 9TO_S1_END
# To end of S1
9TO_S1_END 6 6 L 9TO_S2_END
# To end of S2
9TO_S2_END 0 0 L 9TO_S2_END
9TO_S2_END 1 1 L 9TO_S2_END
9TO_S2_END 6 6 L 9TO_S3_END
# To end of S3
9TO_S3_END 0 0 L 9TO_S3_END
9TO_S3_END 1 1 L 9TO_S3_END
9TO_S3_END 6 6 L 9TO_S4_END
# To end of S4
9TO_S4_END 0 0 L 9TO_S4_END
9TO_S4_END 1 1 L 9TO_S4_END
9TO_S4_END 6 6 L 9TO_S5_END
# To end of S5
9TO_S5_END 0 0 L 9TO_S5_END
9TO_S5_END 1 1 L 9TO_S5_END
9TO_S5_END 6 6 L 9COPY_VALUE
# Move Left until start of S5
# Copy the first non-7/8 value
9COPY_VALUE 0 7 R 9MOVE_ZERO
9COPY_VALUE 1 8 R 9MOVE_ONE
9COPY_VALUE 7 7 L 9COPY_VALUE
9COPY_VALUE 8 8 L 9COPY_VALUE
9COPY_VALUE 6 6 R 9RESTORE_VALUE

# Move a 0 to number A
9MOVE_ZERO 0 0 R 9MOVE_ZERO
9MOVE_ZERO 1 1 R 9MOVE_ZERO
9MOVE_ZERO 2 2 R 9MOVE_ZERO
9MOVE_ZERO 3 3 L 9MOVE_ZERO_2
9MOVE_ZERO 4 4 R 9MOVE_ZERO
9MOVE_ZERO 5 5 R 9MOVE_ZERO
9MOVE_ZERO 6 6 R 9MOVE_ZERO
9MOVE_ZERO 7 7 R 9MOVE_ZERO
9MOVE_ZERO 8 8 R 9MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
9MOVE_ZERO_2 0 0 L 9MOVE_ZERO_2
9MOVE_ZERO_2 1 1 L 9MOVE_ZERO_2
9MOVE_ZERO_2 7 0 S 9TO_MIDDLE_L
# Move a 1 to number A
9MOVE_ONE 0 0 R 9MOVE_ONE
9MOVE_ONE 1 1 R 9MOVE_ONE
9MOVE_ONE 2 2 R 9MOVE_ONE
9MOVE_ONE 3 3 L 9MOVE_ONE_2
9MOVE_ONE 4 4 R 9MOVE_ONE
9MOVE_ONE 5 5 R 9MOVE_ONE
9MOVE_ONE 6 6 R 9MOVE_ONE
9MOVE_ONE 7 7 R 9MOVE_ONE
9MOVE_ONE 8 8 R 9MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
9MOVE_ONE_2 0 0 L 9MOVE_ONE_2
9MOVE_ONE_2 1 1 L 9MOVE_ONE_2
9MOVE_ONE_2 7 1 S 9TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
9RESTORE_VALUE 7 0 R 9RESTORE_VALUE
9RESTORE_VALUE 8 1 R 9RESTORE_VALUE
9RESTORE_VALUE 6 6 S 9TO_START
# Go back to the start
9TO_START 0 0 R 9TO_START
9TO_START 1 1 R 9TO_START
9TO_START 6 6 R 9TO_START
9TO_START 5 5 S 9END



#
### LOAD S6, B
#


9END 5 5 S 10START

# Start of loading
10START 5 5 R 10TO_B_END_R
# To end of number B
10TO_B_END_R 0 0 R 10TO_B_END_R
10TO_B_END_R 1 1 R 10TO_B_END_R
10TO_B_END_R 2 2 R 10TO_B_END_R
10TO_B_END_R 3 3 R 10TO_B_END_R
10TO_B_END_R 4 4 L 10SET_TO_7

# Move to the start of number B, and set all values to 7
10SET_TO_7 0 7 L 10SET_TO_7
10SET_TO_7 1 7 L 10SET_TO_7
10SET_TO_7 3 3 L 10TO_MIDDLE_L
# Find the middle
10TO_MIDDLE_L 1 1 L 10TO_MIDDLE_L
10TO_MIDDLE_L 0 0 L 10TO_MIDDLE_L
10TO_MIDDLE_L 7 7 L 10TO_MIDDLE_L
10TO_MIDDLE_L 2 2 L 10TO_MIDDLE_L
10TO_MIDDLE_L 3 3 L 10TO_MIDDLE_L
10TO_MIDDLE_L 4 4 L 10TO_MIDDLE_L
10TO_MIDDLE_L 5 5 L 10TO_S1_END
# To end of S1
10TO_S1_END 6 6 L 10TO_S2_END
# To end of S2
10TO_S2_END 0 0 L 10TO_S2_END
10TO_S2_END 1 1 L 10TO_S2_END
10TO_S2_END 6 6 L 10TO_S3_END
# To end of S3
10TO_S3_END 0 0 L 10TO_S3_END
10TO_S3_END 1 1 L 10TO_S3_END
10TO_S3_END 6 6 L 10TO_S4_END
# To end of S4
10TO_S4_END 0 0 L 10TO_S4_END
10TO_S4_END 1 1 L 10TO_S4_END
10TO_S4_END 6 6 L 10TO_S5_END
# To end of S5
10TO_S5_END 0 0 L 10TO_S5_END
10TO_S5_END 1 1 L 10TO_S5_END
10TO_S5_END 6 6 L 10TO_S6_END
# To end of S6
10TO_S6_END 0 0 L 10TO_S6_END
10TO_S6_END 1 1 L 10TO_S6_END
10TO_S6_END 6 6 L 10COPY_VALUE
# Move Left until start of S6
# Copy the first non-7/8 value
10COPY_VALUE 0 7 R 10MOVE_ZERO
10COPY_VALUE 1 8 R 10MOVE_ONE
10COPY_VALUE 7 7 L 10COPY_VALUE
10COPY_VALUE 8 8 L 10COPY_VALUE
10COPY_VALUE 6 6 R 10RESTORE_VALUE

# Move a 0 to number B
10MOVE_ZERO 0 0 R 10MOVE_ZERO
10MOVE_ZERO 1 1 R 10MOVE_ZERO
10MOVE_ZERO 2 2 R 10MOVE_ZERO
10MOVE_ZERO 3 3 R 10MOVE_ZERO
10MOVE_ZERO 4 4 L 10MOVE_ZERO_2
10MOVE_ZERO 5 5 R 10MOVE_ZERO
10MOVE_ZERO 6 6 R 10MOVE_ZERO
10MOVE_ZERO 7 7 R 10MOVE_ZERO
10MOVE_ZERO 8 8 R 10MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
10MOVE_ZERO_2 0 0 L 10MOVE_ZERO_2
10MOVE_ZERO_2 1 1 L 10MOVE_ZERO_2
10MOVE_ZERO_2 7 0 S 10TO_MIDDLE_L
# Move a 1 to number B
10MOVE_ONE 0 0 R 10MOVE_ONE
10MOVE_ONE 1 1 R 10MOVE_ONE
10MOVE_ONE 2 2 R 10MOVE_ONE
10MOVE_ONE 3 3 R 10MOVE_ONE
10MOVE_ONE 4 4 L 10MOVE_ONE_2
10MOVE_ONE 5 5 R 10MOVE_ONE
10MOVE_ONE 6 6 R 10MOVE_ONE
10MOVE_ONE 7 7 R 10MOVE_ONE
10MOVE_ONE 8 8 R 10MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
10MOVE_ONE_2 0 0 L 10MOVE_ONE_2
10MOVE_ONE_2 1 1 L 10MOVE_ONE_2
10MOVE_ONE_2 7 1 S 10TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
10RESTORE_VALUE 7 0 R 10RESTORE_VALUE
10RESTORE_VALUE 8 1 R 10RESTORE_VALUE
10RESTORE_VALUE 6 6 S 10TO_START
# Go back to the start
10TO_START 0 0 R 10TO_START
10TO_START 1 1 R 10TO_START
10TO_START 6 6 R 10TO_START
10TO_START 5 5 S 10END



#
### ADD
#


10END 5 5 S 11START

# Start of the addition program
11START 5 5 R 11FIND_B_END

# Find the end of the second number
11FIND_B_END 0 0 R 11FIND_B_END
11FIND_B_END 1 1 R 11FIND_B_END
11FIND_B_END 2 2 R 11FIND_B_END
11FIND_B_END 3 3 R 11FIND_B_END
11FIND_B_END 7 7 R 11FIND_B_END
11FIND_B_END 8 8 R 11FIND_B_END
11FIND_B_END 4 4 L 11ADD_DIGIT

# Find first non-added digit
11ADD_DIGIT 7 7 L 11ADD_DIGIT
11ADD_DIGIT 8 8 L 11ADD_DIGIT
11ADD_DIGIT 0 7 L 11ADD_DIGIT_ZERO
11ADD_DIGIT 1 7 L 11ADD_DIGIT_ONE
11ADD_DIGIT 3 3 R 11RESTORE

# Add a zero
11ADD_DIGIT_ZERO 0 0 L 11ADD_DIGIT_ZERO
11ADD_DIGIT_ZERO 1 1 L 11ADD_DIGIT_ZERO
11ADD_DIGIT_ZERO 3 3 L 11ADD_DIGIT_ZERO_1
11ADD_DIGIT_ZERO_1 7 7 L 11ADD_DIGIT_ZERO_1
11ADD_DIGIT_ZERO_1 8 8 L 11ADD_DIGIT_ZERO_1
11ADD_DIGIT_ZERO_1 0 7 L 11FIND_B_END
11ADD_DIGIT_ZERO_1 1 8 L 11FIND_B_END

# Add a one
11ADD_DIGIT_ONE 0 0 L 11ADD_DIGIT_ONE
11ADD_DIGIT_ONE 1 1 L 11ADD_DIGIT_ONE
11ADD_DIGIT_ONE 3 3 L 11ADD_DIGIT_ONE_1
11ADD_DIGIT_ONE_1 7 7 L 11ADD_DIGIT_ONE_1
11ADD_DIGIT_ONE_1 8 8 L 11ADD_DIGIT_ONE_1
11ADD_DIGIT_ONE_1 0 8 L 11FIND_B_END
11ADD_DIGIT_ONE_1 1 7 L 11ADD_DIGIT_ONE_2

11ADD_DIGIT_ONE_2 0 1 R 11FIND_B_END
11ADD_DIGIT_ONE_2 1 0 L 11ADD_DIGIT_ONE_2

# Return to the middle of the tape
11RESTORE 7 0 R 11RESTORE
11RESTORE 8 1 R 11RESTORE
11RESTORE 4 4 L 11RESTORE_1

11RESTORE_1 0 0 L 11RESTORE_1
11RESTORE_1 1 1 L 11RESTORE_1
11RESTORE_1 2 2 L 11RESTORE_1
11RESTORE_1 3 3 L 11RESTORE_1
11RESTORE_1 7 0 L 11RESTORE_1
11RESTORE_1 8 1 L 11RESTORE_1
11RESTORE_1 5 5 S 11END



#
### STORE A, S7
#


11END 5 5 S 12START

12START 5 5 L 12TO_S1_END
# To end of S1
12TO_S1_END 6 6 L 12TO_S2_END
# To end of S2
12TO_S2_END 0 0 L 12TO_S2_END
12TO_S2_END 1 1 L 12TO_S2_END
12TO_S2_END 6 6 L 12TO_S3_END
# To end of S3
12TO_S3_END 0 0 L 12TO_S3_END
12TO_S3_END 1 1 L 12TO_S3_END
12TO_S3_END 6 6 L 12TO_S4_END
# To end of S4
12TO_S4_END 0 0 L 12TO_S4_END
12TO_S4_END 1 1 L 12TO_S4_END
12TO_S4_END 6 6 L 12TO_S5_END
# To end of S5
12TO_S5_END 0 0 L 12TO_S5_END
12TO_S5_END 1 1 L 12TO_S5_END
12TO_S5_END 6 6 L 12TO_S6_END
# To end of S6
12TO_S6_END 0 0 L 12TO_S6_END
12TO_S6_END 1 1 L 12TO_S6_END
12TO_S6_END 6 6 L 12TO_S7_END
# To end of S7
12TO_S7_END 0 0 L 12TO_S7_END
12TO_S7_END 1 1 L 12TO_S7_END
12TO_S7_END 6 6 L 12SET_TO_7

# Set all the values to 7 untill the start of S1
12SET_TO_7 0 7 L 12SET_TO_7
12SET_TO_7 1 7 L 12SET_TO_7
12SET_TO_7 6 9 R 12TO_MIDDLE_R
# Find the middle
12TO_MIDDLE_R 1 1 R 12TO_MIDDLE_R
12TO_MIDDLE_R 0 0 R 12TO_MIDDLE_R
12TO_MIDDLE_R 7 7 R 12TO_MIDDLE_R
12TO_MIDDLE_R 2 2 R 12TO_MIDDLE_R
12TO_MIDDLE_R 6 6 R 12TO_MIDDLE_R
12TO_MIDDLE_R 5 5 R 12COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
12COPY_VALUE 0 7 L 12MOVE_ZERO
12COPY_VALUE 1 8 L 12MOVE_ONE
12COPY_VALUE 2 2 R 12COPY_VALUE
12COPY_VALUE 7 7 R 12COPY_VALUE
12COPY_VALUE 8 8 R 12COPY_VALUE
12COPY_VALUE 3 3 L 12RESTORE_VALUE

# Move a 0 to number 9
12MOVE_ZERO 0 0 L 12MOVE_ZERO
12MOVE_ZERO 1 1 L 12MOVE_ZERO
12MOVE_ZERO 2 2 L 12MOVE_ZERO
12MOVE_ZERO 3 3 L 12MOVE_ZERO
12MOVE_ZERO 4 4 L 12MOVE_ZERO
12MOVE_ZERO 9 9 R 12MOVE_ZERO_2
12MOVE_ZERO 5 5 L 12MOVE_ZERO
12MOVE_ZERO 6 6 L 12MOVE_ZERO
12MOVE_ZERO 7 7 L 12MOVE_ZERO
12MOVE_ZERO 8 8 L 12MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
12MOVE_ZERO_2 0 0 R 12MOVE_ZERO_2
12MOVE_ZERO_2 1 1 R 12MOVE_ZERO_2
12MOVE_ZERO_2 7 0 S 12TO_MIDDLE_R
# Move a 1 to number 9
12MOVE_ONE 0 0 L 12MOVE_ONE
12MOVE_ONE 1 1 L 12MOVE_ONE
12MOVE_ONE 2 2 L 12MOVE_ONE
12MOVE_ONE 3 3 L 12MOVE_ONE
12MOVE_ONE 4 4 L 12MOVE_ONE
12MOVE_ONE 9 9 R 12MOVE_ONE_2
12MOVE_ONE 5 5 L 12MOVE_ONE
12MOVE_ONE 6 6 L 12MOVE_ONE
12MOVE_ONE 7 7 L 12MOVE_ONE
12MOVE_ONE 8 8 L 12MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
12MOVE_ONE_2 0 0 R 12MOVE_ONE_2
12MOVE_ONE_2 1 1 R 12MOVE_ONE_2
12MOVE_ONE_2 7 1 S 12TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
12RESTORE_VALUE 7 0 L 12RESTORE_VALUE
12RESTORE_VALUE 8 1 L 12RESTORE_VALUE
12RESTORE_VALUE 2 2 L 12RESET_STORAGE_MARKER
# Reset 9 to 6
12RESET_STORAGE_MARKER 0 0 L 12RESET_STORAGE_MARKER
12RESET_STORAGE_MARKER 1 1 L 12RESET_STORAGE_MARKER
12RESET_STORAGE_MARKER 5 5 L 12RESET_STORAGE_MARKER
12RESET_STORAGE_MARKER 6 6 L 12RESET_STORAGE_MARKER
12RESET_STORAGE_MARKER 9 6 R 12RETURN_TO_MIDDLE
# Return to middle
12RETURN_TO_MIDDLE 0 0 R 12RETURN_TO_MIDDLE
12RETURN_TO_MIDDLE 1 1 R 12RETURN_TO_MIDDLE
12RETURN_TO_MIDDLE 6 6 R 12RETURN_TO_MIDDLE
12RETURN_TO_MIDDLE 5 5 S 12END

12END 5 5 S END