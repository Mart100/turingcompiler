6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 !5 2 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 10

# Original program

#program let a = 255;
#program let c = 0;
#program while (a > 0) {
#program     a = a - 1;
#program     c = c + 1;
#program };
#program return c;

#Code does not include main function


START 5 5 S 0END

#
#asm SET S2 255
#


0END 5 5 S 1START

1START 5 5 L 1TO_2_S1
#GO_TO_Sn: 2

1TO_2_S1 6 6 L 1TO_2_S2
1TO_2_S1 9 9 L 1TO_2_S2
1TO_2_S2 0 0 L 1TO_2_S2
1TO_2_S2 1 1 L 1TO_2_S2
1TO_2_S2 7 7 L 1TO_2_S2
1TO_2_S2 8 8 L 1TO_2_S2
1TO_2_S2 6 6 L 1RESET_S
1TO_2_S2 9 6 L 1RESET_S

# Reset to 0
1RESET_S 0 0 L 1RESET_S
1RESET_S 1 0 L 1RESET_S
1RESET_S 6 6 R 1SET_1D
1SET_1D 0 1 R 1SET_2D
1SET_2D 0 1 R 1SET_3D
1SET_3D 0 1 R 1SET_4D
1SET_4D 0 1 R 1SET_5D
1SET_5D 0 1 R 1SET_6D
1SET_6D 0 1 R 1SET_7D
1SET_7D 0 1 R 1SET_8D
1SET_8D 0 1 R 1RETURN

# Return to middle
1RETURN 0 0 R 1RETURN
1RETURN 1 1 R 1RETURN
1RETURN 6 6 R 1RETURN
1RETURN 5 5 S 1END


#
#asm SET S3 0
#


1END 5 5 S 2START

2START 5 5 L 2TO_3_S1
#GO_TO_Sn: 3

2TO_3_S1 6 6 L 2TO_3_S2
2TO_3_S1 9 9 L 2TO_3_S2
2TO_3_S2 0 0 L 2TO_3_S2
2TO_3_S2 1 1 L 2TO_3_S2
2TO_3_S2 7 7 L 2TO_3_S2
2TO_3_S2 8 8 L 2TO_3_S2
2TO_3_S2 6 6 L 2TO_3_S3
2TO_3_S2 9 9 L 2TO_3_S3
2TO_3_S3 0 0 L 2TO_3_S3
2TO_3_S3 1 1 L 2TO_3_S3
2TO_3_S3 7 7 L 2TO_3_S3
2TO_3_S3 8 8 L 2TO_3_S3
2TO_3_S3 6 6 L 2RESET_S
2TO_3_S3 9 6 L 2RESET_S

# Reset to 0
2RESET_S 0 0 L 2RESET_S
2RESET_S 1 0 L 2RESET_S
2RESET_S 6 6 R 2SET_1D
2SET_1D 0 0 R 2SET_2D
2SET_2D 0 0 R 2SET_3D
2SET_3D 0 0 R 2SET_4D
2SET_4D 0 0 R 2SET_5D
2SET_5D 0 0 R 2SET_6D
2SET_6D 0 0 R 2SET_7D
2SET_7D 0 0 R 2SET_8D
2SET_8D 0 0 R 2RETURN

# Return to middle
2RETURN 0 0 R 2RETURN
2RETURN 1 1 R 2RETURN
2RETURN 6 6 R 2RETURN
2RETURN 5 5 S 2END


#
#asm L3:
#

LABEL_L3 5 5 S 2END

#
#asm SET S6 0
#


2END 5 5 S 3START

3START 5 5 L 3TO_6_S1
#GO_TO_Sn: 6

3TO_6_S1 6 6 L 3TO_6_S2
3TO_6_S1 9 9 L 3TO_6_S2
3TO_6_S2 0 0 L 3TO_6_S2
3TO_6_S2 1 1 L 3TO_6_S2
3TO_6_S2 7 7 L 3TO_6_S2
3TO_6_S2 8 8 L 3TO_6_S2
3TO_6_S2 6 6 L 3TO_6_S3
3TO_6_S2 9 9 L 3TO_6_S3
3TO_6_S3 0 0 L 3TO_6_S3
3TO_6_S3 1 1 L 3TO_6_S3
3TO_6_S3 7 7 L 3TO_6_S3
3TO_6_S3 8 8 L 3TO_6_S3
3TO_6_S3 6 6 L 3TO_6_S4
3TO_6_S3 9 9 L 3TO_6_S4
3TO_6_S4 0 0 L 3TO_6_S4
3TO_6_S4 1 1 L 3TO_6_S4
3TO_6_S4 7 7 L 3TO_6_S4
3TO_6_S4 8 8 L 3TO_6_S4
3TO_6_S4 6 6 L 3TO_6_S5
3TO_6_S4 9 9 L 3TO_6_S5
3TO_6_S5 0 0 L 3TO_6_S5
3TO_6_S5 1 1 L 3TO_6_S5
3TO_6_S5 7 7 L 3TO_6_S5
3TO_6_S5 8 8 L 3TO_6_S5
3TO_6_S5 6 6 L 3TO_6_S6
3TO_6_S5 9 9 L 3TO_6_S6
3TO_6_S6 0 0 L 3TO_6_S6
3TO_6_S6 1 1 L 3TO_6_S6
3TO_6_S6 7 7 L 3TO_6_S6
3TO_6_S6 8 8 L 3TO_6_S6
3TO_6_S6 6 6 L 3RESET_S
3TO_6_S6 9 6 L 3RESET_S

# Reset to 0
3RESET_S 0 0 L 3RESET_S
3RESET_S 1 0 L 3RESET_S
3RESET_S 6 6 R 3SET_1D
3SET_1D 0 0 R 3SET_2D
3SET_2D 0 0 R 3SET_3D
3SET_3D 0 0 R 3SET_4D
3SET_4D 0 0 R 3SET_5D
3SET_5D 0 0 R 3SET_6D
3SET_6D 0 0 R 3SET_7D
3SET_7D 0 0 R 3SET_8D
3SET_8D 0 0 R 3RETURN

# Return to middle
3RETURN 0 0 R 3RETURN
3RETURN 1 1 R 3RETURN
3RETURN 6 6 R 3RETURN
3RETURN 5 5 S 3END


#
#asm LOAD S2 A
#


3END 5 5 S 4START

# Start of loading
4START 5 5 R 4TO_A_END_R
# To end of number A
4TO_A_END_R 0 0 R 4TO_A_END_R
4TO_A_END_R 1 1 R 4TO_A_END_R
4TO_A_END_R 2 2 R 4TO_A_END_R
4TO_A_END_R 3 3 L 4SET_TO_7

# Move to the start of number A, and set all values to 7
4SET_TO_7 0 7 L 4SET_TO_7
4SET_TO_7 1 7 L 4SET_TO_7
4SET_TO_7 2 2 L 4TO_MIDDLE_L
# Find the middle
4TO_MIDDLE_L 1 1 L 4TO_MIDDLE_L
4TO_MIDDLE_L 0 0 L 4TO_MIDDLE_L
4TO_MIDDLE_L 7 7 L 4TO_MIDDLE_L
4TO_MIDDLE_L 2 2 L 4TO_MIDDLE_L
4TO_MIDDLE_L 3 3 L 4TO_MIDDLE_L
4TO_MIDDLE_L 4 4 L 4TO_MIDDLE_L
4TO_MIDDLE_L 5 5 L 4TO_2_S1
#GO_TO_Sn: 2

4TO_2_S1 6 6 L 4TO_2_S2
4TO_2_S1 9 9 L 4TO_2_S2
4TO_2_S2 0 0 L 4TO_2_S2
4TO_2_S2 1 1 L 4TO_2_S2
4TO_2_S2 7 7 L 4TO_2_S2
4TO_2_S2 8 8 L 4TO_2_S2
4TO_2_S2 6 6 L 4COPY_VALUE
4TO_2_S2 9 6 L 4COPY_VALUE
# Move Left until start of S2
# Copy the first non-7/8 value
4COPY_VALUE 0 7 R 4MOVE_ZERO
4COPY_VALUE 1 8 R 4MOVE_ONE
4COPY_VALUE 7 7 L 4COPY_VALUE
4COPY_VALUE 8 8 L 4COPY_VALUE
4COPY_VALUE 6 6 R 4RESTORE_VALUE

# Move a 0 to number A
4MOVE_ZERO 0 0 R 4MOVE_ZERO
4MOVE_ZERO 1 1 R 4MOVE_ZERO
4MOVE_ZERO 2 2 R 4MOVE_ZERO
4MOVE_ZERO 3 3 L 4MOVE_ZERO_2
4MOVE_ZERO 4 4 R 4MOVE_ZERO
4MOVE_ZERO 5 5 R 4MOVE_ZERO
4MOVE_ZERO 6 6 R 4MOVE_ZERO
4MOVE_ZERO 7 7 R 4MOVE_ZERO
4MOVE_ZERO 8 8 R 4MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
4MOVE_ZERO_2 0 0 L 4MOVE_ZERO_2
4MOVE_ZERO_2 1 1 L 4MOVE_ZERO_2
4MOVE_ZERO_2 7 0 S 4TO_MIDDLE_L
# Move a 1 to number A
4MOVE_ONE 0 0 R 4MOVE_ONE
4MOVE_ONE 1 1 R 4MOVE_ONE
4MOVE_ONE 2 2 R 4MOVE_ONE
4MOVE_ONE 3 3 L 4MOVE_ONE_2
4MOVE_ONE 4 4 R 4MOVE_ONE
4MOVE_ONE 5 5 R 4MOVE_ONE
4MOVE_ONE 6 6 R 4MOVE_ONE
4MOVE_ONE 7 7 R 4MOVE_ONE
4MOVE_ONE 8 8 R 4MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
4MOVE_ONE_2 0 0 L 4MOVE_ONE_2
4MOVE_ONE_2 1 1 L 4MOVE_ONE_2
4MOVE_ONE_2 7 1 S 4TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
4RESTORE_VALUE 7 0 R 4RESTORE_VALUE
4RESTORE_VALUE 8 1 R 4RESTORE_VALUE
4RESTORE_VALUE 6 6 S 4TO_START
# Go back to the start
4TO_START 0 0 R 4TO_START
4TO_START 1 1 R 4TO_START
4TO_START 6 6 R 4TO_START
4TO_START 5 5 S 4END



#
#asm LOAD S6 B
#


4END 5 5 S 5START

# Start of loading
5START 5 5 R 5TO_B_END_R
# To end of number B
5TO_B_END_R 0 0 R 5TO_B_END_R
5TO_B_END_R 1 1 R 5TO_B_END_R
5TO_B_END_R 2 2 R 5TO_B_END_R
5TO_B_END_R 3 3 R 5TO_B_END_R
5TO_B_END_R 4 4 L 5SET_TO_7

# Move to the start of number B, and set all values to 7
5SET_TO_7 0 7 L 5SET_TO_7
5SET_TO_7 1 7 L 5SET_TO_7
5SET_TO_7 3 3 L 5TO_MIDDLE_L
# Find the middle
5TO_MIDDLE_L 1 1 L 5TO_MIDDLE_L
5TO_MIDDLE_L 0 0 L 5TO_MIDDLE_L
5TO_MIDDLE_L 7 7 L 5TO_MIDDLE_L
5TO_MIDDLE_L 2 2 L 5TO_MIDDLE_L
5TO_MIDDLE_L 3 3 L 5TO_MIDDLE_L
5TO_MIDDLE_L 4 4 L 5TO_MIDDLE_L
5TO_MIDDLE_L 5 5 L 5TO_6_S1
#GO_TO_Sn: 6

5TO_6_S1 6 6 L 5TO_6_S2
5TO_6_S1 9 9 L 5TO_6_S2
5TO_6_S2 0 0 L 5TO_6_S2
5TO_6_S2 1 1 L 5TO_6_S2
5TO_6_S2 7 7 L 5TO_6_S2
5TO_6_S2 8 8 L 5TO_6_S2
5TO_6_S2 6 6 L 5TO_6_S3
5TO_6_S2 9 9 L 5TO_6_S3
5TO_6_S3 0 0 L 5TO_6_S3
5TO_6_S3 1 1 L 5TO_6_S3
5TO_6_S3 7 7 L 5TO_6_S3
5TO_6_S3 8 8 L 5TO_6_S3
5TO_6_S3 6 6 L 5TO_6_S4
5TO_6_S3 9 9 L 5TO_6_S4
5TO_6_S4 0 0 L 5TO_6_S4
5TO_6_S4 1 1 L 5TO_6_S4
5TO_6_S4 7 7 L 5TO_6_S4
5TO_6_S4 8 8 L 5TO_6_S4
5TO_6_S4 6 6 L 5TO_6_S5
5TO_6_S4 9 9 L 5TO_6_S5
5TO_6_S5 0 0 L 5TO_6_S5
5TO_6_S5 1 1 L 5TO_6_S5
5TO_6_S5 7 7 L 5TO_6_S5
5TO_6_S5 8 8 L 5TO_6_S5
5TO_6_S5 6 6 L 5TO_6_S6
5TO_6_S5 9 9 L 5TO_6_S6
5TO_6_S6 0 0 L 5TO_6_S6
5TO_6_S6 1 1 L 5TO_6_S6
5TO_6_S6 7 7 L 5TO_6_S6
5TO_6_S6 8 8 L 5TO_6_S6
5TO_6_S6 6 6 L 5COPY_VALUE
5TO_6_S6 9 6 L 5COPY_VALUE
# Move Left until start of S6
# Copy the first non-7/8 value
5COPY_VALUE 0 7 R 5MOVE_ZERO
5COPY_VALUE 1 8 R 5MOVE_ONE
5COPY_VALUE 7 7 L 5COPY_VALUE
5COPY_VALUE 8 8 L 5COPY_VALUE
5COPY_VALUE 6 6 R 5RESTORE_VALUE

# Move a 0 to number B
5MOVE_ZERO 0 0 R 5MOVE_ZERO
5MOVE_ZERO 1 1 R 5MOVE_ZERO
5MOVE_ZERO 2 2 R 5MOVE_ZERO
5MOVE_ZERO 3 3 R 5MOVE_ZERO
5MOVE_ZERO 4 4 L 5MOVE_ZERO_2
5MOVE_ZERO 5 5 R 5MOVE_ZERO
5MOVE_ZERO 6 6 R 5MOVE_ZERO
5MOVE_ZERO 7 7 R 5MOVE_ZERO
5MOVE_ZERO 8 8 R 5MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
5MOVE_ZERO_2 0 0 L 5MOVE_ZERO_2
5MOVE_ZERO_2 1 1 L 5MOVE_ZERO_2
5MOVE_ZERO_2 7 0 S 5TO_MIDDLE_L
# Move a 1 to number B
5MOVE_ONE 0 0 R 5MOVE_ONE
5MOVE_ONE 1 1 R 5MOVE_ONE
5MOVE_ONE 2 2 R 5MOVE_ONE
5MOVE_ONE 3 3 R 5MOVE_ONE
5MOVE_ONE 4 4 L 5MOVE_ONE_2
5MOVE_ONE 5 5 R 5MOVE_ONE
5MOVE_ONE 6 6 R 5MOVE_ONE
5MOVE_ONE 7 7 R 5MOVE_ONE
5MOVE_ONE 8 8 R 5MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
5MOVE_ONE_2 0 0 L 5MOVE_ONE_2
5MOVE_ONE_2 1 1 L 5MOVE_ONE_2
5MOVE_ONE_2 7 1 S 5TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
5RESTORE_VALUE 7 0 R 5RESTORE_VALUE
5RESTORE_VALUE 8 1 R 5RESTORE_VALUE
5RESTORE_VALUE 6 6 S 5TO_START
# Go back to the start
5TO_START 0 0 R 5TO_START
5TO_START 1 1 R 5TO_START
5TO_START 6 6 R 5TO_START
5TO_START 5 5 S 5END



#
#asm SUB_SAFE
#


5END 5 5 S 6START

# Start of the subtraction program
6START 5 5 R 6FIND_B_END

# Find the end of the second number
6FIND_B_END 0 0 R 6FIND_B_END
6FIND_B_END 1 1 R 6FIND_B_END
6FIND_B_END 2 2 R 6FIND_B_END
6FIND_B_END 3 3 R 6FIND_B_END
6FIND_B_END 7 7 R 6FIND_B_END
6FIND_B_END 8 8 R 6FIND_B_END
6FIND_B_END 4 4 L 6SUB_DIGIT

# Find first non-subtracted digit
6SUB_DIGIT 7 7 L 6SUB_DIGIT
6SUB_DIGIT 8 8 L 6SUB_DIGIT
6SUB_DIGIT 0 7 L 6SUB_DIGIT_ZERO
6SUB_DIGIT 1 7 L 6SUB_DIGIT_ONE
6SUB_DIGIT 3 3 R 6RESTORE_1

# Subtract a zero
6SUB_DIGIT_ZERO 0 0 L 6SUB_DIGIT_ZERO
6SUB_DIGIT_ZERO 1 1 L 6SUB_DIGIT_ZERO
6SUB_DIGIT_ZERO 3 3 L 6SUB_DIGIT_ZERO_1

6SUB_DIGIT_ZERO_1 7 7 L 6SUB_DIGIT_ZERO_1
6SUB_DIGIT_ZERO_1 8 8 L 6SUB_DIGIT_ZERO_1
6SUB_DIGIT_ZERO_1 0 7 L 6FIND_B_END
6SUB_DIGIT_ZERO_1 1 8 R 6FIND_B_END

# Subtract a one
6SUB_DIGIT_ONE 0 0 L 6SUB_DIGIT_ONE
6SUB_DIGIT_ONE 1 1 L 6SUB_DIGIT_ONE
6SUB_DIGIT_ONE 3 3 L 6SUB_DIGIT_ONE_1

6SUB_DIGIT_ONE_1 7 7 L 6SUB_DIGIT_ONE_1
6SUB_DIGIT_ONE_1 8 8 L 6SUB_DIGIT_ONE_1
6SUB_DIGIT_ONE_1 0 8 L 6SUB_DIGIT_ONE_2
6SUB_DIGIT_ONE_1 1 7 R 6FIND_B_END

6SUB_DIGIT_ONE_2 1 0 R 6FIND_B_END
6SUB_DIGIT_ONE_2 2 2 R 6RESTORE
6SUB_DIGIT_ONE_2 0 1 L 6SUB_DIGIT_ONE_2

# Return to the middle of the tape
6RESTORE 0 0 R 6RESTORE
6RESTORE 1 0 R 6RESTORE
6RESTORE 7 0 R 6RESTORE
6RESTORE 8 0 R 6RESTORE
6RESTORE 3 3 R 6RESTORE_1

6RESTORE_1 0 0 R 6RESTORE_1
6RESTORE_1 1 1 R 6RESTORE_1
6RESTORE_1 7 7 R 6RESTORE_1
6RESTORE_1 8 8 R 6RESTORE_1
6RESTORE_1 4 4 L 6RESTORE_2

6RESTORE_2 0 0 L 6RESTORE_2
6RESTORE_2 1 1 L 6RESTORE_2
6RESTORE_2 2 2 L 6RESTORE_2
6RESTORE_2 3 3 L 6RESTORE_2
6RESTORE_2 7 0 L 6RESTORE_2
6RESTORE_2 8 1 L 6RESTORE_2
6RESTORE_2 5 5 S 6END


#
#asm ISZERO
#


6END 5 5 S 7START

# Start of the ISZERO program
7START 5 5 R 7START
7START 2 2 R 7CHECK_A

# Check for ones in A
7CHECK_A 0 0 R 7CHECK_A
7CHECK_A 1 0 R 7FOUND_ONE
7CHECK_A 3 3 L 7CHECK_A_1

# no ones found in A, set last digit of A to 1
7CHECK_A_1 0 1 L 7RETURN

# Found a 1 in A
7FOUND_ONE 0 0 R 7FOUND_ONE
7FOUND_ONE 1 0 R 7FOUND_ONE
7FOUND_ONE 3 3 L 7FOUND_ONE_1

# Found a 1 in A, return
7FOUND_ONE_1 0 0 L 7RETURN

# Return to middle
7RETURN 0 0 L 7RETURN
7RETURN 1 1 L 7RETURN
7RETURN 2 2 L 7RETURN
7RETURN 5 5 S 7END


#
#asm NOT
#


7END 5 5 S 8START

# Start of NOT program
8START 5 5 R 8FIND_A_END

# Find end of A
8FIND_A_END 0 0 R 8FIND_A_END
8FIND_A_END 1 1 R 8FIND_A_END
8FIND_A_END 2 2 R 8FIND_A_END
8FIND_A_END 3 3 L 8FLIP_DIGIT

# Flip the last digit of A
8FLIP_DIGIT 0 1 L 8RETURN
8FLIP_DIGIT 1 0 L 8RETURN

# Return to the middle of the tape
8RETURN 0 0 L 8RETURN
8RETURN 1 1 L 8RETURN
8RETURN 2 2 L 8RETURN
8RETURN 5 5 S 8END



#
#asm STORE S5 A
#


8END 5 5 S 9START

9START 5 5 L 9TO_5_S1
#GO_TO_Sn: 5

9TO_5_S1 6 6 L 9TO_5_S2
9TO_5_S1 9 9 L 9TO_5_S2
9TO_5_S2 0 0 L 9TO_5_S2
9TO_5_S2 1 1 L 9TO_5_S2
9TO_5_S2 7 7 L 9TO_5_S2
9TO_5_S2 8 8 L 9TO_5_S2
9TO_5_S2 6 6 L 9TO_5_S3
9TO_5_S2 9 9 L 9TO_5_S3
9TO_5_S3 0 0 L 9TO_5_S3
9TO_5_S3 1 1 L 9TO_5_S3
9TO_5_S3 7 7 L 9TO_5_S3
9TO_5_S3 8 8 L 9TO_5_S3
9TO_5_S3 6 6 L 9TO_5_S4
9TO_5_S3 9 9 L 9TO_5_S4
9TO_5_S4 0 0 L 9TO_5_S4
9TO_5_S4 1 1 L 9TO_5_S4
9TO_5_S4 7 7 L 9TO_5_S4
9TO_5_S4 8 8 L 9TO_5_S4
9TO_5_S4 6 6 L 9TO_5_S5
9TO_5_S4 9 9 L 9TO_5_S5
9TO_5_S5 0 0 L 9TO_5_S5
9TO_5_S5 1 1 L 9TO_5_S5
9TO_5_S5 7 7 L 9TO_5_S5
9TO_5_S5 8 8 L 9TO_5_S5
9TO_5_S5 6 9 L 9SET_TO_7
9TO_5_S5 9 9 L 9SET_TO_7

# Set all the values to 7 untill the start of S1
9SET_TO_7 0 7 L 9SET_TO_7
9SET_TO_7 1 7 L 9SET_TO_7
9SET_TO_7 6 6 R 9TO_MIDDLE_R
# Find the middle
9TO_MIDDLE_R 1 1 R 9TO_MIDDLE_R
9TO_MIDDLE_R 0 0 R 9TO_MIDDLE_R
9TO_MIDDLE_R 7 7 R 9TO_MIDDLE_R
9TO_MIDDLE_R 2 2 R 9TO_MIDDLE_R
9TO_MIDDLE_R 6 6 R 9TO_MIDDLE_R
9TO_MIDDLE_R 9 9 R 9TO_MIDDLE_R
9TO_MIDDLE_R 5 5 R 9A_END

# to end of A
9A_END 0 0 R 9A_END
9A_END 1 1 R 9A_END
9A_END 2 2 R 9A_END
9A_END 7 7 R 9A_END
9A_END 8 8 R 9A_END
9A_END 3 3 L 9COPY_VALUE

# Move Left until end of A
# Copy the first non-7/MovH8 value
9COPY_VALUE 0 7 L 9MOVE_ZERO
9COPY_VALUE 1 8 L 9MOVE_ONE
9COPY_VALUE 3 3 L 9COPY_VALUE
9COPY_VALUE 7 7 L 9COPY_VALUE
9COPY_VALUE 8 8 L 9COPY_VALUE
9COPY_VALUE 2 2 R 9RESTORE_VALUE

# Move a 0 to number 9
9MOVE_ZERO 0 0 L 9MOVE_ZERO
9MOVE_ZERO 1 1 L 9MOVE_ZERO
9MOVE_ZERO 2 2 L 9MOVE_ZERO
9MOVE_ZERO 3 3 L 9MOVE_ZERO
9MOVE_ZERO 4 4 L 9MOVE_ZERO
9MOVE_ZERO 9 9 L 9MOVE_ZERO_2
9MOVE_ZERO 5 5 L 9MOVE_ZERO
9MOVE_ZERO 6 6 L 9MOVE_ZERO
9MOVE_ZERO 7 7 L 9MOVE_ZERO
9MOVE_ZERO 8 8 L 9MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
9MOVE_ZERO_2 0 0 L 9MOVE_ZERO_2
9MOVE_ZERO_2 1 1 L 9MOVE_ZERO_2
9MOVE_ZERO_2 7 0 S 9TO_MIDDLE_R
# Move a 1 to number 9
9MOVE_ONE 0 0 L 9MOVE_ONE
9MOVE_ONE 1 1 L 9MOVE_ONE
9MOVE_ONE 2 2 L 9MOVE_ONE
9MOVE_ONE 3 3 L 9MOVE_ONE
9MOVE_ONE 4 4 L 9MOVE_ONE
9MOVE_ONE 9 9 L 9MOVE_ONE_2
9MOVE_ONE 5 5 L 9MOVE_ONE
9MOVE_ONE 6 6 L 9MOVE_ONE
9MOVE_ONE 7 7 L 9MOVE_ONE
9MOVE_ONE 8 8 L 9MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
9MOVE_ONE_2 0 0 L 9MOVE_ONE_2
9MOVE_ONE_2 1 1 L 9MOVE_ONE_2
9MOVE_ONE_2 7 1 S 9TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
9RESTORE_VALUE 7 0 R 9RESTORE_VALUE
9RESTORE_VALUE 8 1 R 9RESTORE_VALUE
9RESTORE_VALUE 3 3 L 9RESET_STORAGE_MARKER
# Reset 9 to 6
9RESET_STORAGE_MARKER 0 0 L 9RESET_STORAGE_MARKER
9RESET_STORAGE_MARKER 1 1 L 9RESET_STORAGE_MARKER
9RESET_STORAGE_MARKER 5 5 L 9RESET_STORAGE_MARKER
9RESET_STORAGE_MARKER 6 6 L 9RESET_STORAGE_MARKER
9RESET_STORAGE_MARKER 2 2 L 9RESET_STORAGE_MARKER
9RESET_STORAGE_MARKER 9 6 R 9RETURN_TO_MIDDLE
# Return to middle
9RETURN_TO_MIDDLE 0 0 R 9RETURN_TO_MIDDLE
9RETURN_TO_MIDDLE 1 1 R 9RETURN_TO_MIDDLE
9RETURN_TO_MIDDLE 6 6 R 9RETURN_TO_MIDDLE
9RETURN_TO_MIDDLE 5 5 S 9END


#
#asm LOAD S5 A
#


9END 5 5 S 10START

# Start of loading
10START 5 5 R 10TO_A_END_R
# To end of number A
10TO_A_END_R 0 0 R 10TO_A_END_R
10TO_A_END_R 1 1 R 10TO_A_END_R
10TO_A_END_R 2 2 R 10TO_A_END_R
10TO_A_END_R 3 3 L 10SET_TO_7

# Move to the start of number A, and set all values to 7
10SET_TO_7 0 7 L 10SET_TO_7
10SET_TO_7 1 7 L 10SET_TO_7
10SET_TO_7 2 2 L 10TO_MIDDLE_L
# Find the middle
10TO_MIDDLE_L 1 1 L 10TO_MIDDLE_L
10TO_MIDDLE_L 0 0 L 10TO_MIDDLE_L
10TO_MIDDLE_L 7 7 L 10TO_MIDDLE_L
10TO_MIDDLE_L 2 2 L 10TO_MIDDLE_L
10TO_MIDDLE_L 3 3 L 10TO_MIDDLE_L
10TO_MIDDLE_L 4 4 L 10TO_MIDDLE_L
10TO_MIDDLE_L 5 5 L 10TO_5_S1
#GO_TO_Sn: 5

10TO_5_S1 6 6 L 10TO_5_S2
10TO_5_S1 9 9 L 10TO_5_S2
10TO_5_S2 0 0 L 10TO_5_S2
10TO_5_S2 1 1 L 10TO_5_S2
10TO_5_S2 7 7 L 10TO_5_S2
10TO_5_S2 8 8 L 10TO_5_S2
10TO_5_S2 6 6 L 10TO_5_S3
10TO_5_S2 9 9 L 10TO_5_S3
10TO_5_S3 0 0 L 10TO_5_S3
10TO_5_S3 1 1 L 10TO_5_S3
10TO_5_S3 7 7 L 10TO_5_S3
10TO_5_S3 8 8 L 10TO_5_S3
10TO_5_S3 6 6 L 10TO_5_S4
10TO_5_S3 9 9 L 10TO_5_S4
10TO_5_S4 0 0 L 10TO_5_S4
10TO_5_S4 1 1 L 10TO_5_S4
10TO_5_S4 7 7 L 10TO_5_S4
10TO_5_S4 8 8 L 10TO_5_S4
10TO_5_S4 6 6 L 10TO_5_S5
10TO_5_S4 9 9 L 10TO_5_S5
10TO_5_S5 0 0 L 10TO_5_S5
10TO_5_S5 1 1 L 10TO_5_S5
10TO_5_S5 7 7 L 10TO_5_S5
10TO_5_S5 8 8 L 10TO_5_S5
10TO_5_S5 6 6 L 10COPY_VALUE
10TO_5_S5 9 6 L 10COPY_VALUE
# Move Left until start of S5
# Copy the first non-7/8 value
10COPY_VALUE 0 7 R 10MOVE_ZERO
10COPY_VALUE 1 8 R 10MOVE_ONE
10COPY_VALUE 7 7 L 10COPY_VALUE
10COPY_VALUE 8 8 L 10COPY_VALUE
10COPY_VALUE 6 6 R 10RESTORE_VALUE

# Move a 0 to number A
10MOVE_ZERO 0 0 R 10MOVE_ZERO
10MOVE_ZERO 1 1 R 10MOVE_ZERO
10MOVE_ZERO 2 2 R 10MOVE_ZERO
10MOVE_ZERO 3 3 L 10MOVE_ZERO_2
10MOVE_ZERO 4 4 R 10MOVE_ZERO
10MOVE_ZERO 5 5 R 10MOVE_ZERO
10MOVE_ZERO 6 6 R 10MOVE_ZERO
10MOVE_ZERO 7 7 R 10MOVE_ZERO
10MOVE_ZERO 8 8 R 10MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
10MOVE_ZERO_2 0 0 L 10MOVE_ZERO_2
10MOVE_ZERO_2 1 1 L 10MOVE_ZERO_2
10MOVE_ZERO_2 7 0 S 10TO_MIDDLE_L
# Move a 1 to number A
10MOVE_ONE 0 0 R 10MOVE_ONE
10MOVE_ONE 1 1 R 10MOVE_ONE
10MOVE_ONE 2 2 R 10MOVE_ONE
10MOVE_ONE 3 3 L 10MOVE_ONE_2
10MOVE_ONE 4 4 R 10MOVE_ONE
10MOVE_ONE 5 5 R 10MOVE_ONE
10MOVE_ONE 6 6 R 10MOVE_ONE
10MOVE_ONE 7 7 R 10MOVE_ONE
10MOVE_ONE 8 8 R 10MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
10MOVE_ONE_2 0 0 L 10MOVE_ONE_2
10MOVE_ONE_2 1 1 L 10MOVE_ONE_2
10MOVE_ONE_2 7 1 S 10TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
10RESTORE_VALUE 7 0 R 10RESTORE_VALUE
10RESTORE_VALUE 8 1 R 10RESTORE_VALUE
10RESTORE_VALUE 6 6 S 10TO_START
# Go back to the start
10TO_START 0 0 R 10TO_START
10TO_START 1 1 R 10TO_START
10TO_START 6 6 R 10TO_START
10TO_START 5 5 S 10END



#
#asm ISZERO
#


10END 5 5 S 11START

# Start of the ISZERO program
11START 5 5 R 11START
11START 2 2 R 11CHECK_A

# Check for ones in A
11CHECK_A 0 0 R 11CHECK_A
11CHECK_A 1 0 R 11FOUND_ONE
11CHECK_A 3 3 L 11CHECK_A_1

# no ones found in A, set last digit of A to 1
11CHECK_A_1 0 1 L 11RETURN

# Found a 1 in A
11FOUND_ONE 0 0 R 11FOUND_ONE
11FOUND_ONE 1 0 R 11FOUND_ONE
11FOUND_ONE 3 3 L 11FOUND_ONE_1

# Found a 1 in A, return
11FOUND_ONE_1 0 0 L 11RETURN

# Return to middle
11RETURN 0 0 L 11RETURN
11RETURN 1 1 L 11RETURN
11RETURN 2 2 L 11RETURN
11RETURN 5 5 S 11END


#
#asm JNZ L4
#


11END 5 5 S 12START
# Start of the JUMP if NOT ZERO program
12START 5 5 R 12START
12START 2 2 R 12A_END

# Go to end of A
12A_END 0 0 R 12A_END
12A_END 1 1 R 12A_END
12A_END 3 3 L 12CHECK_A

# no ones found in A, set last digit of A to 1
12CHECK_A 0 1 S 12RETURN_ZERO
12CHECK_A 1 1 S 12RETURN_ONE

# Return to 5
12RETURN_ZERO 0 0 L 12RETURN_ZERO
12RETURN_ZERO 1 1 L 12RETURN_ZERO
12RETURN_ZERO 2 2 L 12RETURN_ZERO
12RETURN_ZERO 5 5 S 12END

12RETURN_ONE 0 0 L 12RETURN_ONE
12RETURN_ONE 1 1 L 12RETURN_ONE
12RETURN_ONE 2 2 L 12RETURN_ONE
12RETURN_ONE 5 5 S LABEL_L4


#
#asm SET S7 1
#


12END 5 5 S 13START

13START 5 5 L 13TO_7_S1
#GO_TO_Sn: 7

13TO_7_S1 6 6 L 13TO_7_S2
13TO_7_S1 9 9 L 13TO_7_S2
13TO_7_S2 0 0 L 13TO_7_S2
13TO_7_S2 1 1 L 13TO_7_S2
13TO_7_S2 7 7 L 13TO_7_S2
13TO_7_S2 8 8 L 13TO_7_S2
13TO_7_S2 6 6 L 13TO_7_S3
13TO_7_S2 9 9 L 13TO_7_S3
13TO_7_S3 0 0 L 13TO_7_S3
13TO_7_S3 1 1 L 13TO_7_S3
13TO_7_S3 7 7 L 13TO_7_S3
13TO_7_S3 8 8 L 13TO_7_S3
13TO_7_S3 6 6 L 13TO_7_S4
13TO_7_S3 9 9 L 13TO_7_S4
13TO_7_S4 0 0 L 13TO_7_S4
13TO_7_S4 1 1 L 13TO_7_S4
13TO_7_S4 7 7 L 13TO_7_S4
13TO_7_S4 8 8 L 13TO_7_S4
13TO_7_S4 6 6 L 13TO_7_S5
13TO_7_S4 9 9 L 13TO_7_S5
13TO_7_S5 0 0 L 13TO_7_S5
13TO_7_S5 1 1 L 13TO_7_S5
13TO_7_S5 7 7 L 13TO_7_S5
13TO_7_S5 8 8 L 13TO_7_S5
13TO_7_S5 6 6 L 13TO_7_S6
13TO_7_S5 9 9 L 13TO_7_S6
13TO_7_S6 0 0 L 13TO_7_S6
13TO_7_S6 1 1 L 13TO_7_S6
13TO_7_S6 7 7 L 13TO_7_S6
13TO_7_S6 8 8 L 13TO_7_S6
13TO_7_S6 6 6 L 13TO_7_S7
13TO_7_S6 9 9 L 13TO_7_S7
13TO_7_S7 0 0 L 13TO_7_S7
13TO_7_S7 1 1 L 13TO_7_S7
13TO_7_S7 7 7 L 13TO_7_S7
13TO_7_S7 8 8 L 13TO_7_S7
13TO_7_S7 6 6 L 13RESET_S
13TO_7_S7 9 6 L 13RESET_S

# Reset to 0
13RESET_S 0 0 L 13RESET_S
13RESET_S 1 0 L 13RESET_S
13RESET_S 6 6 R 13SET_1D
13SET_1D 0 0 R 13SET_2D
13SET_2D 0 0 R 13SET_3D
13SET_3D 0 0 R 13SET_4D
13SET_4D 0 0 R 13SET_5D
13SET_5D 0 0 R 13SET_6D
13SET_6D 0 0 R 13SET_7D
13SET_7D 0 0 R 13SET_8D
13SET_8D 0 1 R 13RETURN

# Return to middle
13RETURN 0 0 R 13RETURN
13RETURN 1 1 R 13RETURN
13RETURN 6 6 R 13RETURN
13RETURN 5 5 S 13END


#
#asm LOAD S2 A
#


13END 5 5 S 14START

# Start of loading
14START 5 5 R 14TO_A_END_R
# To end of number A
14TO_A_END_R 0 0 R 14TO_A_END_R
14TO_A_END_R 1 1 R 14TO_A_END_R
14TO_A_END_R 2 2 R 14TO_A_END_R
14TO_A_END_R 3 3 L 14SET_TO_7

# Move to the start of number A, and set all values to 7
14SET_TO_7 0 7 L 14SET_TO_7
14SET_TO_7 1 7 L 14SET_TO_7
14SET_TO_7 2 2 L 14TO_MIDDLE_L
# Find the middle
14TO_MIDDLE_L 1 1 L 14TO_MIDDLE_L
14TO_MIDDLE_L 0 0 L 14TO_MIDDLE_L
14TO_MIDDLE_L 7 7 L 14TO_MIDDLE_L
14TO_MIDDLE_L 2 2 L 14TO_MIDDLE_L
14TO_MIDDLE_L 3 3 L 14TO_MIDDLE_L
14TO_MIDDLE_L 4 4 L 14TO_MIDDLE_L
14TO_MIDDLE_L 5 5 L 14TO_2_S1
#GO_TO_Sn: 2

14TO_2_S1 6 6 L 14TO_2_S2
14TO_2_S1 9 9 L 14TO_2_S2
14TO_2_S2 0 0 L 14TO_2_S2
14TO_2_S2 1 1 L 14TO_2_S2
14TO_2_S2 7 7 L 14TO_2_S2
14TO_2_S2 8 8 L 14TO_2_S2
14TO_2_S2 6 6 L 14COPY_VALUE
14TO_2_S2 9 6 L 14COPY_VALUE
# Move Left until start of S2
# Copy the first non-7/8 value
14COPY_VALUE 0 7 R 14MOVE_ZERO
14COPY_VALUE 1 8 R 14MOVE_ONE
14COPY_VALUE 7 7 L 14COPY_VALUE
14COPY_VALUE 8 8 L 14COPY_VALUE
14COPY_VALUE 6 6 R 14RESTORE_VALUE

# Move a 0 to number A
14MOVE_ZERO 0 0 R 14MOVE_ZERO
14MOVE_ZERO 1 1 R 14MOVE_ZERO
14MOVE_ZERO 2 2 R 14MOVE_ZERO
14MOVE_ZERO 3 3 L 14MOVE_ZERO_2
14MOVE_ZERO 4 4 R 14MOVE_ZERO
14MOVE_ZERO 5 5 R 14MOVE_ZERO
14MOVE_ZERO 6 6 R 14MOVE_ZERO
14MOVE_ZERO 7 7 R 14MOVE_ZERO
14MOVE_ZERO 8 8 R 14MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
14MOVE_ZERO_2 0 0 L 14MOVE_ZERO_2
14MOVE_ZERO_2 1 1 L 14MOVE_ZERO_2
14MOVE_ZERO_2 7 0 S 14TO_MIDDLE_L
# Move a 1 to number A
14MOVE_ONE 0 0 R 14MOVE_ONE
14MOVE_ONE 1 1 R 14MOVE_ONE
14MOVE_ONE 2 2 R 14MOVE_ONE
14MOVE_ONE 3 3 L 14MOVE_ONE_2
14MOVE_ONE 4 4 R 14MOVE_ONE
14MOVE_ONE 5 5 R 14MOVE_ONE
14MOVE_ONE 6 6 R 14MOVE_ONE
14MOVE_ONE 7 7 R 14MOVE_ONE
14MOVE_ONE 8 8 R 14MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
14MOVE_ONE_2 0 0 L 14MOVE_ONE_2
14MOVE_ONE_2 1 1 L 14MOVE_ONE_2
14MOVE_ONE_2 7 1 S 14TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
14RESTORE_VALUE 7 0 R 14RESTORE_VALUE
14RESTORE_VALUE 8 1 R 14RESTORE_VALUE
14RESTORE_VALUE 6 6 S 14TO_START
# Go back to the start
14TO_START 0 0 R 14TO_START
14TO_START 1 1 R 14TO_START
14TO_START 6 6 R 14TO_START
14TO_START 5 5 S 14END



#
#asm LOAD S7 B
#


14END 5 5 S 15START

# Start of loading
15START 5 5 R 15TO_B_END_R
# To end of number B
15TO_B_END_R 0 0 R 15TO_B_END_R
15TO_B_END_R 1 1 R 15TO_B_END_R
15TO_B_END_R 2 2 R 15TO_B_END_R
15TO_B_END_R 3 3 R 15TO_B_END_R
15TO_B_END_R 4 4 L 15SET_TO_7

# Move to the start of number B, and set all values to 7
15SET_TO_7 0 7 L 15SET_TO_7
15SET_TO_7 1 7 L 15SET_TO_7
15SET_TO_7 3 3 L 15TO_MIDDLE_L
# Find the middle
15TO_MIDDLE_L 1 1 L 15TO_MIDDLE_L
15TO_MIDDLE_L 0 0 L 15TO_MIDDLE_L
15TO_MIDDLE_L 7 7 L 15TO_MIDDLE_L
15TO_MIDDLE_L 2 2 L 15TO_MIDDLE_L
15TO_MIDDLE_L 3 3 L 15TO_MIDDLE_L
15TO_MIDDLE_L 4 4 L 15TO_MIDDLE_L
15TO_MIDDLE_L 5 5 L 15TO_7_S1
#GO_TO_Sn: 7

15TO_7_S1 6 6 L 15TO_7_S2
15TO_7_S1 9 9 L 15TO_7_S2
15TO_7_S2 0 0 L 15TO_7_S2
15TO_7_S2 1 1 L 15TO_7_S2
15TO_7_S2 7 7 L 15TO_7_S2
15TO_7_S2 8 8 L 15TO_7_S2
15TO_7_S2 6 6 L 15TO_7_S3
15TO_7_S2 9 9 L 15TO_7_S3
15TO_7_S3 0 0 L 15TO_7_S3
15TO_7_S3 1 1 L 15TO_7_S3
15TO_7_S3 7 7 L 15TO_7_S3
15TO_7_S3 8 8 L 15TO_7_S3
15TO_7_S3 6 6 L 15TO_7_S4
15TO_7_S3 9 9 L 15TO_7_S4
15TO_7_S4 0 0 L 15TO_7_S4
15TO_7_S4 1 1 L 15TO_7_S4
15TO_7_S4 7 7 L 15TO_7_S4
15TO_7_S4 8 8 L 15TO_7_S4
15TO_7_S4 6 6 L 15TO_7_S5
15TO_7_S4 9 9 L 15TO_7_S5
15TO_7_S5 0 0 L 15TO_7_S5
15TO_7_S5 1 1 L 15TO_7_S5
15TO_7_S5 7 7 L 15TO_7_S5
15TO_7_S5 8 8 L 15TO_7_S5
15TO_7_S5 6 6 L 15TO_7_S6
15TO_7_S5 9 9 L 15TO_7_S6
15TO_7_S6 0 0 L 15TO_7_S6
15TO_7_S6 1 1 L 15TO_7_S6
15TO_7_S6 7 7 L 15TO_7_S6
15TO_7_S6 8 8 L 15TO_7_S6
15TO_7_S6 6 6 L 15TO_7_S7
15TO_7_S6 9 9 L 15TO_7_S7
15TO_7_S7 0 0 L 15TO_7_S7
15TO_7_S7 1 1 L 15TO_7_S7
15TO_7_S7 7 7 L 15TO_7_S7
15TO_7_S7 8 8 L 15TO_7_S7
15TO_7_S7 6 6 L 15COPY_VALUE
15TO_7_S7 9 6 L 15COPY_VALUE
# Move Left until start of S7
# Copy the first non-7/8 value
15COPY_VALUE 0 7 R 15MOVE_ZERO
15COPY_VALUE 1 8 R 15MOVE_ONE
15COPY_VALUE 7 7 L 15COPY_VALUE
15COPY_VALUE 8 8 L 15COPY_VALUE
15COPY_VALUE 6 6 R 15RESTORE_VALUE

# Move a 0 to number B
15MOVE_ZERO 0 0 R 15MOVE_ZERO
15MOVE_ZERO 1 1 R 15MOVE_ZERO
15MOVE_ZERO 2 2 R 15MOVE_ZERO
15MOVE_ZERO 3 3 R 15MOVE_ZERO
15MOVE_ZERO 4 4 L 15MOVE_ZERO_2
15MOVE_ZERO 5 5 R 15MOVE_ZERO
15MOVE_ZERO 6 6 R 15MOVE_ZERO
15MOVE_ZERO 7 7 R 15MOVE_ZERO
15MOVE_ZERO 8 8 R 15MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
15MOVE_ZERO_2 0 0 L 15MOVE_ZERO_2
15MOVE_ZERO_2 1 1 L 15MOVE_ZERO_2
15MOVE_ZERO_2 7 0 S 15TO_MIDDLE_L
# Move a 1 to number B
15MOVE_ONE 0 0 R 15MOVE_ONE
15MOVE_ONE 1 1 R 15MOVE_ONE
15MOVE_ONE 2 2 R 15MOVE_ONE
15MOVE_ONE 3 3 R 15MOVE_ONE
15MOVE_ONE 4 4 L 15MOVE_ONE_2
15MOVE_ONE 5 5 R 15MOVE_ONE
15MOVE_ONE 6 6 R 15MOVE_ONE
15MOVE_ONE 7 7 R 15MOVE_ONE
15MOVE_ONE 8 8 R 15MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
15MOVE_ONE_2 0 0 L 15MOVE_ONE_2
15MOVE_ONE_2 1 1 L 15MOVE_ONE_2
15MOVE_ONE_2 7 1 S 15TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
15RESTORE_VALUE 7 0 R 15RESTORE_VALUE
15RESTORE_VALUE 8 1 R 15RESTORE_VALUE
15RESTORE_VALUE 6 6 S 15TO_START
# Go back to the start
15TO_START 0 0 R 15TO_START
15TO_START 1 1 R 15TO_START
15TO_START 6 6 R 15TO_START
15TO_START 5 5 S 15END



#
#asm SUB
#


15END 5 5 S 16START

# Start of the subtraction program
16START 5 5 R 16FIND_B_END

# Find the end of the second number
16FIND_B_END 0 0 R 16FIND_B_END
16FIND_B_END 1 1 R 16FIND_B_END
16FIND_B_END 2 2 R 16FIND_B_END
16FIND_B_END 3 3 R 16FIND_B_END
16FIND_B_END 7 7 R 16FIND_B_END
16FIND_B_END 8 8 R 16FIND_B_END
16FIND_B_END 4 4 L 16SUB_DIGIT

# Find first non-subtracted digit
16SUB_DIGIT 7 7 L 16SUB_DIGIT
16SUB_DIGIT 8 8 L 16SUB_DIGIT
16SUB_DIGIT 0 7 L 16SUB_DIGIT_ZERO
16SUB_DIGIT 1 7 L 16SUB_DIGIT_ONE
16SUB_DIGIT 3 3 R 16RESTORE

# Subtract a zero
16SUB_DIGIT_ZERO 0 0 L 16SUB_DIGIT_ZERO
16SUB_DIGIT_ZERO 1 1 L 16SUB_DIGIT_ZERO
16SUB_DIGIT_ZERO 3 3 L 16SUB_DIGIT_ZERO_1

16SUB_DIGIT_ZERO_1 7 7 L 16SUB_DIGIT_ZERO_1
16SUB_DIGIT_ZERO_1 8 8 L 16SUB_DIGIT_ZERO_1
16SUB_DIGIT_ZERO_1 0 7 L 16FIND_B_END
16SUB_DIGIT_ZERO_1 1 8 R 16FIND_B_END

# Subtract a one
16SUB_DIGIT_ONE 0 0 L 16SUB_DIGIT_ONE
16SUB_DIGIT_ONE 1 1 L 16SUB_DIGIT_ONE
16SUB_DIGIT_ONE 3 3 L 16SUB_DIGIT_ONE_1

16SUB_DIGIT_ONE_1 7 7 L 16SUB_DIGIT_ONE_1
16SUB_DIGIT_ONE_1 8 8 L 16SUB_DIGIT_ONE_1
16SUB_DIGIT_ONE_1 0 8 L 16SUB_DIGIT_ONE_2
16SUB_DIGIT_ONE_1 1 7 R 16FIND_B_END

16SUB_DIGIT_ONE_2 1 0 R 16FIND_B_END
16SUB_DIGIT_ONE_2 2 2 R 16OVERFLOW
16SUB_DIGIT_ONE_2 0 1 L 16SUB_DIGIT_ONE_2

# Unsigned overflow
16OVERFLOW 0 1 R 16OVERFLOW
16OVERFLOW 1 1 R 16OVERFLOW
16OVERFLOW 7 7 R 16FIND_B_END
16OVERFLOW 8 8 R 16FIND_B_END
16OVERFLOW 3 3 R 16FIND_B_END

# Return to the middle of the tape
16RESTORE 7 0 R 16RESTORE
16RESTORE 8 1 R 16RESTORE
16RESTORE 4 4 L 16RESTORE_1

16RESTORE_1 0 0 L 16RESTORE_1
16RESTORE_1 1 1 L 16RESTORE_1
16RESTORE_1 2 2 L 16RESTORE_1
16RESTORE_1 3 3 L 16RESTORE_1
16RESTORE_1 7 0 L 16RESTORE_1
16RESTORE_1 8 1 L 16RESTORE_1
16RESTORE_1 5 5 S 16END


#
#asm STORE S2 A
#


16END 5 5 S 17START

17START 5 5 L 17TO_2_S1
#GO_TO_Sn: 2

17TO_2_S1 6 6 L 17TO_2_S2
17TO_2_S1 9 9 L 17TO_2_S2
17TO_2_S2 0 0 L 17TO_2_S2
17TO_2_S2 1 1 L 17TO_2_S2
17TO_2_S2 7 7 L 17TO_2_S2
17TO_2_S2 8 8 L 17TO_2_S2
17TO_2_S2 6 9 L 17SET_TO_7
17TO_2_S2 9 9 L 17SET_TO_7

# Set all the values to 7 untill the start of S1
17SET_TO_7 0 7 L 17SET_TO_7
17SET_TO_7 1 7 L 17SET_TO_7
17SET_TO_7 6 6 R 17TO_MIDDLE_R
# Find the middle
17TO_MIDDLE_R 1 1 R 17TO_MIDDLE_R
17TO_MIDDLE_R 0 0 R 17TO_MIDDLE_R
17TO_MIDDLE_R 7 7 R 17TO_MIDDLE_R
17TO_MIDDLE_R 2 2 R 17TO_MIDDLE_R
17TO_MIDDLE_R 6 6 R 17TO_MIDDLE_R
17TO_MIDDLE_R 9 9 R 17TO_MIDDLE_R
17TO_MIDDLE_R 5 5 R 17A_END

# to end of A
17A_END 0 0 R 17A_END
17A_END 1 1 R 17A_END
17A_END 2 2 R 17A_END
17A_END 7 7 R 17A_END
17A_END 8 8 R 17A_END
17A_END 3 3 L 17COPY_VALUE

# Move Left until end of A
# Copy the first non-7/MovH8 value
17COPY_VALUE 0 7 L 17MOVE_ZERO
17COPY_VALUE 1 8 L 17MOVE_ONE
17COPY_VALUE 3 3 L 17COPY_VALUE
17COPY_VALUE 7 7 L 17COPY_VALUE
17COPY_VALUE 8 8 L 17COPY_VALUE
17COPY_VALUE 2 2 R 17RESTORE_VALUE

# Move a 0 to number 9
17MOVE_ZERO 0 0 L 17MOVE_ZERO
17MOVE_ZERO 1 1 L 17MOVE_ZERO
17MOVE_ZERO 2 2 L 17MOVE_ZERO
17MOVE_ZERO 3 3 L 17MOVE_ZERO
17MOVE_ZERO 4 4 L 17MOVE_ZERO
17MOVE_ZERO 9 9 L 17MOVE_ZERO_2
17MOVE_ZERO 5 5 L 17MOVE_ZERO
17MOVE_ZERO 6 6 L 17MOVE_ZERO
17MOVE_ZERO 7 7 L 17MOVE_ZERO
17MOVE_ZERO 8 8 L 17MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
17MOVE_ZERO_2 0 0 L 17MOVE_ZERO_2
17MOVE_ZERO_2 1 1 L 17MOVE_ZERO_2
17MOVE_ZERO_2 7 0 S 17TO_MIDDLE_R
# Move a 1 to number 9
17MOVE_ONE 0 0 L 17MOVE_ONE
17MOVE_ONE 1 1 L 17MOVE_ONE
17MOVE_ONE 2 2 L 17MOVE_ONE
17MOVE_ONE 3 3 L 17MOVE_ONE
17MOVE_ONE 4 4 L 17MOVE_ONE
17MOVE_ONE 9 9 L 17MOVE_ONE_2
17MOVE_ONE 5 5 L 17MOVE_ONE
17MOVE_ONE 6 6 L 17MOVE_ONE
17MOVE_ONE 7 7 L 17MOVE_ONE
17MOVE_ONE 8 8 L 17MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
17MOVE_ONE_2 0 0 L 17MOVE_ONE_2
17MOVE_ONE_2 1 1 L 17MOVE_ONE_2
17MOVE_ONE_2 7 1 S 17TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
17RESTORE_VALUE 7 0 R 17RESTORE_VALUE
17RESTORE_VALUE 8 1 R 17RESTORE_VALUE
17RESTORE_VALUE 3 3 L 17RESET_STORAGE_MARKER
# Reset 9 to 6
17RESET_STORAGE_MARKER 0 0 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 1 1 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 5 5 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 6 6 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 2 2 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 9 6 R 17RETURN_TO_MIDDLE
# Return to middle
17RETURN_TO_MIDDLE 0 0 R 17RETURN_TO_MIDDLE
17RETURN_TO_MIDDLE 1 1 R 17RETURN_TO_MIDDLE
17RETURN_TO_MIDDLE 6 6 R 17RETURN_TO_MIDDLE
17RETURN_TO_MIDDLE 5 5 S 17END


#
#asm SET S4 1
#


17END 5 5 S 18START

18START 5 5 L 18TO_4_S1
#GO_TO_Sn: 4

18TO_4_S1 6 6 L 18TO_4_S2
18TO_4_S1 9 9 L 18TO_4_S2
18TO_4_S2 0 0 L 18TO_4_S2
18TO_4_S2 1 1 L 18TO_4_S2
18TO_4_S2 7 7 L 18TO_4_S2
18TO_4_S2 8 8 L 18TO_4_S2
18TO_4_S2 6 6 L 18TO_4_S3
18TO_4_S2 9 9 L 18TO_4_S3
18TO_4_S3 0 0 L 18TO_4_S3
18TO_4_S3 1 1 L 18TO_4_S3
18TO_4_S3 7 7 L 18TO_4_S3
18TO_4_S3 8 8 L 18TO_4_S3
18TO_4_S3 6 6 L 18TO_4_S4
18TO_4_S3 9 9 L 18TO_4_S4
18TO_4_S4 0 0 L 18TO_4_S4
18TO_4_S4 1 1 L 18TO_4_S4
18TO_4_S4 7 7 L 18TO_4_S4
18TO_4_S4 8 8 L 18TO_4_S4
18TO_4_S4 6 6 L 18RESET_S
18TO_4_S4 9 6 L 18RESET_S

# Reset to 0
18RESET_S 0 0 L 18RESET_S
18RESET_S 1 0 L 18RESET_S
18RESET_S 6 6 R 18SET_1D
18SET_1D 0 0 R 18SET_2D
18SET_2D 0 0 R 18SET_3D
18SET_3D 0 0 R 18SET_4D
18SET_4D 0 0 R 18SET_5D
18SET_5D 0 0 R 18SET_6D
18SET_6D 0 0 R 18SET_7D
18SET_7D 0 0 R 18SET_8D
18SET_8D 0 1 R 18RETURN

# Return to middle
18RETURN 0 0 R 18RETURN
18RETURN 1 1 R 18RETURN
18RETURN 6 6 R 18RETURN
18RETURN 5 5 S 18END


#
#asm LOAD S3 A
#


18END 5 5 S 19START

# Start of loading
19START 5 5 R 19TO_A_END_R
# To end of number A
19TO_A_END_R 0 0 R 19TO_A_END_R
19TO_A_END_R 1 1 R 19TO_A_END_R
19TO_A_END_R 2 2 R 19TO_A_END_R
19TO_A_END_R 3 3 L 19SET_TO_7

# Move to the start of number A, and set all values to 7
19SET_TO_7 0 7 L 19SET_TO_7
19SET_TO_7 1 7 L 19SET_TO_7
19SET_TO_7 2 2 L 19TO_MIDDLE_L
# Find the middle
19TO_MIDDLE_L 1 1 L 19TO_MIDDLE_L
19TO_MIDDLE_L 0 0 L 19TO_MIDDLE_L
19TO_MIDDLE_L 7 7 L 19TO_MIDDLE_L
19TO_MIDDLE_L 2 2 L 19TO_MIDDLE_L
19TO_MIDDLE_L 3 3 L 19TO_MIDDLE_L
19TO_MIDDLE_L 4 4 L 19TO_MIDDLE_L
19TO_MIDDLE_L 5 5 L 19TO_3_S1
#GO_TO_Sn: 3

19TO_3_S1 6 6 L 19TO_3_S2
19TO_3_S1 9 9 L 19TO_3_S2
19TO_3_S2 0 0 L 19TO_3_S2
19TO_3_S2 1 1 L 19TO_3_S2
19TO_3_S2 7 7 L 19TO_3_S2
19TO_3_S2 8 8 L 19TO_3_S2
19TO_3_S2 6 6 L 19TO_3_S3
19TO_3_S2 9 9 L 19TO_3_S3
19TO_3_S3 0 0 L 19TO_3_S3
19TO_3_S3 1 1 L 19TO_3_S3
19TO_3_S3 7 7 L 19TO_3_S3
19TO_3_S3 8 8 L 19TO_3_S3
19TO_3_S3 6 6 L 19COPY_VALUE
19TO_3_S3 9 6 L 19COPY_VALUE
# Move Left until start of S3
# Copy the first non-7/8 value
19COPY_VALUE 0 7 R 19MOVE_ZERO
19COPY_VALUE 1 8 R 19MOVE_ONE
19COPY_VALUE 7 7 L 19COPY_VALUE
19COPY_VALUE 8 8 L 19COPY_VALUE
19COPY_VALUE 6 6 R 19RESTORE_VALUE

# Move a 0 to number A
19MOVE_ZERO 0 0 R 19MOVE_ZERO
19MOVE_ZERO 1 1 R 19MOVE_ZERO
19MOVE_ZERO 2 2 R 19MOVE_ZERO
19MOVE_ZERO 3 3 L 19MOVE_ZERO_2
19MOVE_ZERO 4 4 R 19MOVE_ZERO
19MOVE_ZERO 5 5 R 19MOVE_ZERO
19MOVE_ZERO 6 6 R 19MOVE_ZERO
19MOVE_ZERO 7 7 R 19MOVE_ZERO
19MOVE_ZERO 8 8 R 19MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
19MOVE_ZERO_2 0 0 L 19MOVE_ZERO_2
19MOVE_ZERO_2 1 1 L 19MOVE_ZERO_2
19MOVE_ZERO_2 7 0 S 19TO_MIDDLE_L
# Move a 1 to number A
19MOVE_ONE 0 0 R 19MOVE_ONE
19MOVE_ONE 1 1 R 19MOVE_ONE
19MOVE_ONE 2 2 R 19MOVE_ONE
19MOVE_ONE 3 3 L 19MOVE_ONE_2
19MOVE_ONE 4 4 R 19MOVE_ONE
19MOVE_ONE 5 5 R 19MOVE_ONE
19MOVE_ONE 6 6 R 19MOVE_ONE
19MOVE_ONE 7 7 R 19MOVE_ONE
19MOVE_ONE 8 8 R 19MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
19MOVE_ONE_2 0 0 L 19MOVE_ONE_2
19MOVE_ONE_2 1 1 L 19MOVE_ONE_2
19MOVE_ONE_2 7 1 S 19TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
19RESTORE_VALUE 7 0 R 19RESTORE_VALUE
19RESTORE_VALUE 8 1 R 19RESTORE_VALUE
19RESTORE_VALUE 6 6 S 19TO_START
# Go back to the start
19TO_START 0 0 R 19TO_START
19TO_START 1 1 R 19TO_START
19TO_START 6 6 R 19TO_START
19TO_START 5 5 S 19END



#
#asm LOAD S4 B
#


19END 5 5 S 20START

# Start of loading
20START 5 5 R 20TO_B_END_R
# To end of number B
20TO_B_END_R 0 0 R 20TO_B_END_R
20TO_B_END_R 1 1 R 20TO_B_END_R
20TO_B_END_R 2 2 R 20TO_B_END_R
20TO_B_END_R 3 3 R 20TO_B_END_R
20TO_B_END_R 4 4 L 20SET_TO_7

# Move to the start of number B, and set all values to 7
20SET_TO_7 0 7 L 20SET_TO_7
20SET_TO_7 1 7 L 20SET_TO_7
20SET_TO_7 3 3 L 20TO_MIDDLE_L
# Find the middle
20TO_MIDDLE_L 1 1 L 20TO_MIDDLE_L
20TO_MIDDLE_L 0 0 L 20TO_MIDDLE_L
20TO_MIDDLE_L 7 7 L 20TO_MIDDLE_L
20TO_MIDDLE_L 2 2 L 20TO_MIDDLE_L
20TO_MIDDLE_L 3 3 L 20TO_MIDDLE_L
20TO_MIDDLE_L 4 4 L 20TO_MIDDLE_L
20TO_MIDDLE_L 5 5 L 20TO_4_S1
#GO_TO_Sn: 4

20TO_4_S1 6 6 L 20TO_4_S2
20TO_4_S1 9 9 L 20TO_4_S2
20TO_4_S2 0 0 L 20TO_4_S2
20TO_4_S2 1 1 L 20TO_4_S2
20TO_4_S2 7 7 L 20TO_4_S2
20TO_4_S2 8 8 L 20TO_4_S2
20TO_4_S2 6 6 L 20TO_4_S3
20TO_4_S2 9 9 L 20TO_4_S3
20TO_4_S3 0 0 L 20TO_4_S3
20TO_4_S3 1 1 L 20TO_4_S3
20TO_4_S3 7 7 L 20TO_4_S3
20TO_4_S3 8 8 L 20TO_4_S3
20TO_4_S3 6 6 L 20TO_4_S4
20TO_4_S3 9 9 L 20TO_4_S4
20TO_4_S4 0 0 L 20TO_4_S4
20TO_4_S4 1 1 L 20TO_4_S4
20TO_4_S4 7 7 L 20TO_4_S4
20TO_4_S4 8 8 L 20TO_4_S4
20TO_4_S4 6 6 L 20COPY_VALUE
20TO_4_S4 9 6 L 20COPY_VALUE
# Move Left until start of S4
# Copy the first non-7/8 value
20COPY_VALUE 0 7 R 20MOVE_ZERO
20COPY_VALUE 1 8 R 20MOVE_ONE
20COPY_VALUE 7 7 L 20COPY_VALUE
20COPY_VALUE 8 8 L 20COPY_VALUE
20COPY_VALUE 6 6 R 20RESTORE_VALUE

# Move a 0 to number B
20MOVE_ZERO 0 0 R 20MOVE_ZERO
20MOVE_ZERO 1 1 R 20MOVE_ZERO
20MOVE_ZERO 2 2 R 20MOVE_ZERO
20MOVE_ZERO 3 3 R 20MOVE_ZERO
20MOVE_ZERO 4 4 L 20MOVE_ZERO_2
20MOVE_ZERO 5 5 R 20MOVE_ZERO
20MOVE_ZERO 6 6 R 20MOVE_ZERO
20MOVE_ZERO 7 7 R 20MOVE_ZERO
20MOVE_ZERO 8 8 R 20MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
20MOVE_ZERO_2 0 0 L 20MOVE_ZERO_2
20MOVE_ZERO_2 1 1 L 20MOVE_ZERO_2
20MOVE_ZERO_2 7 0 S 20TO_MIDDLE_L
# Move a 1 to number B
20MOVE_ONE 0 0 R 20MOVE_ONE
20MOVE_ONE 1 1 R 20MOVE_ONE
20MOVE_ONE 2 2 R 20MOVE_ONE
20MOVE_ONE 3 3 R 20MOVE_ONE
20MOVE_ONE 4 4 L 20MOVE_ONE_2
20MOVE_ONE 5 5 R 20MOVE_ONE
20MOVE_ONE 6 6 R 20MOVE_ONE
20MOVE_ONE 7 7 R 20MOVE_ONE
20MOVE_ONE 8 8 R 20MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
20MOVE_ONE_2 0 0 L 20MOVE_ONE_2
20MOVE_ONE_2 1 1 L 20MOVE_ONE_2
20MOVE_ONE_2 7 1 S 20TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
20RESTORE_VALUE 7 0 R 20RESTORE_VALUE
20RESTORE_VALUE 8 1 R 20RESTORE_VALUE
20RESTORE_VALUE 6 6 S 20TO_START
# Go back to the start
20TO_START 0 0 R 20TO_START
20TO_START 1 1 R 20TO_START
20TO_START 6 6 R 20TO_START
20TO_START 5 5 S 20END



#
#asm ADD
#


20END 5 5 S 21START

# Start of the addition program
21START 5 5 R 21FIND_B_END

# Find the end of the second number
21FIND_B_END 0 0 R 21FIND_B_END
21FIND_B_END 1 1 R 21FIND_B_END
21FIND_B_END 2 2 R 21FIND_B_END
21FIND_B_END 3 3 R 21FIND_B_END
21FIND_B_END 7 7 R 21FIND_B_END
21FIND_B_END 8 8 R 21FIND_B_END
21FIND_B_END 4 4 L 21ADD_DIGIT

# Find first non-added digit
21ADD_DIGIT 7 7 L 21ADD_DIGIT
21ADD_DIGIT 8 8 L 21ADD_DIGIT
21ADD_DIGIT 0 7 L 21ADD_DIGIT_ZERO
21ADD_DIGIT 1 7 L 21ADD_DIGIT_ONE
21ADD_DIGIT 3 3 R 21RESTORE

# Add a zero
21ADD_DIGIT_ZERO 0 0 L 21ADD_DIGIT_ZERO
21ADD_DIGIT_ZERO 1 1 L 21ADD_DIGIT_ZERO
21ADD_DIGIT_ZERO 3 3 L 21ADD_DIGIT_ZERO_1
21ADD_DIGIT_ZERO_1 7 7 L 21ADD_DIGIT_ZERO_1
21ADD_DIGIT_ZERO_1 8 8 L 21ADD_DIGIT_ZERO_1
21ADD_DIGIT_ZERO_1 0 7 L 21FIND_B_END
21ADD_DIGIT_ZERO_1 1 8 L 21FIND_B_END

# Add a one
21ADD_DIGIT_ONE 0 0 L 21ADD_DIGIT_ONE
21ADD_DIGIT_ONE 1 1 L 21ADD_DIGIT_ONE
21ADD_DIGIT_ONE 3 3 L 21ADD_DIGIT_ONE_1
21ADD_DIGIT_ONE_1 7 7 L 21ADD_DIGIT_ONE_1
21ADD_DIGIT_ONE_1 8 8 L 21ADD_DIGIT_ONE_1
21ADD_DIGIT_ONE_1 0 8 L 21FIND_B_END
21ADD_DIGIT_ONE_1 1 7 L 21ADD_DIGIT_ONE_2

21ADD_DIGIT_ONE_2 0 1 R 21FIND_B_END
21ADD_DIGIT_ONE_2 1 0 L 21ADD_DIGIT_ONE_2

# Return to the middle of the tape
21RESTORE 7 0 R 21RESTORE
21RESTORE 8 1 R 21RESTORE
21RESTORE 4 4 L 21RESTORE_1

21RESTORE_1 0 0 L 21RESTORE_1
21RESTORE_1 1 1 L 21RESTORE_1
21RESTORE_1 2 2 L 21RESTORE_1
21RESTORE_1 3 3 L 21RESTORE_1
21RESTORE_1 7 0 L 21RESTORE_1
21RESTORE_1 8 1 L 21RESTORE_1
21RESTORE_1 5 5 S 21END



#
#asm STORE S3 A
#


21END 5 5 S 22START

22START 5 5 L 22TO_3_S1
#GO_TO_Sn: 3

22TO_3_S1 6 6 L 22TO_3_S2
22TO_3_S1 9 9 L 22TO_3_S2
22TO_3_S2 0 0 L 22TO_3_S2
22TO_3_S2 1 1 L 22TO_3_S2
22TO_3_S2 7 7 L 22TO_3_S2
22TO_3_S2 8 8 L 22TO_3_S2
22TO_3_S2 6 6 L 22TO_3_S3
22TO_3_S2 9 9 L 22TO_3_S3
22TO_3_S3 0 0 L 22TO_3_S3
22TO_3_S3 1 1 L 22TO_3_S3
22TO_3_S3 7 7 L 22TO_3_S3
22TO_3_S3 8 8 L 22TO_3_S3
22TO_3_S3 6 9 L 22SET_TO_7
22TO_3_S3 9 9 L 22SET_TO_7

# Set all the values to 7 untill the start of S1
22SET_TO_7 0 7 L 22SET_TO_7
22SET_TO_7 1 7 L 22SET_TO_7
22SET_TO_7 6 6 R 22TO_MIDDLE_R
# Find the middle
22TO_MIDDLE_R 1 1 R 22TO_MIDDLE_R
22TO_MIDDLE_R 0 0 R 22TO_MIDDLE_R
22TO_MIDDLE_R 7 7 R 22TO_MIDDLE_R
22TO_MIDDLE_R 2 2 R 22TO_MIDDLE_R
22TO_MIDDLE_R 6 6 R 22TO_MIDDLE_R
22TO_MIDDLE_R 9 9 R 22TO_MIDDLE_R
22TO_MIDDLE_R 5 5 R 22A_END

# to end of A
22A_END 0 0 R 22A_END
22A_END 1 1 R 22A_END
22A_END 2 2 R 22A_END
22A_END 7 7 R 22A_END
22A_END 8 8 R 22A_END
22A_END 3 3 L 22COPY_VALUE

# Move Left until end of A
# Copy the first non-7/MovH8 value
22COPY_VALUE 0 7 L 22MOVE_ZERO
22COPY_VALUE 1 8 L 22MOVE_ONE
22COPY_VALUE 3 3 L 22COPY_VALUE
22COPY_VALUE 7 7 L 22COPY_VALUE
22COPY_VALUE 8 8 L 22COPY_VALUE
22COPY_VALUE 2 2 R 22RESTORE_VALUE

# Move a 0 to number 9
22MOVE_ZERO 0 0 L 22MOVE_ZERO
22MOVE_ZERO 1 1 L 22MOVE_ZERO
22MOVE_ZERO 2 2 L 22MOVE_ZERO
22MOVE_ZERO 3 3 L 22MOVE_ZERO
22MOVE_ZERO 4 4 L 22MOVE_ZERO
22MOVE_ZERO 9 9 L 22MOVE_ZERO_2
22MOVE_ZERO 5 5 L 22MOVE_ZERO
22MOVE_ZERO 6 6 L 22MOVE_ZERO
22MOVE_ZERO 7 7 L 22MOVE_ZERO
22MOVE_ZERO 8 8 L 22MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
22MOVE_ZERO_2 0 0 L 22MOVE_ZERO_2
22MOVE_ZERO_2 1 1 L 22MOVE_ZERO_2
22MOVE_ZERO_2 7 0 S 22TO_MIDDLE_R
# Move a 1 to number 9
22MOVE_ONE 0 0 L 22MOVE_ONE
22MOVE_ONE 1 1 L 22MOVE_ONE
22MOVE_ONE 2 2 L 22MOVE_ONE
22MOVE_ONE 3 3 L 22MOVE_ONE
22MOVE_ONE 4 4 L 22MOVE_ONE
22MOVE_ONE 9 9 L 22MOVE_ONE_2
22MOVE_ONE 5 5 L 22MOVE_ONE
22MOVE_ONE 6 6 L 22MOVE_ONE
22MOVE_ONE 7 7 L 22MOVE_ONE
22MOVE_ONE 8 8 L 22MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
22MOVE_ONE_2 0 0 L 22MOVE_ONE_2
22MOVE_ONE_2 1 1 L 22MOVE_ONE_2
22MOVE_ONE_2 7 1 S 22TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
22RESTORE_VALUE 7 0 R 22RESTORE_VALUE
22RESTORE_VALUE 8 1 R 22RESTORE_VALUE
22RESTORE_VALUE 3 3 L 22RESET_STORAGE_MARKER
# Reset 9 to 6
22RESET_STORAGE_MARKER 0 0 L 22RESET_STORAGE_MARKER
22RESET_STORAGE_MARKER 1 1 L 22RESET_STORAGE_MARKER
22RESET_STORAGE_MARKER 5 5 L 22RESET_STORAGE_MARKER
22RESET_STORAGE_MARKER 6 6 L 22RESET_STORAGE_MARKER
22RESET_STORAGE_MARKER 2 2 L 22RESET_STORAGE_MARKER
22RESET_STORAGE_MARKER 9 6 R 22RETURN_TO_MIDDLE
# Return to middle
22RETURN_TO_MIDDLE 0 0 R 22RETURN_TO_MIDDLE
22RETURN_TO_MIDDLE 1 1 R 22RETURN_TO_MIDDLE
22RETURN_TO_MIDDLE 6 6 R 22RETURN_TO_MIDDLE
22RETURN_TO_MIDDLE 5 5 S 22END


#
#asm JMP L3
#


22END 5 5 S 23START
23START 5 5 S LABEL_L3

#
#asm L4:
#

LABEL_L4 5 5 S 23END

#
#asm LOAD S3 A
#


23END 5 5 S 24START

# Start of loading
24START 5 5 R 24TO_A_END_R
# To end of number A
24TO_A_END_R 0 0 R 24TO_A_END_R
24TO_A_END_R 1 1 R 24TO_A_END_R
24TO_A_END_R 2 2 R 24TO_A_END_R
24TO_A_END_R 3 3 L 24SET_TO_7

# Move to the start of number A, and set all values to 7
24SET_TO_7 0 7 L 24SET_TO_7
24SET_TO_7 1 7 L 24SET_TO_7
24SET_TO_7 2 2 L 24TO_MIDDLE_L
# Find the middle
24TO_MIDDLE_L 1 1 L 24TO_MIDDLE_L
24TO_MIDDLE_L 0 0 L 24TO_MIDDLE_L
24TO_MIDDLE_L 7 7 L 24TO_MIDDLE_L
24TO_MIDDLE_L 2 2 L 24TO_MIDDLE_L
24TO_MIDDLE_L 3 3 L 24TO_MIDDLE_L
24TO_MIDDLE_L 4 4 L 24TO_MIDDLE_L
24TO_MIDDLE_L 5 5 L 24TO_3_S1
#GO_TO_Sn: 3

24TO_3_S1 6 6 L 24TO_3_S2
24TO_3_S1 9 9 L 24TO_3_S2
24TO_3_S2 0 0 L 24TO_3_S2
24TO_3_S2 1 1 L 24TO_3_S2
24TO_3_S2 7 7 L 24TO_3_S2
24TO_3_S2 8 8 L 24TO_3_S2
24TO_3_S2 6 6 L 24TO_3_S3
24TO_3_S2 9 9 L 24TO_3_S3
24TO_3_S3 0 0 L 24TO_3_S3
24TO_3_S3 1 1 L 24TO_3_S3
24TO_3_S3 7 7 L 24TO_3_S3
24TO_3_S3 8 8 L 24TO_3_S3
24TO_3_S3 6 6 L 24COPY_VALUE
24TO_3_S3 9 6 L 24COPY_VALUE
# Move Left until start of S3
# Copy the first non-7/8 value
24COPY_VALUE 0 7 R 24MOVE_ZERO
24COPY_VALUE 1 8 R 24MOVE_ONE
24COPY_VALUE 7 7 L 24COPY_VALUE
24COPY_VALUE 8 8 L 24COPY_VALUE
24COPY_VALUE 6 6 R 24RESTORE_VALUE

# Move a 0 to number A
24MOVE_ZERO 0 0 R 24MOVE_ZERO
24MOVE_ZERO 1 1 R 24MOVE_ZERO
24MOVE_ZERO 2 2 R 24MOVE_ZERO
24MOVE_ZERO 3 3 L 24MOVE_ZERO_2
24MOVE_ZERO 4 4 R 24MOVE_ZERO
24MOVE_ZERO 5 5 R 24MOVE_ZERO
24MOVE_ZERO 6 6 R 24MOVE_ZERO
24MOVE_ZERO 7 7 R 24MOVE_ZERO
24MOVE_ZERO 8 8 R 24MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
24MOVE_ZERO_2 0 0 L 24MOVE_ZERO_2
24MOVE_ZERO_2 1 1 L 24MOVE_ZERO_2
24MOVE_ZERO_2 7 0 S 24TO_MIDDLE_L
# Move a 1 to number A
24MOVE_ONE 0 0 R 24MOVE_ONE
24MOVE_ONE 1 1 R 24MOVE_ONE
24MOVE_ONE 2 2 R 24MOVE_ONE
24MOVE_ONE 3 3 L 24MOVE_ONE_2
24MOVE_ONE 4 4 R 24MOVE_ONE
24MOVE_ONE 5 5 R 24MOVE_ONE
24MOVE_ONE 6 6 R 24MOVE_ONE
24MOVE_ONE 7 7 R 24MOVE_ONE
24MOVE_ONE 8 8 R 24MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
24MOVE_ONE_2 0 0 L 24MOVE_ONE_2
24MOVE_ONE_2 1 1 L 24MOVE_ONE_2
24MOVE_ONE_2 7 1 S 24TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
24RESTORE_VALUE 7 0 R 24RESTORE_VALUE
24RESTORE_VALUE 8 1 R 24RESTORE_VALUE
24RESTORE_VALUE 6 6 S 24TO_START
# Go back to the start
24TO_START 0 0 R 24TO_START
24TO_START 1 1 R 24TO_START
24TO_START 6 6 R 24TO_START
24TO_START 5 5 S 24END


24END 5 5 S END