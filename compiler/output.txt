6 0 0 0 0 0 0 0 0 6 !5 2 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 10

# Original program

#program fn add(b, c) {
#program     return b + c;
#program };
#program 

START 5 5 S 0END

#
#asm L1:
#

LABEL_L1 5 5 S 0END

#
#asm LOAD S2 A
#


0END 5 5 S 1START

# Start of loading
1START 5 5 R 1TO_A_END_R
# To end of number A
1TO_A_END_R 0 0 R 1TO_A_END_R
1TO_A_END_R 1 1 R 1TO_A_END_R
1TO_A_END_R 2 2 R 1TO_A_END_R
1TO_A_END_R 3 3 L 1SET_TO_7

# Move to the start of number A, and set all values to 7
1SET_TO_7 0 7 L 1SET_TO_7
1SET_TO_7 1 7 L 1SET_TO_7
1SET_TO_7 2 2 L 1TO_MIDDLE_L
# Find the middle
1TO_MIDDLE_L 1 1 L 1TO_MIDDLE_L
1TO_MIDDLE_L 0 0 L 1TO_MIDDLE_L
1TO_MIDDLE_L 7 7 L 1TO_MIDDLE_L
1TO_MIDDLE_L 2 2 L 1TO_MIDDLE_L
1TO_MIDDLE_L 3 3 L 1TO_MIDDLE_L
1TO_MIDDLE_L 4 4 L 1TO_MIDDLE_L
1TO_MIDDLE_L 5 5 L 1TO_S1_END
# To end of S1
1TO_S1_END 6 6 L 1TO_S2_END
# To end of S2
1TO_S2_END 0 0 L 1TO_S2_END
1TO_S2_END 1 1 L 1TO_S2_END
1TO_S2_END 6 6 L 1COPY_VALUE
# Move Left until start of S2
# Copy the first non-7/8 value
1COPY_VALUE 0 7 R 1MOVE_ZERO
1COPY_VALUE 1 8 R 1MOVE_ONE
1COPY_VALUE 7 7 L 1COPY_VALUE
1COPY_VALUE 8 8 L 1COPY_VALUE
1COPY_VALUE 6 6 R 1RESTORE_VALUE

# Move a 0 to number A
1MOVE_ZERO 0 0 R 1MOVE_ZERO
1MOVE_ZERO 1 1 R 1MOVE_ZERO
1MOVE_ZERO 2 2 R 1MOVE_ZERO
1MOVE_ZERO 3 3 L 1MOVE_ZERO_2
1MOVE_ZERO 4 4 R 1MOVE_ZERO
1MOVE_ZERO 5 5 R 1MOVE_ZERO
1MOVE_ZERO 6 6 R 1MOVE_ZERO
1MOVE_ZERO 7 7 R 1MOVE_ZERO
1MOVE_ZERO 8 8 R 1MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
1MOVE_ZERO_2 0 0 L 1MOVE_ZERO_2
1MOVE_ZERO_2 1 1 L 1MOVE_ZERO_2
1MOVE_ZERO_2 7 0 S 1TO_MIDDLE_L
# Move a 1 to number A
1MOVE_ONE 0 0 R 1MOVE_ONE
1MOVE_ONE 1 1 R 1MOVE_ONE
1MOVE_ONE 2 2 R 1MOVE_ONE
1MOVE_ONE 3 3 L 1MOVE_ONE_2
1MOVE_ONE 4 4 R 1MOVE_ONE
1MOVE_ONE 5 5 R 1MOVE_ONE
1MOVE_ONE 6 6 R 1MOVE_ONE
1MOVE_ONE 7 7 R 1MOVE_ONE
1MOVE_ONE 8 8 R 1MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
1MOVE_ONE_2 0 0 L 1MOVE_ONE_2
1MOVE_ONE_2 1 1 L 1MOVE_ONE_2
1MOVE_ONE_2 7 1 S 1TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
1RESTORE_VALUE 7 0 R 1RESTORE_VALUE
1RESTORE_VALUE 8 1 R 1RESTORE_VALUE
1RESTORE_VALUE 6 6 S 1TO_START
# Go back to the start
1TO_START 0 0 R 1TO_START
1TO_START 1 1 R 1TO_START
1TO_START 6 6 R 1TO_START
1TO_START 5 5 S 1END



#
#asm LOAD S3 B
#


1END 5 5 S 2START

# Start of loading
2START 5 5 R 2TO_B_END_R
# To end of number B
2TO_B_END_R 0 0 R 2TO_B_END_R
2TO_B_END_R 1 1 R 2TO_B_END_R
2TO_B_END_R 2 2 R 2TO_B_END_R
2TO_B_END_R 3 3 R 2TO_B_END_R
2TO_B_END_R 4 4 L 2SET_TO_7

# Move to the start of number B, and set all values to 7
2SET_TO_7 0 7 L 2SET_TO_7
2SET_TO_7 1 7 L 2SET_TO_7
2SET_TO_7 3 3 L 2TO_MIDDLE_L
# Find the middle
2TO_MIDDLE_L 1 1 L 2TO_MIDDLE_L
2TO_MIDDLE_L 0 0 L 2TO_MIDDLE_L
2TO_MIDDLE_L 7 7 L 2TO_MIDDLE_L
2TO_MIDDLE_L 2 2 L 2TO_MIDDLE_L
2TO_MIDDLE_L 3 3 L 2TO_MIDDLE_L
2TO_MIDDLE_L 4 4 L 2TO_MIDDLE_L
2TO_MIDDLE_L 5 5 L 2TO_S1_END
# To end of S1
2TO_S1_END 6 6 L 2TO_S2_END
# To end of S2
2TO_S2_END 0 0 L 2TO_S2_END
2TO_S2_END 1 1 L 2TO_S2_END
2TO_S2_END 6 6 L 2TO_S3_END
# To end of S3
2TO_S3_END 0 0 L 2TO_S3_END
2TO_S3_END 1 1 L 2TO_S3_END
2TO_S3_END 6 6 L 2COPY_VALUE
# Move Left until start of S3
# Copy the first non-7/8 value
2COPY_VALUE 0 7 R 2MOVE_ZERO
2COPY_VALUE 1 8 R 2MOVE_ONE
2COPY_VALUE 7 7 L 2COPY_VALUE
2COPY_VALUE 8 8 L 2COPY_VALUE
2COPY_VALUE 6 6 R 2RESTORE_VALUE

# Move a 0 to number B
2MOVE_ZERO 0 0 R 2MOVE_ZERO
2MOVE_ZERO 1 1 R 2MOVE_ZERO
2MOVE_ZERO 2 2 R 2MOVE_ZERO
2MOVE_ZERO 3 3 R 2MOVE_ZERO
2MOVE_ZERO 4 4 L 2MOVE_ZERO_2
2MOVE_ZERO 5 5 R 2MOVE_ZERO
2MOVE_ZERO 6 6 R 2MOVE_ZERO
2MOVE_ZERO 7 7 R 2MOVE_ZERO
2MOVE_ZERO 8 8 R 2MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
2MOVE_ZERO_2 0 0 L 2MOVE_ZERO_2
2MOVE_ZERO_2 1 1 L 2MOVE_ZERO_2
2MOVE_ZERO_2 7 0 S 2TO_MIDDLE_L
# Move a 1 to number B
2MOVE_ONE 0 0 R 2MOVE_ONE
2MOVE_ONE 1 1 R 2MOVE_ONE
2MOVE_ONE 2 2 R 2MOVE_ONE
2MOVE_ONE 3 3 R 2MOVE_ONE
2MOVE_ONE 4 4 L 2MOVE_ONE_2
2MOVE_ONE 5 5 R 2MOVE_ONE
2MOVE_ONE 6 6 R 2MOVE_ONE
2MOVE_ONE 7 7 R 2MOVE_ONE
2MOVE_ONE 8 8 R 2MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
2MOVE_ONE_2 0 0 L 2MOVE_ONE_2
2MOVE_ONE_2 1 1 L 2MOVE_ONE_2
2MOVE_ONE_2 7 1 S 2TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
2RESTORE_VALUE 7 0 R 2RESTORE_VALUE
2RESTORE_VALUE 8 1 R 2RESTORE_VALUE
2RESTORE_VALUE 6 6 S 2TO_START
# Go back to the start
2TO_START 0 0 R 2TO_START
2TO_START 1 1 R 2TO_START
2TO_START 6 6 R 2TO_START
2TO_START 5 5 S 2END



#
#asm ADD
#


2END 5 5 S 3START

# Start of the addition program
3START 5 5 R 3FIND_B_END

# Find the end of the second number
3FIND_B_END 0 0 R 3FIND_B_END
3FIND_B_END 1 1 R 3FIND_B_END
3FIND_B_END 2 2 R 3FIND_B_END
3FIND_B_END 3 3 R 3FIND_B_END
3FIND_B_END 7 7 R 3FIND_B_END
3FIND_B_END 8 8 R 3FIND_B_END
3FIND_B_END 4 4 L 3ADD_DIGIT

# Find first non-added digit
3ADD_DIGIT 7 7 L 3ADD_DIGIT
3ADD_DIGIT 8 8 L 3ADD_DIGIT
3ADD_DIGIT 0 7 L 3ADD_DIGIT_ZERO
3ADD_DIGIT 1 7 L 3ADD_DIGIT_ONE
3ADD_DIGIT 3 3 R 3RESTORE

# Add a zero
3ADD_DIGIT_ZERO 0 0 L 3ADD_DIGIT_ZERO
3ADD_DIGIT_ZERO 1 1 L 3ADD_DIGIT_ZERO
3ADD_DIGIT_ZERO 3 3 L 3ADD_DIGIT_ZERO_1
3ADD_DIGIT_ZERO_1 7 7 L 3ADD_DIGIT_ZERO_1
3ADD_DIGIT_ZERO_1 8 8 L 3ADD_DIGIT_ZERO_1
3ADD_DIGIT_ZERO_1 0 7 L 3FIND_B_END
3ADD_DIGIT_ZERO_1 1 8 L 3FIND_B_END

# Add a one
3ADD_DIGIT_ONE 0 0 L 3ADD_DIGIT_ONE
3ADD_DIGIT_ONE 1 1 L 3ADD_DIGIT_ONE
3ADD_DIGIT_ONE 3 3 L 3ADD_DIGIT_ONE_1
3ADD_DIGIT_ONE_1 7 7 L 3ADD_DIGIT_ONE_1
3ADD_DIGIT_ONE_1 8 8 L 3ADD_DIGIT_ONE_1
3ADD_DIGIT_ONE_1 0 8 L 3FIND_B_END
3ADD_DIGIT_ONE_1 1 7 L 3ADD_DIGIT_ONE_2

3ADD_DIGIT_ONE_2 0 1 R 3FIND_B_END
3ADD_DIGIT_ONE_2 1 0 L 3ADD_DIGIT_ONE_2

# Return to the middle of the tape
3RESTORE 7 0 R 3RESTORE
3RESTORE 8 1 R 3RESTORE
3RESTORE 4 4 L 3RESTORE_1

3RESTORE_1 0 0 L 3RESTORE_1
3RESTORE_1 1 1 L 3RESTORE_1
3RESTORE_1 2 2 L 3RESTORE_1
3RESTORE_1 3 3 L 3RESTORE_1
3RESTORE_1 7 0 L 3RESTORE_1
3RESTORE_1 8 1 L 3RESTORE_1
3RESTORE_1 5 5 S 3END



#
#asm STORE S1 A
#


3END 5 5 S 4START

4START 5 5 L 4TO_S1_END
# To end of S1
4TO_S1_END 6 6 L 4SET_TO_7

# Set all the values to 7 untill the start of S1
4SET_TO_7 0 7 L 4SET_TO_7
4SET_TO_7 1 7 L 4SET_TO_7
4SET_TO_7 6 9 R 4TO_MIDDLE_R
# Find the middle
4TO_MIDDLE_R 1 1 R 4TO_MIDDLE_R
4TO_MIDDLE_R 0 0 R 4TO_MIDDLE_R
4TO_MIDDLE_R 7 7 R 4TO_MIDDLE_R
4TO_MIDDLE_R 2 2 R 4TO_MIDDLE_R
4TO_MIDDLE_R 6 6 R 4TO_MIDDLE_R
4TO_MIDDLE_R 5 5 R 4COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
4COPY_VALUE 0 7 L 4MOVE_ZERO
4COPY_VALUE 1 8 L 4MOVE_ONE
4COPY_VALUE 2 2 R 4COPY_VALUE
4COPY_VALUE 7 7 R 4COPY_VALUE
4COPY_VALUE 8 8 R 4COPY_VALUE
4COPY_VALUE 3 3 L 4RESTORE_VALUE

# Move a 0 to number 9
4MOVE_ZERO 0 0 L 4MOVE_ZERO
4MOVE_ZERO 1 1 L 4MOVE_ZERO
4MOVE_ZERO 2 2 L 4MOVE_ZERO
4MOVE_ZERO 3 3 L 4MOVE_ZERO
4MOVE_ZERO 4 4 L 4MOVE_ZERO
4MOVE_ZERO 9 9 R 4MOVE_ZERO_2
4MOVE_ZERO 5 5 L 4MOVE_ZERO
4MOVE_ZERO 6 6 L 4MOVE_ZERO
4MOVE_ZERO 7 7 L 4MOVE_ZERO
4MOVE_ZERO 8 8 L 4MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
4MOVE_ZERO_2 0 0 R 4MOVE_ZERO_2
4MOVE_ZERO_2 1 1 R 4MOVE_ZERO_2
4MOVE_ZERO_2 7 0 S 4TO_MIDDLE_R
# Move a 1 to number 9
4MOVE_ONE 0 0 L 4MOVE_ONE
4MOVE_ONE 1 1 L 4MOVE_ONE
4MOVE_ONE 2 2 L 4MOVE_ONE
4MOVE_ONE 3 3 L 4MOVE_ONE
4MOVE_ONE 4 4 L 4MOVE_ONE
4MOVE_ONE 9 9 R 4MOVE_ONE_2
4MOVE_ONE 5 5 L 4MOVE_ONE
4MOVE_ONE 6 6 L 4MOVE_ONE
4MOVE_ONE 7 7 L 4MOVE_ONE
4MOVE_ONE 8 8 L 4MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
4MOVE_ONE_2 0 0 R 4MOVE_ONE_2
4MOVE_ONE_2 1 1 R 4MOVE_ONE_2
4MOVE_ONE_2 7 1 S 4TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
4RESTORE_VALUE 7 0 L 4RESTORE_VALUE
4RESTORE_VALUE 8 1 L 4RESTORE_VALUE
4RESTORE_VALUE 2 2 L 4RESET_STORAGE_MARKER
# Reset 9 to 6
4RESET_STORAGE_MARKER 0 0 L 4RESET_STORAGE_MARKER
4RESET_STORAGE_MARKER 1 1 L 4RESET_STORAGE_MARKER
4RESET_STORAGE_MARKER 5 5 L 4RESET_STORAGE_MARKER
4RESET_STORAGE_MARKER 6 6 L 4RESET_STORAGE_MARKER
4RESET_STORAGE_MARKER 9 6 R 4RETURN_TO_MIDDLE
# Return to middle
4RETURN_TO_MIDDLE 0 0 R 4RETURN_TO_MIDDLE
4RETURN_TO_MIDDLE 1 1 R 4RETURN_TO_MIDDLE
4RETURN_TO_MIDDLE 6 6 R 4RETURN_TO_MIDDLE
4RETURN_TO_MIDDLE 5 5 S 4END


#
#asm LOAD S1 A
#


4END 5 5 S 5START

# Start of loading
5START 5 5 R 5TO_A_END_R
# To end of number A
5TO_A_END_R 0 0 R 5TO_A_END_R
5TO_A_END_R 1 1 R 5TO_A_END_R
5TO_A_END_R 2 2 R 5TO_A_END_R
5TO_A_END_R 3 3 L 5SET_TO_7

# Move to the start of number A, and set all values to 7
5SET_TO_7 0 7 L 5SET_TO_7
5SET_TO_7 1 7 L 5SET_TO_7
5SET_TO_7 2 2 L 5TO_MIDDLE_L
# Find the middle
5TO_MIDDLE_L 1 1 L 5TO_MIDDLE_L
5TO_MIDDLE_L 0 0 L 5TO_MIDDLE_L
5TO_MIDDLE_L 7 7 L 5TO_MIDDLE_L
5TO_MIDDLE_L 2 2 L 5TO_MIDDLE_L
5TO_MIDDLE_L 3 3 L 5TO_MIDDLE_L
5TO_MIDDLE_L 4 4 L 5TO_MIDDLE_L
5TO_MIDDLE_L 5 5 L 5TO_S1_END
# To end of S1
5TO_S1_END 6 6 L 5COPY_VALUE
# Move Left until start of S1
# Copy the first non-7/8 value
5COPY_VALUE 0 7 R 5MOVE_ZERO
5COPY_VALUE 1 8 R 5MOVE_ONE
5COPY_VALUE 7 7 L 5COPY_VALUE
5COPY_VALUE 8 8 L 5COPY_VALUE
5COPY_VALUE 6 6 R 5RESTORE_VALUE

# Move a 0 to number A
5MOVE_ZERO 0 0 R 5MOVE_ZERO
5MOVE_ZERO 1 1 R 5MOVE_ZERO
5MOVE_ZERO 2 2 R 5MOVE_ZERO
5MOVE_ZERO 3 3 L 5MOVE_ZERO_2
5MOVE_ZERO 4 4 R 5MOVE_ZERO
5MOVE_ZERO 5 5 R 5MOVE_ZERO
5MOVE_ZERO 6 6 R 5MOVE_ZERO
5MOVE_ZERO 7 7 R 5MOVE_ZERO
5MOVE_ZERO 8 8 R 5MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
5MOVE_ZERO_2 0 0 L 5MOVE_ZERO_2
5MOVE_ZERO_2 1 1 L 5MOVE_ZERO_2
5MOVE_ZERO_2 7 0 S 5TO_MIDDLE_L
# Move a 1 to number A
5MOVE_ONE 0 0 R 5MOVE_ONE
5MOVE_ONE 1 1 R 5MOVE_ONE
5MOVE_ONE 2 2 R 5MOVE_ONE
5MOVE_ONE 3 3 L 5MOVE_ONE_2
5MOVE_ONE 4 4 R 5MOVE_ONE
5MOVE_ONE 5 5 R 5MOVE_ONE
5MOVE_ONE 6 6 R 5MOVE_ONE
5MOVE_ONE 7 7 R 5MOVE_ONE
5MOVE_ONE 8 8 R 5MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
5MOVE_ONE_2 0 0 L 5MOVE_ONE_2
5MOVE_ONE_2 1 1 L 5MOVE_ONE_2
5MOVE_ONE_2 7 1 S 5TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
5RESTORE_VALUE 7 0 R 5RESTORE_VALUE
5RESTORE_VALUE 8 1 R 5RESTORE_VALUE
5RESTORE_VALUE 6 6 S 5TO_START
# Go back to the start
5TO_START 0 0 R 5TO_START
5TO_START 1 1 R 5TO_START
5TO_START 6 6 R 5TO_START
5TO_START 5 5 S 5END


5END 5 5 S END