5 2 0 0 0 0 0 0 0 0 3 0 0 0 1 0 1 1 0 4 0 0 0 0 0 1 1 0 6 
# 22 * 6 = 132 ( 10000100 )

# More simple example
#5 2 0 0 0 0 0 3 0 0 1 0 1 4 0 0 1 0 1 6 
# 5 * 5 = 25 ( 11001 )

# Start of the binary multiplication
START 5 5 R FIND_B_END

# Find the end of the B
FIND_B_END 0 0 R FIND_B_END
FIND_B_END 1 1 R FIND_B_END
FIND_B_END 2 2 R FIND_B_END
FIND_B_END 3 3 R FIND_B_END
FIND_B_END 7 7 R FIND_B_END
FIND_B_END 8 8 R FIND_B_END
FIND_B_END 4 4 L CHECK_B

# Check last digit of B
# If last digit is 0, multiply C by 2
# If last digit is 1, Add C to A and then multiply C by 2
CHECK_B 9 9 L CHECK_B
CHECK_B 0 9 R SHIFT_C
CHECK_B 1 9 R ADD_C_TO_A_0
CHECK_B 3 3 L RETURN

## Multiply C by shifting each bit to the left

# First go to end of C
SHIFT_C 9 9 R SHIFT_C
SHIFT_C 4 4 R SHIFT_C
SHIFT_C 0 0 R SHIFT_C
SHIFT_C 1 1 R SHIFT_C
SHIFT_C 6 6 L SHIFT_C_ZERO

# Place a 0 and shift left
SHIFT_C_ZERO 0 0 L SHIFT_C_ZERO
SHIFT_C_ZERO 1 0 L SHIFT_C_ONE
SHIFT_C_ZERO 4 4 L CHECK_B

# Place a 1 and shift left
SHIFT_C_ONE 0 1 L SHIFT_C_ZERO
SHIFT_C_ONE 1 1 L SHIFT_C_ONE
SHIFT_C_ONE 4 4 L CHECK_B

## Add C to A

# First go to end of C
ADD_C_TO_A_0 9 9 R ADD_C_TO_A_0
ADD_C_TO_A_0 3 3 R ADD_C_TO_A_0
ADD_C_TO_A_0 4 4 R ADD_C_TO_A_0
ADD_C_TO_A_0 0 0 R ADD_C_TO_A_0
ADD_C_TO_A_0 1 1 R ADD_C_TO_A_0
ADD_C_TO_A_0 7 7 R ADD_C_TO_A_0
ADD_C_TO_A_0 8 8 R ADD_C_TO_A_0
ADD_C_TO_A_0 6 6 L ADD_C_TO_A_1

# Find first non-moved digit of C, and replace 0 with 7 and 1 with 8
ADD_C_TO_A_1 0 7 L ADD_C_TO_A_ZERO
ADD_C_TO_A_1 1 8 L ADD_C_TO_A_ONE
ADD_C_TO_A_1 7 7 L ADD_C_TO_A_1
ADD_C_TO_A_1 8 8 L ADD_C_TO_A_1
ADD_C_TO_A_1 4 4 R ADD_C_TO_A_RESTORE_0

# Move a 0 from C to end of A
ADD_C_TO_A_ZERO 0 0 L ADD_C_TO_A_ZERO
ADD_C_TO_A_ZERO 1 1 L ADD_C_TO_A_ZERO
ADD_C_TO_A_ZERO 7 7 L ADD_C_TO_A_ZERO
ADD_C_TO_A_ZERO 8 8 L ADD_C_TO_A_ZERO
ADD_C_TO_A_ZERO 9 9 L ADD_C_TO_A_ZERO
ADD_C_TO_A_ZERO 4 4 L ADD_C_TO_A_ZERO
ADD_C_TO_A_ZERO 3 3 L ADD_C_TO_A_ZERO_1

# Set the 0 in A to 7, except if its a 1
ADD_C_TO_A_ZERO_1 7 7 L ADD_C_TO_A_ZERO_1
ADD_C_TO_A_ZERO_1 8 8 L ADD_C_TO_A_ZERO_1
ADD_C_TO_A_ZERO_1 0 7 R ADD_C_TO_A_0
ADD_C_TO_A_ZERO_1 1 8 R ADD_C_TO_A_0


# Move a 1 from C to end of A
ADD_C_TO_A_ONE 0 0 L ADD_C_TO_A_ONE
ADD_C_TO_A_ONE 1 1 L ADD_C_TO_A_ONE
ADD_C_TO_A_ONE 7 7 L ADD_C_TO_A_ONE
ADD_C_TO_A_ONE 8 8 L ADD_C_TO_A_ONE
ADD_C_TO_A_ONE 9 9 L ADD_C_TO_A_ONE
ADD_C_TO_A_ONE 4 4 L ADD_C_TO_A_ONE
ADD_C_TO_A_ONE 3 3 L ADD_C_TO_A_ONE_1

# Set the 1 in A to 8, if its already a 1, make it 7 and move to the next digit
ADD_C_TO_A_ONE_1 7 7 L ADD_C_TO_A_ONE_1
ADD_C_TO_A_ONE_1 8 8 L ADD_C_TO_A_ONE_1
ADD_C_TO_A_ONE_1 0 8 R ADD_C_TO_A_0
ADD_C_TO_A_ONE_1 1 7 L ADD_C_TO_A_ONE_1_MOVE

# Move the 1 to the next digit, if its a 1, make it 0 and move to the next digit
ADD_C_TO_A_ONE_1_MOVE 0 1 R ADD_C_TO_A_0
ADD_C_TO_A_ONE_1_MOVE 1 0 L ADD_C_TO_A_ONE_1_MOVE

# Restore the number in C
ADD_C_TO_A_RESTORE_0 7 0 R ADD_C_TO_A_RESTORE_0
ADD_C_TO_A_RESTORE_0 8 1 R ADD_C_TO_A_RESTORE_0
ADD_C_TO_A_RESTORE_0 6 6 L ADD_C_TO_A_RESTORE_1

# Move to the start of A
ADD_C_TO_A_RESTORE_1 0 0 L ADD_C_TO_A_RESTORE_1
ADD_C_TO_A_RESTORE_1 1 1 L ADD_C_TO_A_RESTORE_1
ADD_C_TO_A_RESTORE_1 3 3 L ADD_C_TO_A_RESTORE_1
ADD_C_TO_A_RESTORE_1 4 4 L ADD_C_TO_A_RESTORE_1
ADD_C_TO_A_RESTORE_1 7 7 L ADD_C_TO_A_RESTORE_1
ADD_C_TO_A_RESTORE_1 8 8 L ADD_C_TO_A_RESTORE_1
ADD_C_TO_A_RESTORE_1 9 9 L ADD_C_TO_A_RESTORE_1
ADD_C_TO_A_RESTORE_1 2 2 R ADD_C_TO_A_RESTORE_2

# Restore the number in A, and move to the end of B
ADD_C_TO_A_RESTORE_2 0 0 R ADD_C_TO_A_RESTORE_2
ADD_C_TO_A_RESTORE_2 1 1 R ADD_C_TO_A_RESTORE_2
ADD_C_TO_A_RESTORE_2 9 9 R ADD_C_TO_A_RESTORE_2
ADD_C_TO_A_RESTORE_2 7 0 R ADD_C_TO_A_RESTORE_2
ADD_C_TO_A_RESTORE_2 8 1 R ADD_C_TO_A_RESTORE_2
ADD_C_TO_A_RESTORE_2 3 3 R ADD_C_TO_A_RESTORE_2
ADD_C_TO_A_RESTORE_2 4 4 L SHIFT_C

# Return to the start of the program
RETURN 0 0 L RETURN
RETURN 1 1 L RETURN
RETURN 2 2 L RETURN
RETURN 5 5 S END