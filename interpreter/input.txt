6 0 0 0 0 0 0 1 0 6 0 0 0 0 0 0 0 1 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 0 0 6 0 0 0 0 0 0 1 0 6 0 0 0 0 0 1 0 0 6 !5 2 0 0 0 0 0 0 0 0 3 0 0 0 0 0 0 0 0 4 0 0 0 0 0 0 0 0 10

# Original program

#program let a = 4;
#program let b = 2;
#program while (a > 0) {
#program     a = a - 1;
#program     b = b * 2;
#program };
#program return b;

START 5 5 S 0END

#
#asm L1:
#

LABEL_L1 5 5 S 0END

#
#asm LOAD S1 A
#


0END 5 5 S 1START

# Start of loading
1START 5 5 R 1TO_A_END_R
# To end of number A
1TO_A_END_R 0 0 R 1TO_A_END_R
1TO_A_END_R 1 1 R 1TO_A_END_R
1TO_A_END_R 2 2 R 1TO_A_END_R
1TO_A_END_R 3 3 L 1SET_TO_7

# Move to the start of number A, and set all values to 7
1SET_TO_7 0 7 L 1SET_TO_7
1SET_TO_7 1 7 L 1SET_TO_7
1SET_TO_7 2 2 L 1TO_MIDDLE_L
# Find the middle
1TO_MIDDLE_L 1 1 L 1TO_MIDDLE_L
1TO_MIDDLE_L 0 0 L 1TO_MIDDLE_L
1TO_MIDDLE_L 7 7 L 1TO_MIDDLE_L
1TO_MIDDLE_L 2 2 L 1TO_MIDDLE_L
1TO_MIDDLE_L 3 3 L 1TO_MIDDLE_L
1TO_MIDDLE_L 4 4 L 1TO_MIDDLE_L
1TO_MIDDLE_L 5 5 L 1TO_S1_END
# To end of S1
1TO_S1_END 6 6 L 1COPY_VALUE
# Move Left until start of S1
# Copy the first non-7/8 value
1COPY_VALUE 0 7 R 1MOVE_ZERO
1COPY_VALUE 1 8 R 1MOVE_ONE
1COPY_VALUE 7 7 L 1COPY_VALUE
1COPY_VALUE 8 8 L 1COPY_VALUE
1COPY_VALUE 6 6 R 1RESTORE_VALUE

# Move a 0 to number A
1MOVE_ZERO 0 0 R 1MOVE_ZERO
1MOVE_ZERO 1 1 R 1MOVE_ZERO
1MOVE_ZERO 2 2 R 1MOVE_ZERO
1MOVE_ZERO 3 3 L 1MOVE_ZERO_2
1MOVE_ZERO 4 4 R 1MOVE_ZERO
1MOVE_ZERO 5 5 R 1MOVE_ZERO
1MOVE_ZERO 6 6 R 1MOVE_ZERO
1MOVE_ZERO 7 7 R 1MOVE_ZERO
1MOVE_ZERO 8 8 R 1MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
1MOVE_ZERO_2 0 0 L 1MOVE_ZERO_2
1MOVE_ZERO_2 1 1 L 1MOVE_ZERO_2
1MOVE_ZERO_2 7 0 S 1TO_MIDDLE_L
# Move a 1 to number A
1MOVE_ONE 0 0 R 1MOVE_ONE
1MOVE_ONE 1 1 R 1MOVE_ONE
1MOVE_ONE 2 2 R 1MOVE_ONE
1MOVE_ONE 3 3 L 1MOVE_ONE_2
1MOVE_ONE 4 4 R 1MOVE_ONE
1MOVE_ONE 5 5 R 1MOVE_ONE
1MOVE_ONE 6 6 R 1MOVE_ONE
1MOVE_ONE 7 7 R 1MOVE_ONE
1MOVE_ONE 8 8 R 1MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
1MOVE_ONE_2 0 0 L 1MOVE_ONE_2
1MOVE_ONE_2 1 1 L 1MOVE_ONE_2
1MOVE_ONE_2 7 1 S 1TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
1RESTORE_VALUE 7 0 R 1RESTORE_VALUE
1RESTORE_VALUE 8 1 R 1RESTORE_VALUE
1RESTORE_VALUE 6 6 S 1TO_START
# Go back to the start
1TO_START 0 0 R 1TO_START
1TO_START 1 1 R 1TO_START
1TO_START 6 6 R 1TO_START
1TO_START 5 5 S 1END



#
#asm LOAD S3 B
#


1END 5 5 S 2START

# Start of loading
2START 5 5 R 2TO_B_END_R
# To end of number B
2TO_B_END_R 0 0 R 2TO_B_END_R
2TO_B_END_R 1 1 R 2TO_B_END_R
2TO_B_END_R 2 2 R 2TO_B_END_R
2TO_B_END_R 3 3 R 2TO_B_END_R
2TO_B_END_R 4 4 L 2SET_TO_7

# Move to the start of number B, and set all values to 7
2SET_TO_7 0 7 L 2SET_TO_7
2SET_TO_7 1 7 L 2SET_TO_7
2SET_TO_7 3 3 L 2TO_MIDDLE_L
# Find the middle
2TO_MIDDLE_L 1 1 L 2TO_MIDDLE_L
2TO_MIDDLE_L 0 0 L 2TO_MIDDLE_L
2TO_MIDDLE_L 7 7 L 2TO_MIDDLE_L
2TO_MIDDLE_L 2 2 L 2TO_MIDDLE_L
2TO_MIDDLE_L 3 3 L 2TO_MIDDLE_L
2TO_MIDDLE_L 4 4 L 2TO_MIDDLE_L
2TO_MIDDLE_L 5 5 L 2TO_S1_END
# To end of S1
2TO_S1_END 6 6 L 2TO_S2_END
# To end of S2
2TO_S2_END 0 0 L 2TO_S2_END
2TO_S2_END 1 1 L 2TO_S2_END
2TO_S2_END 6 6 L 2TO_S3_END
# To end of S3
2TO_S3_END 0 0 L 2TO_S3_END
2TO_S3_END 1 1 L 2TO_S3_END
2TO_S3_END 6 6 L 2COPY_VALUE
# Move Left until start of S3
# Copy the first non-7/8 value
2COPY_VALUE 0 7 R 2MOVE_ZERO
2COPY_VALUE 1 8 R 2MOVE_ONE
2COPY_VALUE 7 7 L 2COPY_VALUE
2COPY_VALUE 8 8 L 2COPY_VALUE
2COPY_VALUE 6 6 R 2RESTORE_VALUE

# Move a 0 to number B
2MOVE_ZERO 0 0 R 2MOVE_ZERO
2MOVE_ZERO 1 1 R 2MOVE_ZERO
2MOVE_ZERO 2 2 R 2MOVE_ZERO
2MOVE_ZERO 3 3 R 2MOVE_ZERO
2MOVE_ZERO 4 4 L 2MOVE_ZERO_2
2MOVE_ZERO 5 5 R 2MOVE_ZERO
2MOVE_ZERO 6 6 R 2MOVE_ZERO
2MOVE_ZERO 7 7 R 2MOVE_ZERO
2MOVE_ZERO 8 8 R 2MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
2MOVE_ZERO_2 0 0 L 2MOVE_ZERO_2
2MOVE_ZERO_2 1 1 L 2MOVE_ZERO_2
2MOVE_ZERO_2 7 0 S 2TO_MIDDLE_L
# Move a 1 to number B
2MOVE_ONE 0 0 R 2MOVE_ONE
2MOVE_ONE 1 1 R 2MOVE_ONE
2MOVE_ONE 2 2 R 2MOVE_ONE
2MOVE_ONE 3 3 R 2MOVE_ONE
2MOVE_ONE 4 4 L 2MOVE_ONE_2
2MOVE_ONE 5 5 R 2MOVE_ONE
2MOVE_ONE 6 6 R 2MOVE_ONE
2MOVE_ONE 7 7 R 2MOVE_ONE
2MOVE_ONE 8 8 R 2MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
2MOVE_ONE_2 0 0 L 2MOVE_ONE_2
2MOVE_ONE_2 1 1 L 2MOVE_ONE_2
2MOVE_ONE_2 7 1 S 2TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
2RESTORE_VALUE 7 0 R 2RESTORE_VALUE
2RESTORE_VALUE 8 1 R 2RESTORE_VALUE
2RESTORE_VALUE 6 6 S 2TO_START
# Go back to the start
2TO_START 0 0 R 2TO_START
2TO_START 1 1 R 2TO_START
2TO_START 6 6 R 2TO_START
2TO_START 5 5 S 2END



#
#asm SUB_SAFE
#


2END 5 5 S 3START

# Start of the subtraction program
3START 5 5 R 3FIND_B_END

# Find the end of the second number
3FIND_B_END 0 0 R 3FIND_B_END
3FIND_B_END 1 1 R 3FIND_B_END
3FIND_B_END 2 2 R 3FIND_B_END
3FIND_B_END 3 3 R 3FIND_B_END
3FIND_B_END 7 7 R 3FIND_B_END
3FIND_B_END 8 8 R 3FIND_B_END
3FIND_B_END 4 4 L 3SUB_DIGIT

# Find first non-subtracted digit
3SUB_DIGIT 7 7 L 3SUB_DIGIT
3SUB_DIGIT 8 8 L 3SUB_DIGIT
3SUB_DIGIT 0 7 L 3SUB_DIGIT_ZERO
3SUB_DIGIT 1 7 L 3SUB_DIGIT_ONE
3SUB_DIGIT 3 3 R 3RESTORE_1

# Subtract a zero
3SUB_DIGIT_ZERO 0 0 L 3SUB_DIGIT_ZERO
3SUB_DIGIT_ZERO 1 1 L 3SUB_DIGIT_ZERO
3SUB_DIGIT_ZERO 3 3 L 3SUB_DIGIT_ZERO_1

3SUB_DIGIT_ZERO_1 7 7 L 3SUB_DIGIT_ZERO_1
3SUB_DIGIT_ZERO_1 8 8 L 3SUB_DIGIT_ZERO_1
3SUB_DIGIT_ZERO_1 0 7 L 3FIND_B_END
3SUB_DIGIT_ZERO_1 1 8 R 3FIND_B_END

# Subtract a one
3SUB_DIGIT_ONE 0 0 L 3SUB_DIGIT_ONE
3SUB_DIGIT_ONE 1 1 L 3SUB_DIGIT_ONE
3SUB_DIGIT_ONE 3 3 L 3SUB_DIGIT_ONE_1

3SUB_DIGIT_ONE_1 7 7 L 3SUB_DIGIT_ONE_1
3SUB_DIGIT_ONE_1 8 8 L 3SUB_DIGIT_ONE_1
3SUB_DIGIT_ONE_1 0 8 L 3SUB_DIGIT_ONE_2
3SUB_DIGIT_ONE_1 1 7 R 3FIND_B_END

3SUB_DIGIT_ONE_2 1 0 R 3FIND_B_END
3SUB_DIGIT_ONE_2 2 2 R 3RESTORE
3SUB_DIGIT_ONE_2 0 1 L 3SUB_DIGIT_ONE_2

# Return to the middle of the tape
3RESTORE 0 0 R 3RESTORE
3RESTORE 1 0 R 3RESTORE
3RESTORE 7 0 R 3RESTORE
3RESTORE 8 0 R 3RESTORE
3RESTORE 3 3 R 3RESTORE_1

3RESTORE_1 0 0 R 3RESTORE_1
3RESTORE_1 1 1 R 3RESTORE_1
3RESTORE_1 7 7 R 3RESTORE_1
3RESTORE_1 8 8 R 3RESTORE_1
3RESTORE_1 4 4 L 3RESTORE_2

3RESTORE_2 0 0 L 3RESTORE_2
3RESTORE_2 1 1 L 3RESTORE_2
3RESTORE_2 2 2 L 3RESTORE_2
3RESTORE_2 3 3 L 3RESTORE_2
3RESTORE_2 7 0 L 3RESTORE_2
3RESTORE_2 8 1 L 3RESTORE_2
3RESTORE_2 5 5 S 3END


#
#asm ISZERO
#


3END 5 5 S 4START

# Start of the ISZERO program
4START 5 5 R 4START
4START 2 2 R 4CHECK_A

# Check for ones in A
4CHECK_A 0 0 R 4CHECK_A
4CHECK_A 1 0 R 4FOUND_ONE
4CHECK_A 3 3 L 4CHECK_A_1

# no ones found in A, set last digit of A to 1
4CHECK_A_1 0 1 L 4RETURN

# Found a 1 in A
4FOUND_ONE 0 0 R 4FOUND_ONE
4FOUND_ONE 1 0 R 4FOUND_ONE
4FOUND_ONE 3 3 L 4FOUND_ONE_1

# Found a 1 in A, return
4FOUND_ONE_1 0 0 L 4RETURN

# Return to middle
4RETURN 0 0 L 4RETURN
4RETURN 1 1 L 4RETURN
4RETURN 2 2 L 4RETURN
4RETURN 5 5 S 4END


#
#asm NOT
#


4END 5 5 S 5START

# Start of NOT program
5START 5 5 R 5FIND_A_END

# Find end of A
5FIND_A_END 0 0 R 5FIND_A_END
5FIND_A_END 1 1 R 5FIND_A_END
5FIND_A_END 2 2 R 5FIND_A_END
5FIND_A_END 3 3 L 5FLIP_DIGIT

# Flip the last digit of A
5FLIP_DIGIT 0 1 L 5RETURN
5FLIP_DIGIT 1 0 L 5RETURN

# Return to the middle of the tape
5RETURN 0 0 L 5RETURN
5RETURN 1 1 L 5RETURN
5RETURN 2 2 L 5RETURN
5RETURN 5 5 S 5END



#
#asm STORE S4 A
#


5END 5 5 S 6START

6START 5 5 L 6TO_S1_END
# To end of S1
6TO_S1_END 6 6 L 6TO_S2_END
# To end of S2
6TO_S2_END 0 0 L 6TO_S2_END
6TO_S2_END 1 1 L 6TO_S2_END
6TO_S2_END 6 6 L 6TO_S3_END
# To end of S3
6TO_S3_END 0 0 L 6TO_S3_END
6TO_S3_END 1 1 L 6TO_S3_END
6TO_S3_END 6 6 L 6TO_S4_END
# To end of S4
6TO_S4_END 0 0 L 6TO_S4_END
6TO_S4_END 1 1 L 6TO_S4_END
6TO_S4_END 6 6 L 6SET_TO_7

# Set all the values to 7 untill the start of S1
6SET_TO_7 0 7 L 6SET_TO_7
6SET_TO_7 1 7 L 6SET_TO_7
6SET_TO_7 6 9 R 6TO_MIDDLE_R
# Find the middle
6TO_MIDDLE_R 1 1 R 6TO_MIDDLE_R
6TO_MIDDLE_R 0 0 R 6TO_MIDDLE_R
6TO_MIDDLE_R 7 7 R 6TO_MIDDLE_R
6TO_MIDDLE_R 2 2 R 6TO_MIDDLE_R
6TO_MIDDLE_R 6 6 R 6TO_MIDDLE_R
6TO_MIDDLE_R 5 5 R 6COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
6COPY_VALUE 0 7 L 6MOVE_ZERO
6COPY_VALUE 1 8 L 6MOVE_ONE
6COPY_VALUE 2 2 R 6COPY_VALUE
6COPY_VALUE 7 7 R 6COPY_VALUE
6COPY_VALUE 8 8 R 6COPY_VALUE
6COPY_VALUE 3 3 L 6RESTORE_VALUE

# Move a 0 to number 9
6MOVE_ZERO 0 0 L 6MOVE_ZERO
6MOVE_ZERO 1 1 L 6MOVE_ZERO
6MOVE_ZERO 2 2 L 6MOVE_ZERO
6MOVE_ZERO 3 3 L 6MOVE_ZERO
6MOVE_ZERO 4 4 L 6MOVE_ZERO
6MOVE_ZERO 9 9 R 6MOVE_ZERO_2
6MOVE_ZERO 5 5 L 6MOVE_ZERO
6MOVE_ZERO 6 6 L 6MOVE_ZERO
6MOVE_ZERO 7 7 L 6MOVE_ZERO
6MOVE_ZERO 8 8 L 6MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
6MOVE_ZERO_2 0 0 R 6MOVE_ZERO_2
6MOVE_ZERO_2 1 1 R 6MOVE_ZERO_2
6MOVE_ZERO_2 7 0 S 6TO_MIDDLE_R
# Move a 1 to number 9
6MOVE_ONE 0 0 L 6MOVE_ONE
6MOVE_ONE 1 1 L 6MOVE_ONE
6MOVE_ONE 2 2 L 6MOVE_ONE
6MOVE_ONE 3 3 L 6MOVE_ONE
6MOVE_ONE 4 4 L 6MOVE_ONE
6MOVE_ONE 9 9 R 6MOVE_ONE_2
6MOVE_ONE 5 5 L 6MOVE_ONE
6MOVE_ONE 6 6 L 6MOVE_ONE
6MOVE_ONE 7 7 L 6MOVE_ONE
6MOVE_ONE 8 8 L 6MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
6MOVE_ONE_2 0 0 R 6MOVE_ONE_2
6MOVE_ONE_2 1 1 R 6MOVE_ONE_2
6MOVE_ONE_2 7 1 S 6TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
6RESTORE_VALUE 7 0 L 6RESTORE_VALUE
6RESTORE_VALUE 8 1 L 6RESTORE_VALUE
6RESTORE_VALUE 2 2 L 6RESET_STORAGE_MARKER
# Reset 9 to 6
6RESET_STORAGE_MARKER 0 0 L 6RESET_STORAGE_MARKER
6RESET_STORAGE_MARKER 1 1 L 6RESET_STORAGE_MARKER
6RESET_STORAGE_MARKER 5 5 L 6RESET_STORAGE_MARKER
6RESET_STORAGE_MARKER 6 6 L 6RESET_STORAGE_MARKER
6RESET_STORAGE_MARKER 9 6 R 6RETURN_TO_MIDDLE
# Return to middle
6RETURN_TO_MIDDLE 0 0 R 6RETURN_TO_MIDDLE
6RETURN_TO_MIDDLE 1 1 R 6RETURN_TO_MIDDLE
6RETURN_TO_MIDDLE 6 6 R 6RETURN_TO_MIDDLE
6RETURN_TO_MIDDLE 5 5 S 6END


#
#asm LOAD S4 A
#


6END 5 5 S 7START

# Start of loading
7START 5 5 R 7TO_A_END_R
# To end of number A
7TO_A_END_R 0 0 R 7TO_A_END_R
7TO_A_END_R 1 1 R 7TO_A_END_R
7TO_A_END_R 2 2 R 7TO_A_END_R
7TO_A_END_R 3 3 L 7SET_TO_7

# Move to the start of number A, and set all values to 7
7SET_TO_7 0 7 L 7SET_TO_7
7SET_TO_7 1 7 L 7SET_TO_7
7SET_TO_7 2 2 L 7TO_MIDDLE_L
# Find the middle
7TO_MIDDLE_L 1 1 L 7TO_MIDDLE_L
7TO_MIDDLE_L 0 0 L 7TO_MIDDLE_L
7TO_MIDDLE_L 7 7 L 7TO_MIDDLE_L
7TO_MIDDLE_L 2 2 L 7TO_MIDDLE_L
7TO_MIDDLE_L 3 3 L 7TO_MIDDLE_L
7TO_MIDDLE_L 4 4 L 7TO_MIDDLE_L
7TO_MIDDLE_L 5 5 L 7TO_S1_END
# To end of S1
7TO_S1_END 6 6 L 7TO_S2_END
# To end of S2
7TO_S2_END 0 0 L 7TO_S2_END
7TO_S2_END 1 1 L 7TO_S2_END
7TO_S2_END 6 6 L 7TO_S3_END
# To end of S3
7TO_S3_END 0 0 L 7TO_S3_END
7TO_S3_END 1 1 L 7TO_S3_END
7TO_S3_END 6 6 L 7TO_S4_END
# To end of S4
7TO_S4_END 0 0 L 7TO_S4_END
7TO_S4_END 1 1 L 7TO_S4_END
7TO_S4_END 6 6 L 7COPY_VALUE
# Move Left until start of S4
# Copy the first non-7/8 value
7COPY_VALUE 0 7 R 7MOVE_ZERO
7COPY_VALUE 1 8 R 7MOVE_ONE
7COPY_VALUE 7 7 L 7COPY_VALUE
7COPY_VALUE 8 8 L 7COPY_VALUE
7COPY_VALUE 6 6 R 7RESTORE_VALUE

# Move a 0 to number A
7MOVE_ZERO 0 0 R 7MOVE_ZERO
7MOVE_ZERO 1 1 R 7MOVE_ZERO
7MOVE_ZERO 2 2 R 7MOVE_ZERO
7MOVE_ZERO 3 3 L 7MOVE_ZERO_2
7MOVE_ZERO 4 4 R 7MOVE_ZERO
7MOVE_ZERO 5 5 R 7MOVE_ZERO
7MOVE_ZERO 6 6 R 7MOVE_ZERO
7MOVE_ZERO 7 7 R 7MOVE_ZERO
7MOVE_ZERO 8 8 R 7MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
7MOVE_ZERO_2 0 0 L 7MOVE_ZERO_2
7MOVE_ZERO_2 1 1 L 7MOVE_ZERO_2
7MOVE_ZERO_2 7 0 S 7TO_MIDDLE_L
# Move a 1 to number A
7MOVE_ONE 0 0 R 7MOVE_ONE
7MOVE_ONE 1 1 R 7MOVE_ONE
7MOVE_ONE 2 2 R 7MOVE_ONE
7MOVE_ONE 3 3 L 7MOVE_ONE_2
7MOVE_ONE 4 4 R 7MOVE_ONE
7MOVE_ONE 5 5 R 7MOVE_ONE
7MOVE_ONE 6 6 R 7MOVE_ONE
7MOVE_ONE 7 7 R 7MOVE_ONE
7MOVE_ONE 8 8 R 7MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
7MOVE_ONE_2 0 0 L 7MOVE_ONE_2
7MOVE_ONE_2 1 1 L 7MOVE_ONE_2
7MOVE_ONE_2 7 1 S 7TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
7RESTORE_VALUE 7 0 R 7RESTORE_VALUE
7RESTORE_VALUE 8 1 R 7RESTORE_VALUE
7RESTORE_VALUE 6 6 S 7TO_START
# Go back to the start
7TO_START 0 0 R 7TO_START
7TO_START 1 1 R 7TO_START
7TO_START 6 6 R 7TO_START
7TO_START 5 5 S 7END



#
#asm ISZERO
#


7END 5 5 S 8START

# Start of the ISZERO program
8START 5 5 R 8START
8START 2 2 R 8CHECK_A

# Check for ones in A
8CHECK_A 0 0 R 8CHECK_A
8CHECK_A 1 0 R 8FOUND_ONE
8CHECK_A 3 3 L 8CHECK_A_1

# no ones found in A, set last digit of A to 1
8CHECK_A_1 0 1 L 8RETURN

# Found a 1 in A
8FOUND_ONE 0 0 R 8FOUND_ONE
8FOUND_ONE 1 0 R 8FOUND_ONE
8FOUND_ONE 3 3 L 8FOUND_ONE_1

# Found a 1 in A, return
8FOUND_ONE_1 0 0 L 8RETURN

# Return to middle
8RETURN 0 0 L 8RETURN
8RETURN 1 1 L 8RETURN
8RETURN 2 2 L 8RETURN
8RETURN 5 5 S 8END


#
#asm JNZ L2
#


8END 5 5 S 9START
# Start of the JUMP if NOT ZERO program
9START 5 5 R 9START
9START 2 2 R 9A_END

# Go to end of A
9A_END 0 0 R 9A_END
9A_END 1 1 R 9A_END
9A_END 3 3 L 9CHECK_A

# no ones found in A, set last digit of A to 1
9CHECK_A 0 1 S 9RETURN_ZERO
9CHECK_A 1 1 S 9RETURN_ONE

# Return to 5
9RETURN_ZERO 0 0 L 9RETURN_ZERO
9RETURN_ZERO 1 1 L 9RETURN_ZERO
9RETURN_ZERO 2 2 L 9RETURN_ZERO
9RETURN_ZERO 5 5 S 9END

9RETURN_ONE 0 0 L 9RETURN_ONE
9RETURN_ONE 1 1 L 9RETURN_ONE
9RETURN_ONE 2 2 L 9RETURN_ONE
9RETURN_ONE 5 5 S LABEL_L2


#
#asm LOAD S1 A
#


9END 5 5 S 10START

# Start of loading
10START 5 5 R 10TO_A_END_R
# To end of number A
10TO_A_END_R 0 0 R 10TO_A_END_R
10TO_A_END_R 1 1 R 10TO_A_END_R
10TO_A_END_R 2 2 R 10TO_A_END_R
10TO_A_END_R 3 3 L 10SET_TO_7

# Move to the start of number A, and set all values to 7
10SET_TO_7 0 7 L 10SET_TO_7
10SET_TO_7 1 7 L 10SET_TO_7
10SET_TO_7 2 2 L 10TO_MIDDLE_L
# Find the middle
10TO_MIDDLE_L 1 1 L 10TO_MIDDLE_L
10TO_MIDDLE_L 0 0 L 10TO_MIDDLE_L
10TO_MIDDLE_L 7 7 L 10TO_MIDDLE_L
10TO_MIDDLE_L 2 2 L 10TO_MIDDLE_L
10TO_MIDDLE_L 3 3 L 10TO_MIDDLE_L
10TO_MIDDLE_L 4 4 L 10TO_MIDDLE_L
10TO_MIDDLE_L 5 5 L 10TO_S1_END
# To end of S1
10TO_S1_END 6 6 L 10COPY_VALUE
# Move Left until start of S1
# Copy the first non-7/8 value
10COPY_VALUE 0 7 R 10MOVE_ZERO
10COPY_VALUE 1 8 R 10MOVE_ONE
10COPY_VALUE 7 7 L 10COPY_VALUE
10COPY_VALUE 8 8 L 10COPY_VALUE
10COPY_VALUE 6 6 R 10RESTORE_VALUE

# Move a 0 to number A
10MOVE_ZERO 0 0 R 10MOVE_ZERO
10MOVE_ZERO 1 1 R 10MOVE_ZERO
10MOVE_ZERO 2 2 R 10MOVE_ZERO
10MOVE_ZERO 3 3 L 10MOVE_ZERO_2
10MOVE_ZERO 4 4 R 10MOVE_ZERO
10MOVE_ZERO 5 5 R 10MOVE_ZERO
10MOVE_ZERO 6 6 R 10MOVE_ZERO
10MOVE_ZERO 7 7 R 10MOVE_ZERO
10MOVE_ZERO 8 8 R 10MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
10MOVE_ZERO_2 0 0 L 10MOVE_ZERO_2
10MOVE_ZERO_2 1 1 L 10MOVE_ZERO_2
10MOVE_ZERO_2 7 0 S 10TO_MIDDLE_L
# Move a 1 to number A
10MOVE_ONE 0 0 R 10MOVE_ONE
10MOVE_ONE 1 1 R 10MOVE_ONE
10MOVE_ONE 2 2 R 10MOVE_ONE
10MOVE_ONE 3 3 L 10MOVE_ONE_2
10MOVE_ONE 4 4 R 10MOVE_ONE
10MOVE_ONE 5 5 R 10MOVE_ONE
10MOVE_ONE 6 6 R 10MOVE_ONE
10MOVE_ONE 7 7 R 10MOVE_ONE
10MOVE_ONE 8 8 R 10MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
10MOVE_ONE_2 0 0 L 10MOVE_ONE_2
10MOVE_ONE_2 1 1 L 10MOVE_ONE_2
10MOVE_ONE_2 7 1 S 10TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
10RESTORE_VALUE 7 0 R 10RESTORE_VALUE
10RESTORE_VALUE 8 1 R 10RESTORE_VALUE
10RESTORE_VALUE 6 6 S 10TO_START
# Go back to the start
10TO_START 0 0 R 10TO_START
10TO_START 1 1 R 10TO_START
10TO_START 6 6 R 10TO_START
10TO_START 5 5 S 10END



#
#asm LOAD S5 B
#


10END 5 5 S 11START

# Start of loading
11START 5 5 R 11TO_B_END_R
# To end of number B
11TO_B_END_R 0 0 R 11TO_B_END_R
11TO_B_END_R 1 1 R 11TO_B_END_R
11TO_B_END_R 2 2 R 11TO_B_END_R
11TO_B_END_R 3 3 R 11TO_B_END_R
11TO_B_END_R 4 4 L 11SET_TO_7

# Move to the start of number B, and set all values to 7
11SET_TO_7 0 7 L 11SET_TO_7
11SET_TO_7 1 7 L 11SET_TO_7
11SET_TO_7 3 3 L 11TO_MIDDLE_L
# Find the middle
11TO_MIDDLE_L 1 1 L 11TO_MIDDLE_L
11TO_MIDDLE_L 0 0 L 11TO_MIDDLE_L
11TO_MIDDLE_L 7 7 L 11TO_MIDDLE_L
11TO_MIDDLE_L 2 2 L 11TO_MIDDLE_L
11TO_MIDDLE_L 3 3 L 11TO_MIDDLE_L
11TO_MIDDLE_L 4 4 L 11TO_MIDDLE_L
11TO_MIDDLE_L 5 5 L 11TO_S1_END
# To end of S1
11TO_S1_END 6 6 L 11TO_S2_END
# To end of S2
11TO_S2_END 0 0 L 11TO_S2_END
11TO_S2_END 1 1 L 11TO_S2_END
11TO_S2_END 6 6 L 11TO_S3_END
# To end of S3
11TO_S3_END 0 0 L 11TO_S3_END
11TO_S3_END 1 1 L 11TO_S3_END
11TO_S3_END 6 6 L 11TO_S4_END
# To end of S4
11TO_S4_END 0 0 L 11TO_S4_END
11TO_S4_END 1 1 L 11TO_S4_END
11TO_S4_END 6 6 L 11TO_S5_END
# To end of S5
11TO_S5_END 0 0 L 11TO_S5_END
11TO_S5_END 1 1 L 11TO_S5_END
11TO_S5_END 6 6 L 11COPY_VALUE
# Move Left until start of S5
# Copy the first non-7/8 value
11COPY_VALUE 0 7 R 11MOVE_ZERO
11COPY_VALUE 1 8 R 11MOVE_ONE
11COPY_VALUE 7 7 L 11COPY_VALUE
11COPY_VALUE 8 8 L 11COPY_VALUE
11COPY_VALUE 6 6 R 11RESTORE_VALUE

# Move a 0 to number B
11MOVE_ZERO 0 0 R 11MOVE_ZERO
11MOVE_ZERO 1 1 R 11MOVE_ZERO
11MOVE_ZERO 2 2 R 11MOVE_ZERO
11MOVE_ZERO 3 3 R 11MOVE_ZERO
11MOVE_ZERO 4 4 L 11MOVE_ZERO_2
11MOVE_ZERO 5 5 R 11MOVE_ZERO
11MOVE_ZERO 6 6 R 11MOVE_ZERO
11MOVE_ZERO 7 7 R 11MOVE_ZERO
11MOVE_ZERO 8 8 R 11MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
11MOVE_ZERO_2 0 0 L 11MOVE_ZERO_2
11MOVE_ZERO_2 1 1 L 11MOVE_ZERO_2
11MOVE_ZERO_2 7 0 S 11TO_MIDDLE_L
# Move a 1 to number B
11MOVE_ONE 0 0 R 11MOVE_ONE
11MOVE_ONE 1 1 R 11MOVE_ONE
11MOVE_ONE 2 2 R 11MOVE_ONE
11MOVE_ONE 3 3 R 11MOVE_ONE
11MOVE_ONE 4 4 L 11MOVE_ONE_2
11MOVE_ONE 5 5 R 11MOVE_ONE
11MOVE_ONE 6 6 R 11MOVE_ONE
11MOVE_ONE 7 7 R 11MOVE_ONE
11MOVE_ONE 8 8 R 11MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
11MOVE_ONE_2 0 0 L 11MOVE_ONE_2
11MOVE_ONE_2 1 1 L 11MOVE_ONE_2
11MOVE_ONE_2 7 1 S 11TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
11RESTORE_VALUE 7 0 R 11RESTORE_VALUE
11RESTORE_VALUE 8 1 R 11RESTORE_VALUE
11RESTORE_VALUE 6 6 S 11TO_START
# Go back to the start
11TO_START 0 0 R 11TO_START
11TO_START 1 1 R 11TO_START
11TO_START 6 6 R 11TO_START
11TO_START 5 5 S 11END



#
#asm SUB
#


11END 5 5 S 12START

# Start of the subtraction program
12START 5 5 R 12FIND_B_END

# Find the end of the second number
12FIND_B_END 0 0 R 12FIND_B_END
12FIND_B_END 1 1 R 12FIND_B_END
12FIND_B_END 2 2 R 12FIND_B_END
12FIND_B_END 3 3 R 12FIND_B_END
12FIND_B_END 7 7 R 12FIND_B_END
12FIND_B_END 8 8 R 12FIND_B_END
12FIND_B_END 4 4 L 12SUB_DIGIT

# Find first non-subtracted digit
12SUB_DIGIT 7 7 L 12SUB_DIGIT
12SUB_DIGIT 8 8 L 12SUB_DIGIT
12SUB_DIGIT 0 7 L 12SUB_DIGIT_ZERO
12SUB_DIGIT 1 7 L 12SUB_DIGIT_ONE
12SUB_DIGIT 3 3 R 12RESTORE

# Subtract a zero
12SUB_DIGIT_ZERO 0 0 L 12SUB_DIGIT_ZERO
12SUB_DIGIT_ZERO 1 1 L 12SUB_DIGIT_ZERO
12SUB_DIGIT_ZERO 3 3 L 12SUB_DIGIT_ZERO_1

12SUB_DIGIT_ZERO_1 7 7 L 12SUB_DIGIT_ZERO_1
12SUB_DIGIT_ZERO_1 8 8 L 12SUB_DIGIT_ZERO_1
12SUB_DIGIT_ZERO_1 0 7 L 12FIND_B_END
12SUB_DIGIT_ZERO_1 1 8 R 12FIND_B_END

# Subtract a one
12SUB_DIGIT_ONE 0 0 L 12SUB_DIGIT_ONE
12SUB_DIGIT_ONE 1 1 L 12SUB_DIGIT_ONE
12SUB_DIGIT_ONE 3 3 L 12SUB_DIGIT_ONE_1

12SUB_DIGIT_ONE_1 7 7 L 12SUB_DIGIT_ONE_1
12SUB_DIGIT_ONE_1 8 8 L 12SUB_DIGIT_ONE_1
12SUB_DIGIT_ONE_1 0 8 L 12SUB_DIGIT_ONE_2
12SUB_DIGIT_ONE_1 1 7 R 12FIND_B_END

12SUB_DIGIT_ONE_2 1 0 R 12FIND_B_END
12SUB_DIGIT_ONE_2 2 2 R 12OVERFLOW
12SUB_DIGIT_ONE_2 0 1 L 12SUB_DIGIT_ONE_2

# Unsigned overflow
12OVERFLOW 0 1 R 12OVERFLOW
12OVERFLOW 1 1 R 12OVERFLOW
12OVERFLOW 7 7 R 12FIND_B_END
12OVERFLOW 8 8 R 12FIND_B_END
12OVERFLOW 3 3 R 12FIND_B_END

# Return to the middle of the tape
12RESTORE 7 0 R 12RESTORE
12RESTORE 8 1 R 12RESTORE
12RESTORE 4 4 L 12RESTORE_1

12RESTORE_1 0 0 L 12RESTORE_1
12RESTORE_1 1 1 L 12RESTORE_1
12RESTORE_1 2 2 L 12RESTORE_1
12RESTORE_1 3 3 L 12RESTORE_1
12RESTORE_1 7 0 L 12RESTORE_1
12RESTORE_1 8 1 L 12RESTORE_1
12RESTORE_1 5 5 S 12END


#
#asm STORE S1 A
#


12END 5 5 S 13START

13START 5 5 L 13TO_S1_END
# To end of S1
13TO_S1_END 6 6 L 13SET_TO_7

# Set all the values to 7 untill the start of S1
13SET_TO_7 0 7 L 13SET_TO_7
13SET_TO_7 1 7 L 13SET_TO_7
13SET_TO_7 6 9 R 13TO_MIDDLE_R
# Find the middle
13TO_MIDDLE_R 1 1 R 13TO_MIDDLE_R
13TO_MIDDLE_R 0 0 R 13TO_MIDDLE_R
13TO_MIDDLE_R 7 7 R 13TO_MIDDLE_R
13TO_MIDDLE_R 2 2 R 13TO_MIDDLE_R
13TO_MIDDLE_R 6 6 R 13TO_MIDDLE_R
13TO_MIDDLE_R 5 5 R 13COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
13COPY_VALUE 0 7 L 13MOVE_ZERO
13COPY_VALUE 1 8 L 13MOVE_ONE
13COPY_VALUE 2 2 R 13COPY_VALUE
13COPY_VALUE 7 7 R 13COPY_VALUE
13COPY_VALUE 8 8 R 13COPY_VALUE
13COPY_VALUE 3 3 L 13RESTORE_VALUE

# Move a 0 to number 9
13MOVE_ZERO 0 0 L 13MOVE_ZERO
13MOVE_ZERO 1 1 L 13MOVE_ZERO
13MOVE_ZERO 2 2 L 13MOVE_ZERO
13MOVE_ZERO 3 3 L 13MOVE_ZERO
13MOVE_ZERO 4 4 L 13MOVE_ZERO
13MOVE_ZERO 9 9 R 13MOVE_ZERO_2
13MOVE_ZERO 5 5 L 13MOVE_ZERO
13MOVE_ZERO 6 6 L 13MOVE_ZERO
13MOVE_ZERO 7 7 L 13MOVE_ZERO
13MOVE_ZERO 8 8 L 13MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
13MOVE_ZERO_2 0 0 R 13MOVE_ZERO_2
13MOVE_ZERO_2 1 1 R 13MOVE_ZERO_2
13MOVE_ZERO_2 7 0 S 13TO_MIDDLE_R
# Move a 1 to number 9
13MOVE_ONE 0 0 L 13MOVE_ONE
13MOVE_ONE 1 1 L 13MOVE_ONE
13MOVE_ONE 2 2 L 13MOVE_ONE
13MOVE_ONE 3 3 L 13MOVE_ONE
13MOVE_ONE 4 4 L 13MOVE_ONE
13MOVE_ONE 9 9 R 13MOVE_ONE_2
13MOVE_ONE 5 5 L 13MOVE_ONE
13MOVE_ONE 6 6 L 13MOVE_ONE
13MOVE_ONE 7 7 L 13MOVE_ONE
13MOVE_ONE 8 8 L 13MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
13MOVE_ONE_2 0 0 R 13MOVE_ONE_2
13MOVE_ONE_2 1 1 R 13MOVE_ONE_2
13MOVE_ONE_2 7 1 S 13TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
13RESTORE_VALUE 7 0 L 13RESTORE_VALUE
13RESTORE_VALUE 8 1 L 13RESTORE_VALUE
13RESTORE_VALUE 2 2 L 13RESET_STORAGE_MARKER
# Reset 9 to 6
13RESET_STORAGE_MARKER 0 0 L 13RESET_STORAGE_MARKER
13RESET_STORAGE_MARKER 1 1 L 13RESET_STORAGE_MARKER
13RESET_STORAGE_MARKER 5 5 L 13RESET_STORAGE_MARKER
13RESET_STORAGE_MARKER 6 6 L 13RESET_STORAGE_MARKER
13RESET_STORAGE_MARKER 9 6 R 13RETURN_TO_MIDDLE
# Return to middle
13RETURN_TO_MIDDLE 0 0 R 13RETURN_TO_MIDDLE
13RETURN_TO_MIDDLE 1 1 R 13RETURN_TO_MIDDLE
13RETURN_TO_MIDDLE 6 6 R 13RETURN_TO_MIDDLE
13RETURN_TO_MIDDLE 5 5 S 13END


#
#asm LOAD S2 B
#


13END 5 5 S 14START

# Start of loading
14START 5 5 R 14TO_B_END_R
# To end of number B
14TO_B_END_R 0 0 R 14TO_B_END_R
14TO_B_END_R 1 1 R 14TO_B_END_R
14TO_B_END_R 2 2 R 14TO_B_END_R
14TO_B_END_R 3 3 R 14TO_B_END_R
14TO_B_END_R 4 4 L 14SET_TO_7

# Move to the start of number B, and set all values to 7
14SET_TO_7 0 7 L 14SET_TO_7
14SET_TO_7 1 7 L 14SET_TO_7
14SET_TO_7 3 3 L 14TO_MIDDLE_L
# Find the middle
14TO_MIDDLE_L 1 1 L 14TO_MIDDLE_L
14TO_MIDDLE_L 0 0 L 14TO_MIDDLE_L
14TO_MIDDLE_L 7 7 L 14TO_MIDDLE_L
14TO_MIDDLE_L 2 2 L 14TO_MIDDLE_L
14TO_MIDDLE_L 3 3 L 14TO_MIDDLE_L
14TO_MIDDLE_L 4 4 L 14TO_MIDDLE_L
14TO_MIDDLE_L 5 5 L 14TO_S1_END
# To end of S1
14TO_S1_END 6 6 L 14TO_S2_END
# To end of S2
14TO_S2_END 0 0 L 14TO_S2_END
14TO_S2_END 1 1 L 14TO_S2_END
14TO_S2_END 6 6 L 14COPY_VALUE
# Move Left until start of S2
# Copy the first non-7/8 value
14COPY_VALUE 0 7 R 14MOVE_ZERO
14COPY_VALUE 1 8 R 14MOVE_ONE
14COPY_VALUE 7 7 L 14COPY_VALUE
14COPY_VALUE 8 8 L 14COPY_VALUE
14COPY_VALUE 6 6 R 14RESTORE_VALUE

# Move a 0 to number B
14MOVE_ZERO 0 0 R 14MOVE_ZERO
14MOVE_ZERO 1 1 R 14MOVE_ZERO
14MOVE_ZERO 2 2 R 14MOVE_ZERO
14MOVE_ZERO 3 3 R 14MOVE_ZERO
14MOVE_ZERO 4 4 L 14MOVE_ZERO_2
14MOVE_ZERO 5 5 R 14MOVE_ZERO
14MOVE_ZERO 6 6 R 14MOVE_ZERO
14MOVE_ZERO 7 7 R 14MOVE_ZERO
14MOVE_ZERO 8 8 R 14MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
14MOVE_ZERO_2 0 0 L 14MOVE_ZERO_2
14MOVE_ZERO_2 1 1 L 14MOVE_ZERO_2
14MOVE_ZERO_2 7 0 S 14TO_MIDDLE_L
# Move a 1 to number B
14MOVE_ONE 0 0 R 14MOVE_ONE
14MOVE_ONE 1 1 R 14MOVE_ONE
14MOVE_ONE 2 2 R 14MOVE_ONE
14MOVE_ONE 3 3 R 14MOVE_ONE
14MOVE_ONE 4 4 L 14MOVE_ONE_2
14MOVE_ONE 5 5 R 14MOVE_ONE
14MOVE_ONE 6 6 R 14MOVE_ONE
14MOVE_ONE 7 7 R 14MOVE_ONE
14MOVE_ONE 8 8 R 14MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
14MOVE_ONE_2 0 0 L 14MOVE_ONE_2
14MOVE_ONE_2 1 1 L 14MOVE_ONE_2
14MOVE_ONE_2 7 1 S 14TO_MIDDLE_L
# Restore number B, translate 7 to 0 and 8 to 1
14RESTORE_VALUE 7 0 R 14RESTORE_VALUE
14RESTORE_VALUE 8 1 R 14RESTORE_VALUE
14RESTORE_VALUE 6 6 S 14TO_START
# Go back to the start
14TO_START 0 0 R 14TO_START
14TO_START 1 1 R 14TO_START
14TO_START 6 6 R 14TO_START
14TO_START 5 5 S 14END



#
#asm LOAD S6 C
#


14END 5 5 S 15START

# Start of loading
15START 5 5 R 15TO_C_END_R
# To end of number C
15TO_C_END_R 0 0 R 15TO_C_END_R
15TO_C_END_R 1 1 R 15TO_C_END_R
15TO_C_END_R 2 2 R 15TO_C_END_R
15TO_C_END_R 3 3 R 15TO_C_END_R
15TO_C_END_R 4 4 R 15TO_C_END_R
15TO_C_END_R 10 10 L 15SET_TO_7

# Move to the start of number C, and set all values to 7
15SET_TO_7 0 7 L 15SET_TO_7
15SET_TO_7 1 7 L 15SET_TO_7
15SET_TO_7 4 4 L 15TO_MIDDLE_L
# Find the middle
15TO_MIDDLE_L 1 1 L 15TO_MIDDLE_L
15TO_MIDDLE_L 0 0 L 15TO_MIDDLE_L
15TO_MIDDLE_L 7 7 L 15TO_MIDDLE_L
15TO_MIDDLE_L 2 2 L 15TO_MIDDLE_L
15TO_MIDDLE_L 3 3 L 15TO_MIDDLE_L
15TO_MIDDLE_L 4 4 L 15TO_MIDDLE_L
15TO_MIDDLE_L 5 5 L 15TO_S1_END
# To end of S1
15TO_S1_END 6 6 L 15TO_S2_END
# To end of S2
15TO_S2_END 0 0 L 15TO_S2_END
15TO_S2_END 1 1 L 15TO_S2_END
15TO_S2_END 6 6 L 15TO_S3_END
# To end of S3
15TO_S3_END 0 0 L 15TO_S3_END
15TO_S3_END 1 1 L 15TO_S3_END
15TO_S3_END 6 6 L 15TO_S4_END
# To end of S4
15TO_S4_END 0 0 L 15TO_S4_END
15TO_S4_END 1 1 L 15TO_S4_END
15TO_S4_END 6 6 L 15TO_S5_END
# To end of S5
15TO_S5_END 0 0 L 15TO_S5_END
15TO_S5_END 1 1 L 15TO_S5_END
15TO_S5_END 6 6 L 15TO_S6_END
# To end of S6
15TO_S6_END 0 0 L 15TO_S6_END
15TO_S6_END 1 1 L 15TO_S6_END
15TO_S6_END 6 6 L 15COPY_VALUE
# Move Left until start of S6
# Copy the first non-7/8 value
15COPY_VALUE 0 7 R 15MOVE_ZERO
15COPY_VALUE 1 8 R 15MOVE_ONE
15COPY_VALUE 7 7 L 15COPY_VALUE
15COPY_VALUE 8 8 L 15COPY_VALUE
15COPY_VALUE 6 6 R 15RESTORE_VALUE

# Move a 0 to number C
15MOVE_ZERO 0 0 R 15MOVE_ZERO
15MOVE_ZERO 1 1 R 15MOVE_ZERO
15MOVE_ZERO 2 2 R 15MOVE_ZERO
15MOVE_ZERO 3 3 R 15MOVE_ZERO
15MOVE_ZERO 4 4 R 15MOVE_ZERO
15MOVE_ZERO 10 10 L 15MOVE_ZERO_2
15MOVE_ZERO 5 5 R 15MOVE_ZERO
15MOVE_ZERO 6 6 R 15MOVE_ZERO
15MOVE_ZERO 7 7 R 15MOVE_ZERO
15MOVE_ZERO 8 8 R 15MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
15MOVE_ZERO_2 0 0 L 15MOVE_ZERO_2
15MOVE_ZERO_2 1 1 L 15MOVE_ZERO_2
15MOVE_ZERO_2 7 0 S 15TO_MIDDLE_L
# Move a 1 to number C
15MOVE_ONE 0 0 R 15MOVE_ONE
15MOVE_ONE 1 1 R 15MOVE_ONE
15MOVE_ONE 2 2 R 15MOVE_ONE
15MOVE_ONE 3 3 R 15MOVE_ONE
15MOVE_ONE 4 4 R 15MOVE_ONE
15MOVE_ONE 10 10 L 15MOVE_ONE_2
15MOVE_ONE 5 5 R 15MOVE_ONE
15MOVE_ONE 6 6 R 15MOVE_ONE
15MOVE_ONE 7 7 R 15MOVE_ONE
15MOVE_ONE 8 8 R 15MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
15MOVE_ONE_2 0 0 L 15MOVE_ONE_2
15MOVE_ONE_2 1 1 L 15MOVE_ONE_2
15MOVE_ONE_2 7 1 S 15TO_MIDDLE_L
# Restore number C, translate 7 to 0 and 8 to 1
15RESTORE_VALUE 7 0 R 15RESTORE_VALUE
15RESTORE_VALUE 8 1 R 15RESTORE_VALUE
15RESTORE_VALUE 6 6 S 15TO_START
# Go back to the start
15TO_START 0 0 R 15TO_START
15TO_START 1 1 R 15TO_START
15TO_START 6 6 R 15TO_START
15TO_START 5 5 S 15END



#
#asm MUL
#


15END 5 5 S 16START

# Start of the binary multiplication
16START 5 5 R 16CLEAR_A

# Clear A
16CLEAR_A 1 0 R 16CLEAR_A
16CLEAR_A 0 0 R 16CLEAR_A
16CLEAR_A 2 2 R 16CLEAR_A
16CLEAR_A 3 3 R 16FIND_B_END

# Find the end of the B
16FIND_B_END 0 0 R 16FIND_B_END
16FIND_B_END 1 1 R 16FIND_B_END
16FIND_B_END 2 2 R 16FIND_B_END
16FIND_B_END 3 3 R 16FIND_B_END
16FIND_B_END 7 7 R 16FIND_B_END
16FIND_B_END 8 8 R 16FIND_B_END
16FIND_B_END 4 4 L 16CHECK_B

# Check last digit of B
# If last digit is 0, multiply C by 2
# If last digit is 1, Add C to A and then multiply C by 2
16CHECK_B 11 11 L 16CHECK_B
16CHECK_B 0 11 R 16SHIFT_C
16CHECK_B 1 11 R 16ADD_C_TO_A_0
16CHECK_B 3 3 R 16CLEAR_B

## Multiply C by shifting each bit to the left

# First go to end of C
16SHIFT_C 0 0 R 16SHIFT_C
16SHIFT_C 1 1 R 16SHIFT_C
16SHIFT_C 11 11 R 16SHIFT_C
16SHIFT_C 4 4 R 16SHIFT_C
16SHIFT_C 10 10 L 16SHIFT_C_ZERO

# Place a 0 and shift left
16SHIFT_C_ZERO 0 0 L 16SHIFT_C_ZERO
16SHIFT_C_ZERO 1 0 L 16SHIFT_C_ONE
16SHIFT_C_ZERO 4 4 L 16CHECK_B

# Place a 1 and shift left
16SHIFT_C_ONE 0 1 L 16SHIFT_C_ZERO
16SHIFT_C_ONE 1 1 L 16SHIFT_C_ONE
16SHIFT_C_ONE 4 4 L 16CHECK_B

## Add C to A

# First go to end of C
16ADD_C_TO_A_0 0 0 R 16ADD_C_TO_A_0
16ADD_C_TO_A_0 1 1 R 16ADD_C_TO_A_0
16ADD_C_TO_A_0 3 3 R 16ADD_C_TO_A_0
16ADD_C_TO_A_0 4 4 R 16ADD_C_TO_A_0
16ADD_C_TO_A_0 7 7 R 16ADD_C_TO_A_0
16ADD_C_TO_A_0 8 8 R 16ADD_C_TO_A_0
16ADD_C_TO_A_0 11 11 R 16ADD_C_TO_A_0
16ADD_C_TO_A_0 10 10 L 16ADD_C_TO_A_1

# Find first non-moved digit of C, and replace 0 with 7 and 1 with 8
16ADD_C_TO_A_1 0 7 L 16ADD_C_TO_A_ZERO
16ADD_C_TO_A_1 1 8 L 16ADD_C_TO_A_ONE
16ADD_C_TO_A_1 7 7 L 16ADD_C_TO_A_1
16ADD_C_TO_A_1 8 8 L 16ADD_C_TO_A_1
16ADD_C_TO_A_1 4 4 R 16ADD_C_TO_A_RESTORE_0

# Move a 0 from C to end of A
16ADD_C_TO_A_ZERO 0 0 L 16ADD_C_TO_A_ZERO
16ADD_C_TO_A_ZERO 1 1 L 16ADD_C_TO_A_ZERO
16ADD_C_TO_A_ZERO 4 4 L 16ADD_C_TO_A_ZERO
16ADD_C_TO_A_ZERO 7 7 L 16ADD_C_TO_A_ZERO
16ADD_C_TO_A_ZERO 8 8 L 16ADD_C_TO_A_ZERO
16ADD_C_TO_A_ZERO 11 11 L 16ADD_C_TO_A_ZERO
16ADD_C_TO_A_ZERO 3 3 L 16ADD_C_TO_A_ZERO_1

# Set the 0 in A to 7, except if its a 1
16ADD_C_TO_A_ZERO_1 7 7 L 16ADD_C_TO_A_ZERO_1
16ADD_C_TO_A_ZERO_1 8 8 L 16ADD_C_TO_A_ZERO_1
16ADD_C_TO_A_ZERO_1 0 7 R 16ADD_C_TO_A_0
16ADD_C_TO_A_ZERO_1 1 8 R 16ADD_C_TO_A_0

# Move a 1 from C to end of A
16ADD_C_TO_A_ONE 0 0 L 16ADD_C_TO_A_ONE
16ADD_C_TO_A_ONE 1 1 L 16ADD_C_TO_A_ONE
16ADD_C_TO_A_ONE 4 4 L 16ADD_C_TO_A_ONE
16ADD_C_TO_A_ONE 7 7 L 16ADD_C_TO_A_ONE
16ADD_C_TO_A_ONE 8 8 L 16ADD_C_TO_A_ONE
16ADD_C_TO_A_ONE 11 11 L 16ADD_C_TO_A_ONE
16ADD_C_TO_A_ONE 3 3 L 16ADD_C_TO_A_ONE_1

# Set the 1 in A to 8, unless if its already a 1
16ADD_C_TO_A_ONE_1 7 7 L 16ADD_C_TO_A_ONE_1
16ADD_C_TO_A_ONE_1 8 8 L 16ADD_C_TO_A_ONE_1
16ADD_C_TO_A_ONE_1 0 8 R 16ADD_C_TO_A_0
16ADD_C_TO_A_ONE_1 1 7 L 16ADD_C_TO_A_ONE_1_MOVE

# Move the 1 to the next digit, if its a 1, make it 0 and move to the next digit
16ADD_C_TO_A_ONE_1_MOVE 0 1 R 16ADD_C_TO_A_0
16ADD_C_TO_A_ONE_1_MOVE 1 0 L 16ADD_C_TO_A_ONE_1_MOVE

# Restore the number in C
16ADD_C_TO_A_RESTORE_0 7 0 R 16ADD_C_TO_A_RESTORE_0
16ADD_C_TO_A_RESTORE_0 8 1 R 16ADD_C_TO_A_RESTORE_0
16ADD_C_TO_A_RESTORE_0 10 10 L 16ADD_C_TO_A_RESTORE_1

# Move to the start of A
16ADD_C_TO_A_RESTORE_1 0 0 L 16ADD_C_TO_A_RESTORE_1
16ADD_C_TO_A_RESTORE_1 1 1 L 16ADD_C_TO_A_RESTORE_1
16ADD_C_TO_A_RESTORE_1 3 3 L 16ADD_C_TO_A_RESTORE_1
16ADD_C_TO_A_RESTORE_1 4 4 L 16ADD_C_TO_A_RESTORE_1
16ADD_C_TO_A_RESTORE_1 7 7 L 16ADD_C_TO_A_RESTORE_1
16ADD_C_TO_A_RESTORE_1 8 8 L 16ADD_C_TO_A_RESTORE_1
16ADD_C_TO_A_RESTORE_1 11 11 L 16ADD_C_TO_A_RESTORE_1
16ADD_C_TO_A_RESTORE_1 2 2 R 16ADD_C_TO_A_RESTORE_2

# Restore the number in A, and move to the end of B
16ADD_C_TO_A_RESTORE_2 0 0 R 16ADD_C_TO_A_RESTORE_2
16ADD_C_TO_A_RESTORE_2 1 1 R 16ADD_C_TO_A_RESTORE_2
16ADD_C_TO_A_RESTORE_2 11 11 R 16ADD_C_TO_A_RESTORE_2
16ADD_C_TO_A_RESTORE_2 3 3 R 16ADD_C_TO_A_RESTORE_2
16ADD_C_TO_A_RESTORE_2 7 0 R 16ADD_C_TO_A_RESTORE_2
16ADD_C_TO_A_RESTORE_2 8 1 R 16ADD_C_TO_A_RESTORE_2
16ADD_C_TO_A_RESTORE_2 4 4 L 16SHIFT_C

# Clear B, set all to 0
16CLEAR_B 11 0 R 16CLEAR_B
16CLEAR_B 4 4 L 16RETURN

# Return to the start of the program
16RETURN 0 0 L 16RETURN
16RETURN 1 1 L 16RETURN
16RETURN 2 2 L 16RETURN
16RETURN 3 3 L 16RETURN
16RETURN 5 5 S 16END


#
#asm STORE S2 A
#


16END 5 5 S 17START

17START 5 5 L 17TO_S1_END
# To end of S1
17TO_S1_END 6 6 L 17TO_S2_END
# To end of S2
17TO_S2_END 0 0 L 17TO_S2_END
17TO_S2_END 1 1 L 17TO_S2_END
17TO_S2_END 6 6 L 17SET_TO_7

# Set all the values to 7 untill the start of S1
17SET_TO_7 0 7 L 17SET_TO_7
17SET_TO_7 1 7 L 17SET_TO_7
17SET_TO_7 6 9 R 17TO_MIDDLE_R
# Find the middle
17TO_MIDDLE_R 1 1 R 17TO_MIDDLE_R
17TO_MIDDLE_R 0 0 R 17TO_MIDDLE_R
17TO_MIDDLE_R 7 7 R 17TO_MIDDLE_R
17TO_MIDDLE_R 2 2 R 17TO_MIDDLE_R
17TO_MIDDLE_R 6 6 R 17TO_MIDDLE_R
17TO_MIDDLE_R 5 5 R 17COPY_VALUE
# Move Left until start of A
# Copy the first non-7/MovH8 value
17COPY_VALUE 0 7 L 17MOVE_ZERO
17COPY_VALUE 1 8 L 17MOVE_ONE
17COPY_VALUE 2 2 R 17COPY_VALUE
17COPY_VALUE 7 7 R 17COPY_VALUE
17COPY_VALUE 8 8 R 17COPY_VALUE
17COPY_VALUE 3 3 L 17RESTORE_VALUE

# Move a 0 to number 9
17MOVE_ZERO 0 0 L 17MOVE_ZERO
17MOVE_ZERO 1 1 L 17MOVE_ZERO
17MOVE_ZERO 2 2 L 17MOVE_ZERO
17MOVE_ZERO 3 3 L 17MOVE_ZERO
17MOVE_ZERO 4 4 L 17MOVE_ZERO
17MOVE_ZERO 9 9 R 17MOVE_ZERO_2
17MOVE_ZERO 5 5 L 17MOVE_ZERO
17MOVE_ZERO 6 6 L 17MOVE_ZERO
17MOVE_ZERO 7 7 L 17MOVE_ZERO
17MOVE_ZERO 8 8 L 17MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
17MOVE_ZERO_2 0 0 R 17MOVE_ZERO_2
17MOVE_ZERO_2 1 1 R 17MOVE_ZERO_2
17MOVE_ZERO_2 7 0 S 17TO_MIDDLE_R
# Move a 1 to number 9
17MOVE_ONE 0 0 L 17MOVE_ONE
17MOVE_ONE 1 1 L 17MOVE_ONE
17MOVE_ONE 2 2 L 17MOVE_ONE
17MOVE_ONE 3 3 L 17MOVE_ONE
17MOVE_ONE 4 4 L 17MOVE_ONE
17MOVE_ONE 9 9 R 17MOVE_ONE_2
17MOVE_ONE 5 5 L 17MOVE_ONE
17MOVE_ONE 6 6 L 17MOVE_ONE
17MOVE_ONE 7 7 L 17MOVE_ONE
17MOVE_ONE 8 8 L 17MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
17MOVE_ONE_2 0 0 R 17MOVE_ONE_2
17MOVE_ONE_2 1 1 R 17MOVE_ONE_2
17MOVE_ONE_2 7 1 S 17TO_MIDDLE_R
# Restore number A, translate 7 to 0 and 8 to 1
17RESTORE_VALUE 7 0 L 17RESTORE_VALUE
17RESTORE_VALUE 8 1 L 17RESTORE_VALUE
17RESTORE_VALUE 2 2 L 17RESET_STORAGE_MARKER
# Reset 9 to 6
17RESET_STORAGE_MARKER 0 0 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 1 1 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 5 5 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 6 6 L 17RESET_STORAGE_MARKER
17RESET_STORAGE_MARKER 9 6 R 17RETURN_TO_MIDDLE
# Return to middle
17RETURN_TO_MIDDLE 0 0 R 17RETURN_TO_MIDDLE
17RETURN_TO_MIDDLE 1 1 R 17RETURN_TO_MIDDLE
17RETURN_TO_MIDDLE 6 6 R 17RETURN_TO_MIDDLE
17RETURN_TO_MIDDLE 5 5 S 17END


#
#asm JMP L1
#


17END 5 5 S 18START
18START 5 5 S LABEL_L1

#
#asm L2:
#

LABEL_L2 5 5 S 18END

#
#asm LOAD S2 A
#


18END 5 5 S 19START

# Start of loading
19START 5 5 R 19TO_A_END_R
# To end of number A
19TO_A_END_R 0 0 R 19TO_A_END_R
19TO_A_END_R 1 1 R 19TO_A_END_R
19TO_A_END_R 2 2 R 19TO_A_END_R
19TO_A_END_R 3 3 L 19SET_TO_7

# Move to the start of number A, and set all values to 7
19SET_TO_7 0 7 L 19SET_TO_7
19SET_TO_7 1 7 L 19SET_TO_7
19SET_TO_7 2 2 L 19TO_MIDDLE_L
# Find the middle
19TO_MIDDLE_L 1 1 L 19TO_MIDDLE_L
19TO_MIDDLE_L 0 0 L 19TO_MIDDLE_L
19TO_MIDDLE_L 7 7 L 19TO_MIDDLE_L
19TO_MIDDLE_L 2 2 L 19TO_MIDDLE_L
19TO_MIDDLE_L 3 3 L 19TO_MIDDLE_L
19TO_MIDDLE_L 4 4 L 19TO_MIDDLE_L
19TO_MIDDLE_L 5 5 L 19TO_S1_END
# To end of S1
19TO_S1_END 6 6 L 19TO_S2_END
# To end of S2
19TO_S2_END 0 0 L 19TO_S2_END
19TO_S2_END 1 1 L 19TO_S2_END
19TO_S2_END 6 6 L 19COPY_VALUE
# Move Left until start of S2
# Copy the first non-7/8 value
19COPY_VALUE 0 7 R 19MOVE_ZERO
19COPY_VALUE 1 8 R 19MOVE_ONE
19COPY_VALUE 7 7 L 19COPY_VALUE
19COPY_VALUE 8 8 L 19COPY_VALUE
19COPY_VALUE 6 6 R 19RESTORE_VALUE

# Move a 0 to number A
19MOVE_ZERO 0 0 R 19MOVE_ZERO
19MOVE_ZERO 1 1 R 19MOVE_ZERO
19MOVE_ZERO 2 2 R 19MOVE_ZERO
19MOVE_ZERO 3 3 L 19MOVE_ZERO_2
19MOVE_ZERO 4 4 R 19MOVE_ZERO
19MOVE_ZERO 5 5 R 19MOVE_ZERO
19MOVE_ZERO 6 6 R 19MOVE_ZERO
19MOVE_ZERO 7 7 R 19MOVE_ZERO
19MOVE_ZERO 8 8 R 19MOVE_ZERO
# Move a 0 to the left until the first 7, and replace it
19MOVE_ZERO_2 0 0 L 19MOVE_ZERO_2
19MOVE_ZERO_2 1 1 L 19MOVE_ZERO_2
19MOVE_ZERO_2 7 0 S 19TO_MIDDLE_L
# Move a 1 to number A
19MOVE_ONE 0 0 R 19MOVE_ONE
19MOVE_ONE 1 1 R 19MOVE_ONE
19MOVE_ONE 2 2 R 19MOVE_ONE
19MOVE_ONE 3 3 L 19MOVE_ONE_2
19MOVE_ONE 4 4 R 19MOVE_ONE
19MOVE_ONE 5 5 R 19MOVE_ONE
19MOVE_ONE 6 6 R 19MOVE_ONE
19MOVE_ONE 7 7 R 19MOVE_ONE
19MOVE_ONE 8 8 R 19MOVE_ONE
# Move a 1 to the left until the first 7, and replace it
19MOVE_ONE_2 0 0 L 19MOVE_ONE_2
19MOVE_ONE_2 1 1 L 19MOVE_ONE_2
19MOVE_ONE_2 7 1 S 19TO_MIDDLE_L
# Restore number A, translate 7 to 0 and 8 to 1
19RESTORE_VALUE 7 0 R 19RESTORE_VALUE
19RESTORE_VALUE 8 1 R 19RESTORE_VALUE
19RESTORE_VALUE 6 6 S 19TO_START
# Go back to the start
19TO_START 0 0 R 19TO_START
19TO_START 1 1 R 19TO_START
19TO_START 6 6 R 19TO_START
19TO_START 5 5 S 19END


19END 5 5 S END